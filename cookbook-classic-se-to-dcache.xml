<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
]>

<chapter id="se-to-dcache">
  
  <title>Migration of classic SE ( nfs, disk ) to dCache</title>

  <para>
    This chapter contains a guide to migrate a classic SE to dCache.
  </para>

  <para>
    The convertion of a classic SE to dCache is not complicated, but
    has to be done very carefully to prevent data losses.
  </para>

  <para>
    We assume, that dCache is installed and configured.( <xref
    linkend="in-install"/>). To be on the safe side, we recommend to
    install a new pool on a different host, since there is no easy way
    to switch back to classic SE.
  </para>

  <itemizedlist>
    <listitem>
      <para>
	create a new pool.
      </para>
    </listitem>
    <listitem>
      <para>
	for each file in the classic SE an entry in &pnfs; has to be
	created. then the file has to be moved to data directory in
	the pool control directory and the owner, group and size must
	be set in &pnfs;. To avoid mistakes we recomend to use a
	script developed and tested by the &dcache; developers. Run
	the script for each file which goes into &dcache;:
      </para>


      <screen>&prompt-root;find . -type f -exec file2dcache.sh {} <replaceable>/pnfs/desy.de/data/fromSE</replaceable> <replaceable>/pool/pool1</replaceable> \; </screen>
    </listitem>

    <listitem>
      <para>
	start the pool. Since the pool has to recreate the inventory,
	the start up time will be longer than usually..
      </para>
    </listitem>

    <listitem>
      <para>
	connect to the dCache via admin interface and register the
	newly created files:
      </para>

      <programlisting><command>cd pool1</command>
      <command>pnfs register</command>
      <command>..</command>
      <command>logoff</command>
      </programlisting>

    </listitem>
  </itemizedlist>

  <para>
    The newly migrated files shall be available already.
  </para>

  <programlisting>#!/bin/sh

if [ $# -ne 3 ]
then
   echo "Usage: $0 &lt;file&gt; &lt;pnfs path&gt; &lt;pool base&gt;"
   exit 1;
fi

SRC=$1
FILE=`basename $1`
DIR=`dirname $1`
PNFS_PRFIX=$2
POOL_BASE=$3

PNFS_FILE="${PNFS_PRFIX}/${DIR}/${FILE}"

if [ ! -f "${SRC}" ]
then
   echo "File ${SRC} do not exist."
   exit 1
fi

if [  -f "${PNFS_FILE}" ]
then
   echo "File ${PNFS_FILE}  already exist."
   exit 2
fi

if [ ! -d "${POOL_BASE}/control" ]
then
   echo "Creating directory [control]"
   mkdir ${POOL_BASE}/control
fi

if [ ! -d "${POOL_BASE}/data" ]
then
   echo "Creating directory [data]"
   mkdir ${POOL_BASE}/data
fi

if [ ! -f "setup" ]
then
   echo "Creating dummy [setup] file"
   touch  ${POOL_BASE}/setup
fi

echo "Creating file in pnfs"
if [ ! -d ${PNFS_PRFIX}/${DIR} ]
then
   mkdir -p ${PNFS_PRFIX}/${DIR} > /dev/null 2&gt;&amp;1
   if [ $? -ne 0 ]
   then
      echo "Failed to create directory ${PNFS_PRFIX}/${DIR}"
      exit 3;
   fi
fi

touch ${PNFS_FILE}
FILE_SIZE=`stat -c "%s" ${SRC}`
touch "${PNFS_PRFIX}/${DIR}/.(fset)(${FILE})(size)(${FILE_SIZE})"
chmod --reference=${SRC} ${PNFS_FILE}
chown --reference=${SRC} ${PNFS_FILE}

echo "Creating control file for pnfsID $PNFS_ID"
PNFS_ID=`cat "${PNFS_PRFIX}/${DIR}/.(id)(${FILE})"`
echo "precious" >  ${POOL_BASE}/control/${PNFS_ID}
echo "Copy ${SRC} to  ${POOL_BASE}/data/${PNFS_ID}"
cp  ${SRC}  ${POOL_BASE}/data/${PNFS_ID}

exit 0</programlisting>



</chapter>