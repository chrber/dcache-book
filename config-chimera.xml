<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
<!ENTITY chimera-cli  "&path-odb-n-s;chimera-cli.sh">
]>
<chapter id="cf-chimera">
  <title>&chimera;</title>

    <para>
      &dcache; is a distributed storage system, nevertheless it
      provides a single-rooted file system view. While &dcache;
      supports multiple namespace providers, &chimera; is the
      recommended provider and is used by default.
    </para>

    <para>
      The inner &dcache; components talk to the namespace via a module
      called &cell-pnfsmngr;, which in turn communicates with the
      &chimera; database using a thin &java; layer, which in turn
      communicates directly with the &chimera; database. &chimera;
      allows direct access to the namespace by providing an &nfs3; and
      &nfs4; server. Clients can &nfs;-mount the namespace locally.
      This offers the opportunity to use OS-level tools like
      &prog-ls;, &prog-mkdir;, &prog-mv; for &chimera;. Direct
      I/O-operations like &prog-cp; and &prog-cat; are possible with
      the &nfs4; door.
    </para>

    <para>
      The properties of &chimera; are defined in
      <filename>&path-ods-usd;/defaults/chimera.properties</filename>. For
      customisation the files
      <filename>&path-ode-ed;/layouts/mylayout.conf</filename> or
      <filename>&path-ode-ed;/dcache.conf</filename> should be
      modified (see <xref linkend="in-install-layout" />).
    </para>

    <informalexample>
      <para>
	This example shows an extract of the
	<filename>&path-ode-ed;/layouts/mylayout.conf</filename>
	file in order to run &dcache; with &nfs3;.
      </para>

      <programlisting>[namespaceDomain]
[namespaceDomain/pnfsmanager]
[namespaceDomain/nfsv3]</programlisting>
    </informalexample>

    <informalexample>
      <para>
	If you want to run the &nfs4; server you need to add the
	corresponding &cell-nfsv41; service to a domain in the
	<filename>&path-ode-ed;/layouts/mylayout.conf</filename>
	file and start this domain.
      </para>
      <programlisting>[namespaceDomain]
[namespaceDomain/pnfsmanager]
[namespaceDomain/nfsv41]</programlisting>
    </informalexample>

      <para>
	If you wish &dcache; to access your &chimera; with a &psql; user
	other than <database class="user">chimera</database> then you must specify the username and
	password in <filename>&path-ode-ed;/dcache.conf</filename>.
     </para>
      <programlisting>chimera.db.user=myuser
chimera.db.password=secret</programlisting>

    <important>
      <para>
	Do not update configuration values in
	<filename>&path-ods-usd;/defaults/chimera.properties</filename>,
	since changes to this file will be overwritten by updates.
      </para>
    </important>

<section id="chimera-mount">
  <title>Mounting &chimera; through &nfs;</title>

  <para>
    &dcache; does not need the &chimera; filesystem to be mounted but
    a mounted file system is convenient for administrative access.
    This offers the opportunity to use OS-level tools like
    <command>ls</command> and <command>mkdir</command> for
    &chimera;. However, direct I/O-operations like
    <command>cp</command> are not possible, since the &nfs3; interface
    provides the namespace part only. This section describes how to
    start the &chimera; &nfs3; server and mount the name space.
  </para>

  <para>
     If you want to mount &chimera; for easier administrative access,
     you need to edit the <filename>/etc/exports</filename> file as
     the &chimera; &nfs; server uses it to manage exports. If this
     file doesn't exist it must be created.  The typical
     <filename>exports</filename> file looks like this:
  </para>

  <programlisting>/ localhost(rw)
/data
# or
# /data *.my.domain(rw)</programlisting>

  <para>
    As any RPC service &chimera; &nfs; requires <systemitem
    class='service'>rpcbind</systemitem> service to run on the
    host. Nevertheless <systemitem
    class='service'>rpcbind</systemitem> has to be configured to
    accept requests from &chimera; &nfs;. On RHEL6 based systems you
    need to add <screen>RPCBIND_ARGS="-i"</screen> into
    <filename>/etc/sysconfig/rpcbind</filename>. Check your OS manual
    for details.
  </para>

  <para>
    If your OS does not provide <systemitem class='service'>rpcbind</systemitem>
    &chimera; &nfs; can use an embedded <systemitem class='service'>rpcbind</systemitem>.
    This requires to disable the <systemitem class='service'>portmap</systemitem>
    service if it exists.
  </para>

   <screen>&prompt-root; <userinput>/etc/init.d/portmap stop</userinput>
Stopping portmap: portmap</screen>
  <para>
    and restart the domain in which the &nfs; server is running.
  </para>
  <informalexample>
    <screen>&prompt-root;<userinput>&path-odb-n-s;dcache restart namespaceDomain</userinput></screen>
  </informalexample>

  <para>
    Now you can mount &chimera; by
  </para>

  <screen>&prompt-root; <userinput>mount localhost:/ /mnt</userinput></screen>

  <para>
    and create the root of the &chimera; namespace which you can call
    <filename class="directory">data</filename>:
  </para>

  <screen>&prompt-root; <userinput>mkdir -p /mnt/data</userinput></screen>

  <para>
    If you don't want to mount chimera you can create the root of the &chimera; namespace by
  </para>

  <screen>&prompt-root; <userinput>&chimera-cli; Mkdir /data</userinput></screen>

  <para>
    You can now add directory tags.  For more information on tags see
    <xref linkend="chimera-tags"/>.
  </para>

  <screen>&prompt-root; <userinput>echo "chimera" | &chimera-cli; Writetag /data sGroup</userinput>
&prompt-root; <userinput>echo "StoreName sql" | &chimera-cli; Writetag /data OSMTemplate</userinput></screen>

  <section id="chimera-useDcap">
    <title>Using &dcap; with a mounted file system</title>

    <para>
      If you plan to use &dcap; with a mounted file system instead of
      the &url;-syntax (e.g. &prog-dccp;
      <filename>/data/file1</filename>
      <filename>/tmp/file1</filename>), you need to mount the root of
      &chimera; locally (remote mounts are not allowed yet). This will
      allow us to establish wormhole files so &dcap; clients can
      discover the &dcap; doors.
    </para>

    <screen>&prompt-root; <userinput>mount localhost:/ /mnt</userinput>
&prompt-root; <userinput>mkdir /mnt/admin/etc/config/dCache</userinput>
&prompt-root; <userinput>touch /mnt/admin/etc/config/dCache/dcache.conf</userinput>
&prompt-root; <userinput>touch /mnt/admin/etc/config/dCache/'.(fset)(dcache.conf)(io)(on)'</userinput>
&prompt-root; <userinput>echo "<replaceable>door host</replaceable>:<replaceable>port</replaceable>" > /mnt/admin/etc/config/dCache/dcache.conf</userinput></screen>

    <para>
      The default values for ports can be found in <xref
      linkend="rf-ports"/> (for &dcap; the default port is
      <literal>22125</literal>) and in the file
      <filename>&path-ods-usd;/defaults/dcache.properties</filename>. They
      can be altered in
      <filename>&path-ode-ed;/dcache.conf</filename>
    </para>

    <para>
      When the configuration is complete you can unmount &chimera;:
    </para>

    <screen>&prompt-root; <userinput>umount /mnt</userinput></screen>
  </section>

  <note>
    <para>
      Please note that whenever you need to change the configuration,
      you have to remount the root <literal>localhost:/</literal> to a
      temporary location like <filename
      class="directory">/mnt</filename>.
    </para>
  </note>

</section>

<section id="chimera-commands">
  <title>Communicating with &chimera; </title>

  <para>
    Many configuration parameters of &chimera; and the
    application specific meta data is accessed by reading, writing, or
    creating files of the form
    <filename>.(<replaceable>command</replaceable>)(<replaceable>para</replaceable>)</filename>.
    For example, the following prints the &chimera;ID of the file
    <filename>/data/some/dir/file.dat</filename>:
  </para>

  <screen>&prompt-user; <userinput>cat /data/any/sub/directory/'.(id)(file.dat)'</userinput>
0004000000000000002320B8 &prompt-user; </screen>
  <para>

    From the point of view of the &nfs; protocol, the file
    <filename>.(id)(file.dat)</filename> in the directory <filename
    class="directory">/data/some/dir/</filename> is read. However,
    &chimera; interprets it as the command <literal>id</literal> with
    the parameter <literal>file.dat</literal> executed in the
    directory <filename
    class="directory">/data/some/dir/</filename>. The quotes are
    important, because the shell would otherwise try to interpret the
    parentheses.
  </para>

  <para>
    Some of these command files have a second parameter in a third
    pair of parentheses. Note, that files of the form
    <filename>.(<replaceable>command</replaceable>)(<replaceable>para</replaceable>)</filename>
    are not really files. They are not shown when listing directories
    with <command>ls</command>. However, the command files are listed
    when they appear in the argument list of <command>ls</command> as
    in
  </para>

  <screen>&prompt-user; <userinput>ls -l '<filename>.(tag)(sGroup)</filename>'</userinput>
-rw-r--r-- 11 root root 7 Aug 6 2010 .(tag)(sGroup)</screen>

  <para>
    Only a subset of file operations are allowed on these special
    command files. Any other operation will result in an appropriate
    error. Beware, that files with names of this form might
    accidentally be created by typos.  They will then be shown when
    listing the directory.
  </para>

</section>

  <section id="cf-chimera-ids">
    <title>IDs</title>

    <para>
      Each file in &chimera; has a unique 18 byte long ID. It is
      referred to as ChimeraID or as pnfsID. This is comparable to the
      inode number in other filesystems. The ID used for a file
      will never be reused, even if the file is deleted. &dcache; uses
      the ID for all internal references to a file.
    </para>

    <informalexample>
      <para>
	The ID of the file
	<filename>example.org/data/examplefile</filename> can be
	obtained by reading the command-file
	<filename>.(id)(examplefile)</filename> in the directory of
	the file.
      </para>

    <screen>&prompt-user; <userinput>cat /example.org/data/'.(id)(examplefile)'</userinput>
0004000000000000002320B8</screen>
    </informalexample>


    <para>
      A file in &chimera; can be referred to by the ID for most
      operations.
    </para>
    <informalexample>
      <para>
	The name of a file can be obtained from the ID
	with the command <literal>nameof</literal> as follows:
    </para>

<screen>&prompt-user; <userinput>cd /example.org/data/</userinput>
&prompt-user; <userinput>cat '.(nameof)(0004000000000000002320B8)'</userinput>
examplefile</screen>
    <para>
      And the ID of the directory it resides in is obtained by:
    </para>
<screen>&prompt-user; <userinput>cat '.(parent)(0004000000000000002320B8)'</userinput>
0004000000000000001DC9E8</screen>
    </informalexample>

    <para>
      This way, the complete path of a file may be obtained starting
      from the ID.
    </para>

  </section>

<section id="chimera-tags">
  <title>Directory Tags</title>

  <para>
     In the &chimera; namespace, each directory can have a number of
     tags. These directory tags may be used within &dcache; to control
     the file placement policy in the pools (see <xref
     linkend="cf-pm-psu"/>). They might also be used by a <link
     linkend='cf-tss'>tertiary storage system</link> for similar
     purposes (e.g. controlling the set of tapes used for the files in
     the directory).
  </para>

  <note>
    <para>
      Directory tags are not needed to control the behaviour of
      &dcache;. &dcache; works well without directory tags.
    </para>
  </note>

  <section>
    <title>Create, List and Read Directory Tags if the Namespace is not Mounted</title>
  <para>
    You can create tags with
  </para>

    <screen>&prompt-user; <userinput>echo "<replaceable>content</replaceable>" | &chimera-cli; writetag <replaceable>directory</replaceable> <replaceable>tagName</replaceable></userinput></screen>

    <para>
      list tags with
    </para>

    <screen>&prompt-user; <userinput>&chimera-cli; lstag <replaceable>directory</replaceable> </userinput></screen>

    <para>
      and read tags with
    </para>
    <screen>&prompt-user; <userinput>&chimera-cli; readtag <replaceable>directory</replaceable> <replaceable>tagName</replaceable></userinput></screen>

    <informalexample>
    <para>
      Create tags for the directory <filename class='directory'>data</filename> with
    </para>
      <screen>&prompt-user; <userinput>echo "myGroup" | &chimera-cli; writetag /data sGroup</userinput>
&prompt-user; <userinput>echo "StoreName myStore" | &chimera-cli; writetag /data OSMTemplate</userinput></screen>
    <para>
      list the existing tags with
    </para>
      <screen>&prompt-user; <userinput>&chimera-cli; lstag /data</userinput>
Total: 2
OSMTemplate
sGroup</screen>
    <para>
      and their content with
    </para>
    <screen>&prompt-user; <userinput>&chimera-cli; readtag /data OSMTemplate</userinput>
StoreName myStore
&prompt-user; <userinput>&chimera-cli; readtag /data sGroup</userinput>
myGroup</screen>
    </informalexample>

  </section>


  <section>
    <title>Create, List and Read Directory Tags if the Namespace is Mounted</title>

    <para>
      If the namespace is mounted, change to the directory
      for which the tag should be set and create a tag with
    </para>

    <screen>&prompt-user; <userinput>cd <replaceable>directory</replaceable></userinput>
&prompt-user; <userinput>echo '<replaceable>content1</replaceable>' > '<filename>.(tag)(<replaceable>tagName1</replaceable>)</filename>'</userinput>
&prompt-user; <userinput>echo '<replaceable>content2</replaceable>' > '<filename>.(tag)(<replaceable>tagName2</replaceable>)</filename>'</userinput></screen>

  <para>
    Then the existing tags may be listed with
  </para>
  <screen>&prompt-user; <userinput>cat '<filename>.(tags)()</filename>'</userinput>
.(tag)(<replaceable>tagname1</replaceable>)
.(tag)(<replaceable>tagname2</replaceable>)</screen>

  <para>
    and the content of a tag can be read with
  </para>

  <screen>&prompt-user; <userinput>cat '<filename>.(tag)(<replaceable>tagname1</replaceable>)</filename>'</userinput>
<replaceable>content1</replaceable>
&prompt-user; <userinput>cat '<filename>.(tag)(<replaceable>tagName2</replaceable>)</filename>'</userinput>
<replaceable>content2</replaceable></screen>

  <informalexample>
    <para>
      Create tags for the directory <filename class='directory'>data</filename> with
    </para>
    <screen>&prompt-user; <userinput>cd data</userinput>
&prompt-user; <userinput>echo 'StoreName myStore' > '<filename>.(tag)(OSMTemplate)</filename>'</userinput>
&prompt-user; <userinput>echo 'myGroup' > '<filename>.(tag)(sGroup)</filename>'</userinput></screen>
    <para>
      list the existing tags with
    </para>
    <screen>&prompt-user; <userinput>cat '<filename>.(tags)()</filename>'</userinput>
.(tag)(OSMTemplate)
.(tag)(sGroup)</screen>
    <para>
      and their content with
    </para>
    <screen>&prompt-user; <userinput>cat '<filename>.(tag)(OSMTemplate)</filename>'</userinput>
StoreName myStore
&prompt-user; <userinput>cat '<filename>.(tag)(sGroup)</filename>'</userinput>
 myGroup</screen>

  <para>
    A nice trick to list all tags with their contents is
  </para>

  <screen>&prompt-user; <userinput>grep "" $(cat  ".(tags)()")</userinput>
.(tag)(OSMTemplate):StoreName myStore
.(tag)(sGroup):myGroup</screen>
  </informalexample>
  </section>


  <section>
    <title>Directory Tags and Command Files</title>

    <para>
      When creating or changing directory tags by writing to the
      command file as in
    </para>

    <screen>&prompt-user; <userinput>echo '<replaceable>content</replaceable>' > '<filename>.(tag)(<replaceable>tagName</replaceable>)</filename>'</userinput></screen>

    <para>
      one has to take care not to treat the command files in the
      same way as regular files, because tags are different from files
      in the following aspects:
    </para>

    <orderedlist>
      <listitem>
        <para>
          The <replaceable>tagName</replaceable> is limited to 62
          characters and the <replaceable>content</replaceable> to 512
          bytes. Writing more to the command file, will be silently
          ignored.
        </para>
      </listitem>
      <listitem>
	<para>
	  If a tag which does not exist in a directory is created by
          writing to it, it is called a <emphasis>primary</emphasis>
          tag.
        </para>
      </listitem>

      <listitem>
        <para>
	  Tags are <emphasis>inherited</emphasis> from the parent
          directory by a newly created directory. Changing a primary
          tag in one directory will change the tags inherited from it
	  in the same way. Creating a new primary tag in a directory will
          not create an inherited tag in its subdirectories.
        </para>
        <para>
	  Moving a directory within the &chimera; namespace will not
          change the inheritance. Therefore, a directory does not
          necessarily inherit tags from its parent directory. Removing
          an inherited tag does not have any effect.
        </para>
      </listitem>

      <listitem>
	<para>
	  Empty tags are ignored.
        </para>
      </listitem>

    </orderedlist>

  </section>


  <section>
    <title>Directory Tags for &dcache;</title>
    <para>
      The following directory tags appear in the &dcache; context:
    </para>
    <variablelist>
      <varlistentry>
	<term>OSMTemplate</term>

	<listitem>
	  <para>
	    Must contain a line of the form
	    <quote><literal>StoreName</literal>
	    <replaceable>storeName</replaceable></quote> and specifies
	    the name of the store that is used by &dcache; to
	    construct the <link
	    linkend="chimera-tags-storageClass">storage class</link> if
	    the <glossterm linkend="gl-hsm_type">&hsm;
	    type</glossterm> is <literal>osm</literal>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>&hsm;Type</term>

	<listitem>
	  <para>
	    The <glossterm linkend="gl-hsm_type">&hsm;
	    type</glossterm> is normally determined from the other
	    existing tags. E.g., if the tag
	    <literal>OSMTemplate</literal> exists, &hsm; type
	    <literal>osm</literal> is assumed. With this tag it can be
	    set explicitly. A class implementing that &hsm; type has
	    to exist. Currently the only implementations are
	    <literal>osm</literal> and <literal>enstore</literal>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
	<term>sGroup</term>

	<listitem>
          <para>
	    The storage group is also used to construct the <link
	    linkend="chimera-tags-storageClass">storage Class</link> if
	    the <glossterm linkend="gl-hsm_type">&hsm; type</glossterm>
	    is <literal>osm</literal>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
	<term>cacheClass</term>

	<listitem>
	  <para>
	    The cache class is only used to control on which pools the
            files in a directory may be stored, while the storage
            class (constructed from the two above tags) might also be
            used by the &hsm;. The cache class is only needed if the
            above two tags are already fixed by &hsm; usage and more
            flexibility is needed.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>&hsm;Instance</term>

	<listitem>
	  <para>
	    If not set, the &hsm; instance will be the same as the
	    &hsm; type. Setting this tag will only change the name as
	    used in the <link linkend="chimera-tags-storageClass">storage
	    class</link> and in the pool commands.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>


  <section id='chimera-tags-storageClass'>
    <title>Storage Class and Directory Tags</title>

    <para>
      The <link linkend="secStorageClass">storage class</link> is a
      string of the form
      <replaceable>StoreName</replaceable>:<replaceable>StorageGroup</replaceable>@<replaceable>hsm-type</replaceable>,
      where <replaceable>StoreName</replaceable> is given by the
      <literal>OSMTemplate</literal> tag,
      <replaceable>StorageGroup</replaceable> by the
      <literal>sGroup</literal> tag and
      <replaceable>hsm-type</replaceable> by the
      <literal>HSMType</literal> tag. As mentioned above the
      <literal>HSMType</literal> tag is assumed to be
      <literal>osm</literal> if the tag <literal>OSMTemplate</literal>
      exists.
    </para>
    <para>
      In the examples above two tags have been created.
    </para>

    <informalexample>
      <screen>&prompt-user; <userinput>&chimera-cli; lstag /data</userinput>
Total: 2
OSMTemplate
sGroup</screen>

      <para>
	As the tag <literal>OSMTemplate</literal> was created the tag
	&hsm; type is assumed to be <literal>osm</literal>.
      </para>
      <para>
	The storage class of the files which are copied into the
	directory <filename class='directory'>/data</filename> after
	the tags have been set will be
	<literal>myStore:myGroup@osm</literal>.
      </para>
    </informalexample>

    <para>
      If directory tags are used to control the behaviour of &dcache;
      and/or a tertiary storage system, it is a good idea to plan the
      directory structure in advance, thereby considering the
      necessary tags and how they should be set up. Moving directories
      should be done with great care or even not at all. Inherited
      tags can only be created by creating a new directory.
    </para>

    <informalexample>
      <para>
	Assume that data of two experiments,
	<literal>experiment-a</literal> and
	<literal>experiment-b</literal> is written into a namespace
	tree with subdirectories <filename
	class='directory'>/data/experiment-a</filename> and <filename
	class='directory'>/data/experiment-b</filename>. As some pools
	of the &dcache; are financed by
	<literal>experiment-a</literal> and others by
	<literal>experiment-b</literal> they probably do not like it
	if they are also used by the other group. To avoid this the
	directories of <literal>experiment-a</literal> and
	<literal>experiment-b</literal> can be tagged.
      </para>
      <screen>&prompt-user; <userinput>echo "StoreName exp-a" | /opt/d-cache/bin/chimera-cli.sh writetag /data/experiment-a OSMTemplate</userinput>
&prompt-user; <userinput>echo "StoreName exp-b" | /opt/d-cache/bin/chimera-cli.sh writetag /data/experiment-b OSMTemplate</userinput></screen>
      <para>
	Data from <literal>experiment-a</literal> taken in 2010 shall
	be written into the directory <filename
	class='directory'>/data/experiment-a/2010</filename> and data
	from <literal>experiment-a</literal> taken in 2011 shall be
	written into <filename
	class='directory'>/data/experiment-a/2011</filename>. Data
	from <literal>experiment-b</literal> shall be written into
	<filename class='directory'>/data/experiment-b</filename>. Tag
	the directories correspondingly.
      </para>
      <screen>&prompt-user; <userinput>echo "run2010" | /opt/d-cache/bin/chimera-cli.sh writetag /data/experiment-a/2010 sGroup</userinput>
&prompt-user; <userinput>echo "run2011" | /opt/d-cache/bin/chimera-cli.sh writetag /data/experiment-a/2011 sGroup</userinput>
&prompt-user; <userinput>echo "alldata" | /opt/d-cache/bin/chimera-cli.sh writetag /data/experiment-b sGroup</userinput></screen>

      <para>
	List the content of the tags by
      </para>

    <screen>&prompt-user; <userinput>&chimera-cli; readtag /data/experiment-a/2010 OSMTemplate</userinput>
StoreName exp-a
&prompt-user; <userinput>&chimera-cli; readtag /data/experiment-a/2010 sGroup</userinput>
run2010
&prompt-user; <userinput>&chimera-cli; readtag /data/experiment-a/2011 OSMTemplate</userinput>
StoreName exp-a
&prompt-user; <userinput>&chimera-cli; readtag /data/experiment-a/2011 sGroup</userinput>
run2011
&prompt-user; <userinput>&chimera-cli; readtag /data/experiment-b/2011 OSMTemplate</userinput>
StoreName exp-b
&prompt-user; <userinput>&chimera-cli; readtag /data/experiment-b/2011 sGroup</userinput>
alldata</screen>

      <para>
	As the tag <literal>OSMTemplate</literal> was created the
	&hsm; type is assumed to be <literal>osm</literal>.
      </para>

      <para>
	The storage classes of the files which are copied into these directories after the
	tags have been set will be
      </para>
      <itemizedlist>
	<listitem>
	  <literal>exp-a:run2010@osm</literal> for the files in <filename
	class='directory'>/data/experiment-a/2010</filename>
	</listitem>
	<listitem>
	  <literal>exp-a:run2011@osm</literal> for the files in <filename
	class='directory'>/data/experiment-a/2011</filename>
	</listitem>
	<listitem>
	  <literal>exp-b:alldata@osm</literal> for the files in <filename
	class='directory'>/data/experiment-b</filename>
	</listitem>
      </itemizedlist>

      <para>
	<!-- TODO Link to example as soon as it has an id -->
	To see how storage classes are used for pool selection have a
	look at the example 'Reserving Pools for Storage and Cache
	Classes' in the PoolManager chapter.
      </para>
    </informalexample>

    <para>
      There are more tags used by &dcache; if the &hsm; type
      <literal>enstore</literal> is used.
    </para>
  </section>

  </section>


 <!--  <section id="chimera-deleteFiles">
    <title>Deleting Files in &chimera;</title>

    <para>
       TODO: write section
    </para>
  </section> -->

</chapter>
