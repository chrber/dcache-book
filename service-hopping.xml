<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
]>

<chapter id="sv-hopping">

  <title>The &serv-hoppingmanager; Service</title>

  <para>
    File hopping is a collective term in &dcache;, summarizing the
    possibility of having files being transferred between &dcache;
    pools triggered by a variety of conditions. The most prominent
    examples are:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	If a file is requested by a client but the file resides on a
	pool from which this client, by configuration, is not allowed
	to read data, the dataset is transferred to an
	<quote>allowed</quote> pool first.
      </para>
    </listitem>

    <listitem>
      <para>
        If a pool encounters a steady high load, the system may, if
        configured, decide to replicate files to other pools to
        achieve an equal load distribution.
      </para>
    </listitem>

    <listitem>
      <para>
	&hsm; restore operations may be split into two steps. The
	first one reads data from tertiary storage to an <quote>HSM
	connected</quote> pool and the second step takes care that the
	file is replicated to a general read pool. Under some
	conditions this separation of &hsm; and non-&hsm; pools might
	become necessary for performance reasons.
      </para>
    </listitem>

    <listitem>
      <para>
    If a dataset has been written into &dcache; it might become
	necessary to have this file replicated instantly. The reasons
	can be, to either have a second, safe copy, or to make sure
	that clients don't access the file for reading on the write
	pools.
      </para>
    </listitem>
  </itemizedlist>

  <!-- TODO
  <section id="sv-hopping-config">
    <title>File Hopping by configuration</title>

  </section>

  <section id="sv-hopping-hotspot">
  <title>File Hopping by hot spot detection</title>
    <para>

    </para>
  </section>


  <section id="sv-hopping-hsm-restore">
  <title>File Hopping after restore from tertiary storage</title>
    <para>

    </para>
  </section>

  -->

  <section id="sv-hopping-onarrival">

    <title><firstterm>File Hopping on arrival</firstterm> from outside
    &dcache;</title>

    <para>
      <firstterm>File Hopping on arrival</firstterm> is a term, denoting the possibility of initiating a pool to pool transfer as the result of a file successfully arriving on a pool from some external client. Files restored from &hsm; or arriving on a pool as the result of a pool to pool transfer will not yet be forwarded.
    </para>

    <para>
      Forwarding of incoming files can be enabled by setting the <varname>replicateOnArrival</varname> property in the <filename>&path-ode-ed;/dcache.conf</filename> file or per pool in the layout file. It can be set to <literal>on</literal>, <literal>PoolManager</literal> or <literal>HoppingManager</literal>, where <literal>on</literal> does the same as <literal>PoolManager</literal>.
    </para>

	<para>
      The pool is requested to send a <literal>replicateFile</literal> message to either the &cell-poolmngr; or to the &cell-hopmngr;, if available. The different approaches are briefly described below and in more detail in the subsequent sections.
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  The <literal>replicateFile</literal> message is sent to the
	  &cell-poolmngr;. This happens for all files arriving at that
	  pool from outside (no restore or p2p). No intermediate
	  &cell-hopmngr; is needed.  The restrictions are
	</para>

	<itemizedlist>
	  <listitem>
	    <para>
	      All files are replicated. No pre-selection, e.g. on the storage class can be done.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      The mode of the replicated file is determined by the
	      destination pool and cannot be overwritten.  See <xref linkend="sv-hopping-onarrival-file-mode"/>
	    </para>
	  </listitem>
	</itemizedlist>
      </listitem>

      <listitem>
	<para>
	  The <literal>replicateFile</literal> message is sent to the
	  &cell-hopmngr;. The &cell-hopmngr; can be configured to
	  replicate certain storage classes only and to set the mode
	  of the replicated file according to rules. The file mode of
	  the source file cannot be modified.
	</para>
      </listitem>
    </itemizedlist>

    <section id="sv-hopping-onarrival-file-mode">
      <title>File mode of replicated files</title>

      <para>
	The mode of a replicated file can either be determined by
	settings in the destination pool or by the &cell-hopmngr;. It
	can be <literal>cached</literal> or <literal>precious</literal>.
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    If the &cell-poolmngr; is used for replication, the mode
	    of the replicated file is determined by the destination
	    pool.  The default setting is <literal>cached</literal>.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    If a &cell-hopmngr; is used for file replication, the mode
	    of the replicated file is determined by the &cell-hopmngr;
	    rule responsible for this particular replication. If the
	    destination mode is set to <literal>keep</literal> in the
	    rule, the mode of the destination pool determines the
	    final mode of the replicated file.
	  </para>
	</listitem>
      </itemizedlist>
    </section>

    <section>
      <title>File Hopping managed by the &cell-poolmngr;</title>
     <para>
       To enable replication on arrival by the &cell-poolmngr; set the
       property <varname>replicateOnArrival</varname> to
       <literal>on</literal> for the particular pool
     </para>
     <programlisting>[<replaceable>exampleDomain</replaceable>]
[<replaceable>exampleDomain</replaceable>/pool]
...
replicateOnArrival=on</programlisting>
	<para>
	  or for several pools in the <filename>&path-ode-ed;/dcache.conf</filename> file.
	</para>
	<programlisting>...
replicateOnArrival=on</programlisting>

      <para>
	File hopping configuration instructs a pool to send a
	<literal>replicateFile</literal> request to the
	&cell-poolmngr; as the result of a file arriving on that pool
	from some external client. All arriving files will be treated
	the same. The &cell-poolmngr; will process this transfer
	request by trying to find a matching link (Please find
	detailed information at <xref linkend='cf-pm'/>.
      </para>

     <para>
      It is possible to configure the &cell-poolmngr; such that files
      are replicated from this pool to a special set of destination
      pools.
     </para>
    </section>

    <informalexample>
      <para>
	Assume that we want to have all files, arriving on pool
	<literal>ocean</literal> to be immediately replicated to a
	subset of read pools. This subset of pools is described by the
	poolgroup <literal>ocean-copies</literal>. No other pool is
	member of the poolgroup <literal>ocean-copies</literal>.
      </para>
      <para>
	Other than that, files arriving at the pool
	<literal>mountain</literal> should be replicated to all read
	pools from which farm nodes on the <systemitem
	class='ipaddress'>131.169.10.0/24</systemitem> subnet are
	allowed to read.
      </para>

      <para>
	The layout file defining the pools <literal>ocean</literal>
	and <literal>mountain</literal> should read like this:
      </para>
      <programlisting>[exampleDomain]
[exampleDomain/pool]

name=ocean
path=/path/to/pool-ocean
waitForFiles=${path}/data
replicateOnArrival=on

name=mountain
path=/path/to/pool-mountain
waitForFiles=${path}/data
replicateOnArrival=on</programlisting>

       <para>
	 In the layout file it is defined that all files arriving on
	 the pools <literal>ocean</literal> or
	 <literal>mountain</literal> should be replicated
	 immediately. The following
	 <filename>PoolManager.conf</filename> file contains
	 instructions for the &cell-poolmngr; how to replicate these
	 files. Files arriving at the <literal>ocean</literal> pool
	 will be replicated to the <literal>ocean-copies</literal>
	 subset of the read pools and files arriving at the pool
	 <literal>mountain</literal> will be replicated to all read
	 pools from which farm nodes on the <systemitem
	 class='ipaddress'>131.169.10.0/24</systemitem> subnet are
	 allowed to read.
       </para>

       <programlisting>#
# define the units
#
psu create unit -protocol   */*
psu create unit -net        0.0.0.0/0.0.0.0
psu create unit -net        131.169.10.0/255.255.255.0
# create the faked net unit
psu create unit -net        192.1.1.1/255.255.255.255
psu create unit -store      *@*
psu create unit -store      ocean:raw@osm
#
#
#  define unit groups
#
psu create ugroup  any-protocol
psu create ugroup  any-store
psu create ugroup  ocean-copy-store
psu create ugroup farm-network
psu create ugroup ocean-copy-network
#
psu addto ugroup any-protocol */*
psu addto ugroup any-store    *@*
psu addto ugroup ocean-copy-store ocean:raw@osm
psu addto ugroup farm-network  131.169.10.0/255.255.255.0
psu addto ugroup ocean-copy-network  192.1.1.1/255.255.255.255
psu addto ugroup allnet-cond 0.0.0.0/0.0.0.0
psu addto ugroup allnet-cond 131.169.10.0/255.255.255.0
psu addto ugroup allnet-cond 192.1.1.1/255.255.255.255
#
#
#  define the write-pools
#
psu create pool ocean
psu create pool mountain
#
#
#  define the write-pools poolgroup
#
psu create pgroup write-pools
psu addto pgroup write-pools ocean
psu addto pgroup write-pools mountain
#
#
#  define the write-pools-link, add write pools and set transfer preferences
#
psu create link write-pools-link any-store any-protocol allnet-cond
psu addto link write-pools-link write-pools
psu set link farm-read-link -readpref=0 -writepref=10 -cachepref=0 -p2ppref=-1
#
#
#  define the read-pools
#
psu create pool read-pool-1
psu create pool read-pool-2
psu create pool read-pool-3
psu create pool read-pool-4
#
#
#  define the farm-read-pools poolgroup and add pool members
#
psu create pgroup farm-read-pools
psu addto pgroup farm-read-pools read-pool-1
psu addto pgroup farm-read-pools read-pool-2
psu addto pgroup farm-read-pools read-pool-3
psu addto pgroup farm-read-pools read-pool-4
#
#
#  define the ocean-copy-pools poolgroup and add a pool
#
psu create pgroup ocean-copy-pools
psu addto pgroup ocean-copy-pools  read-pool-1
#
#
# define the farm-read-link, add farm-read-pools and set transfer preferences
#
psu create link farm-read-link any-store any-protocol farm-network
psu addto link farm-read-link farm-read-pools
psu set link farm-read-link -readpref=10 -writepref=0 -cachepref=10 -p2ppref=-1
#
#
# define the ocean-copy-link, add ocean-copy-pools and set transfer preferences
#
psu create link ocean-copy-link ocean-copy-store any-protocol ocean-copy-network
psu addto link ocean-copy-link ocean-copy-pools
psu set link ocean-copy-link -readpref=10 -writepref=0 -cachepref=10 -p2ppref=-1
#
#</programlisting>

       <para>
	 While <systemitem class='ipaddress'>131.169.10.1</systemitem>
	 is a legal IP address e.g. of one of your farm nodes, the
	 <systemitem class='ipaddress'>192.1.1.1</systemitem> IP
	 address must not exist anywhere at your site.
       </para>

    </informalexample>

    <section>
      <title>File Hopping managed by the &cell-hopmngr;</title>

      <para>
	With the &cell-hopmngr; you have several configuration options
	for <literal>file hopping on arrival</literal>, e.g.:
      </para>
      <itemizedlist>
	<listitem>
	  With the &cell-hopmngr; you can define a rule such that only
	  the files with a specific storage class should be
	  replicated.
	</listitem>
	<listitem>
	  You can specify the protocol the replicated files can be
	  accessed with.
	</listitem>
	<listitem>
	  You can specify from which ip-adresses it should be possible
	  to access the files.
	</listitem>

      </itemizedlist>

      <section>
	<title>Starting the FileHopping Manager service</title>

	<para>
	  Add the &serv-hoppingmanager; service to a domain in your layout
	  file and restart the domain.
	</para>
	<programlisting>[<replaceable>DomainName</replaceable>]
[<replaceable>DomainName</replaceable>/hopping]</programlisting>

	<para>
	  Initially no rules are configured for the
	  &cell-hopmngr;. You may add rules by either edit the file
	  <filename>&path-od-vld;/config/HoppingManager.conf</filename>
	  and restart the &serv-hoppingmanager; service, or use the admin
	  interface and save the modifications by the
	  <command>save</command> command into the
	  <filename>HoppingManager.conf</filename>
	</para>
      </section>

      <section>
	<title>Configuring pools to use the &cell-hopmngr;</title>

	<para>
	  To enable replication on arrival by the &cell-hopmngr; set
	  the property <varname>replicateOnArrival</varname> to
	  <literal>HoppingManager</literal> for the particular pool
	</para>
	<programlisting>[<replaceable>exampleDomain</replaceable>]
[<replaceable>exampleDomain</replaceable>/pool]
...
replicateOnArrival=HoppingManager</programlisting>
	<para>
		or for several pools in the <filename>&path-ode-ed;/dcache.conf</filename> file.
	</para>
	<programlisting>...
replicateOnArrival=HoppingManager</programlisting>

      </section>

      <section>
	<title>&cell-hopmngr; Configuration Introduction</title>

	<itemizedlist>
	  <listitem>
	    <para>
	      The &cell-hopmngr; essentially receives
	      <literal>replicateFile</literal> messages from pools,
	      configured to support file hopping, and either discards
	      or modifies and forwards them to the &cell-poolmngr;,
	      depending on rules described below.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      The &cell-hopmngr; decides on the action to perform,
	      based on a set of configurable rules. Each rule has a
	      name. Rules are checked in alphabetic order concerning
	      their names.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      A rule it triggered if the storage class matches the
	      storage class pattern assigned to that rule. If a rule
	      is triggered, it is processed and no further rule
	      checking is performed. If no rule is found for this
	      request the file is not replicated.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      If for whatever reason, a file cannot be replicated, NO
	      RETRY is being performed.
	    </para>
	  </listitem>

	  <listitem>
	    <para>
	      Processing a triggered rule can be :
	    </para>

	    <itemizedlist>
	      <listitem>
		<para>
		  The message is discarded. No replication is done for
		  this particular storage class.
		</para>
	      </listitem>

	      <listitem>
		<para>
		  The rule modifies the
		  <literal>replicateFile</literal> message, before it
		  is forwarded to the &cell-poolmngr;.
		</para>

		<para>
		  An ip-number of a farm-node of the farm that should
		  be allowed to read the file can be added to the
		  <literal>replicateFile</literal> message.
		</para>

		<para>
		  The mode of the replicated file can be
		  specified. This can either be
		  <literal>precious</literal>,
		  <literal>cached</literal> or
		  <literal>keep</literal>.  <literal>keep</literal>
		  means that the pool mode of the source pool
		  determines the replicated file mode.
		</para>

		<para>
		  The requested protocol can be specified.
		</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</itemizedlist>
    </section>

    <section>
	<title>&cell-hopmngr; Configuration Reference</title>

	<screen>         define hop OPTIONS <replaceable>name</replaceable> <replaceable>pattern</replaceable> precious|cached|keep
            OPTIONS
              -destination=<replaceable>cellDestination</replaceable> # default : PoolManager
              -overwrite
              -continue
              -source=write|restore|*   #  !!!! for experts only      StorageInfoOptions
              -host=<replaceable>destinationHostIp</replaceable>
              -protType=dCap|ftp...
              -protMinor=<replaceable>minorProtocolVersion</replaceable>
              -protMajor=<replaceable>majorProtocolVersion</replaceable> </screen>

     <variablelist>

        <varlistentry>
	  <term>name</term>
	  <listitem>
	    This is the name of the hopping rule. Rules are checked in
	    alphabetic order concerning their names.
	  </listitem>
        </varlistentry>

        <varlistentry>
          <term>pattern</term>
          <listitem>
            <para>
	      <literal>pattern</literal> is a <link
	      linkend='secStorageClass'>storage class</link>
	      pattern. If the incoming storage class matches this
	      pattern, this rule is processed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
	  <term>precious|cached|keep</term>
	  <listitem>
	    <para>
	      <literal>precious|cached|keep</literal> determines the
	      mode of the replicated file. With
	      <literal>keep</literal> the mode of the file will be
	      determined by the mode of the destination pool.
	    </para>
	  </listitem>
        </varlistentry>
        <varlistentry>
	  <term>-destination</term>
	  <listitem>
	    <para>
	      This defines which <literal>cell</literal> to use for
	      the pool to pool transfer. By default this is the
	      &cell-poolmngr; and this should not be changed.
	    </para>
	  </listitem>
        </varlistentry>
        <varlistentry>
	  <term>-overwrite</term>
	  <listitem>
	    <para>
	      In case, a rule with the same name already exists, it is
	      overwritten.
	    </para>
	  </listitem>
        </varlistentry>
        <varlistentry>
	  <term>-continue</term>
	  <listitem>
	    <para>
	      If a rule has been triggered and the corresponding
	      action has been performed, no other rules are
	      checked. If the <literal>continue</literal> option is
	      specified, rule checking continues. This is for
	      debugging purposes only.
	    </para>
	  </listitem>
        </varlistentry>
        <varlistentry>
	  <term>-source</term>
	  <listitem>
	    <para>
	      <literal>-source</literal> defines the event on the pool
	      which has triggered the hopping. Possible values are
	      <literal>restore</literal> and
	      <literal>write</literal>. <literal>restore</literal>
	      means that the rule should be triggered if the file was
	      restored from a tape and <literal>write</literal> means
	      that it should be triggered if the file was written by a
	      client.
	    </para>
	  </listitem>
        </varlistentry>
        <varlistentry>
	  <term>-host</term>
	  <listitem>
	    <para>
	      Choose the id of a node of the farm of worker-nodes that
	      should be allowed to access the file. Configure the
	      &serv-poolmngr; respectively.
	    </para>
	  </listitem>
        </varlistentry>
        <varlistentry>
	  <term>-protType, -protMajor, -protMinor</term>
	  <listitem>
	    <para>
	      Specify the protocol which should be used to access the
	      replicated files.
	    </para>
	  </listitem>
        </varlistentry>
       </variablelist>

      </section>

      <section>
	<title>&cell-hopmngr; configuration examples</title>

	<para>
	  In order to instruct a particular pool to send a
	  <literal>replicateFile</literal> message to the
	  &serv-hoppingmanager; service, you need to add the line
	  <literal>replicateOnArrival=HoppingManager</literal> to the
	  layout file.
	</para>
	<informalexample>
     <programlisting>[exampleDomain]
[exampleDomain/pool]

name=write-pool
path=/path/to/write-pool-exp-a
waitForFiles=${path}/data
replicateOnArrival=HoppingManager
...</programlisting>

      <para>
	Assume that all files of experiment-a will be written to an
	expensive write pool and subsequently flushed to tape. Now
	some of these files need to be accessed without delay.  The
	files that need fast acceess possibility will be given the
	storage class <literal>exp-a:need-fast-access@osm</literal>.
      </para>
      <para>
	In this example we will configure the file hopping such that a
	user who wants to access a file that has the above storage
	info with the &nfs4; protocol will be able to do so.
      </para>
      <para>
	Define a rule for hopping in the
	<filename>&path-od-vld;/config/HoppingManager.conf</filename>
	file.
      </para>
      <programlisting>define hop nfs-hop exp-a:need-fast-access@osm cached -protType=nfs -protMajor=4 -protMinor=1</programlisting>
      <para>
	This assumes that the storage class of the file is
	<literal>exp-a:nfs@osm</literal>. The mode of the file, which
	was <literal>precious</literal> on the write pool will have to
	be changed to <literal>cached</literal> on the read pool.
      </para>

      <para>
	The corresponding
	<filename>&path-od-vld;/config/poolmanager.conf</filename>
	file could read like this:
      </para>
    <programlisting>#
# define the units
#
psu create unit -protocol   */*
psu create unit -net        0.0.0.0/0.0.0.0
psu create unit -store      exp-a:need-fast-access@osm
#
#
#  define unit groups
#
psu create ugroup  any-protocol
psu create ugroup  exp-a-copy-store
psu create ugroup allnet-cond
#
psu addto ugroup any-protocol */*
psu addto ugroup exp-a-copy-store    exp-a:need-fast-access@osm
psu addto ugroup allnet-cond 0.0.0.0/0.0.0.0
#
#
#  define the write-pool
#
psu create pool write-pool
#
#
#  define the read-pool
#
psu create pool read-pool
#
#
#  define the exp-a-read-pools poolgroup and add a pool
#
psu create pgroup exp-a-read-pools
psu addto pgroup exp-a-read-pools read-pool
#
#
#  define the exp-a-write-pools poolgroup and add a pool
#
psu create pgroup exp-a-write-pools
psu addto pgroup exp-a-write-pools write-pool
#
#
# define the exp-a-read-link, add exp-a-read-pools and set transfer preferences
#
psu create link exp-a-read-link exp-a-copy-store any-protocol allnet-cond
psu addto link exp-a-read-link exp-a-read-pools
psu set link exp-a-read-link -readpref=10 -writepref=0 -cachepref=10 -p2ppref=-1
#
#
# define the exp-a-write-link, add exp-a-write-pools and set transfer preferences
#
psu create link exp-a-write-link exp-a-copy-store any-protocol allnet-cond
psu addto link exp-a-write-link exp-a-write-pools
psu set link exp-a-write-link -readpref=0 -writepref=10 -cachepref=0 -p2ppref=-1
#
#
#</programlisting>

   </informalexample>
   </section>
   </section>
  </section>

</chapter>
