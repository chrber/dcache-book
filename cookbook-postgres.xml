<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">     
    
<chapter id="cb-postgres">
  <title>PostgreSQL and <dcache/></title>
  
  <partauthors>Vladimir Podstavkov, Mathias de Riese, Martin Radicke</partauthors>

  <para>
    PostgreSQL is used for various things in a <dcache/> system: The
    <glossterm linkend="gl-srm">SRM</glossterm>, the <glossterm
    linkend="gl-pinmanager">pin manager</glossterm>, the <glossterm
    linkend="gl-spacemanager">space manager</glossterm>, the
    <glossterm linkend="gl-replicamanager">replica manager</glossterm>, the
    <glossterm linkend="gl-pnfscompanion"><pnfs/>
    companion</glossterm>, the <glossterm linkend="gl-billing">billing
    cell</glossterm>, and the <pnfs/> server might make use of one or
    more databases in a single or several separate PostgreSQL servers.
  </para>
  
  <para>
    The SRM, the pin manager, the space manager, the replica manager,
    and the <pnfs/> companion will use the PostgreSQL database as
    configured at cell start-up in the corresponding batch files. The
    billing cell will only write the accounting information into a
    database if it is configured with the option
    <option>-useSQL</option>. The <pnfs/> server will use a PostgreSQL
    server if the <literal>pnfs-posgresql</literal> version is
    used. It will use several databases in the PostgreSQL server, just
    as the gdbm version of the <pnfs/> server uses serveral database
    files. How to convert the gdbm files of an existing <pnfs/> server
    into PostgreSQL databases is described in <xref
    linkend="cb-pnfs-postgres"/>.
  </para>

  <section id="cb-postgres-install">
    <title>Installing a PostgreSQL Server</title>

    <para>
      The preferred way to set up a PostgreSQL server should be the
      installation of the version provided by your OS
      distribution. It is strongly recommended to use version 8 or
      higher.
    </para>

    <para>
      Install the PostgreSQL server, client and JDBC support with the
      tools of the operating system. 
<!--
      For example, use

<screen><rootprompt/><command>apt-get</command> install postgresql postgresql-server postgresql-jdbc</screen>
-->
      You can download a suitable package from <ulink
      url="http://www.postgresql.org/ftp/">http://www.postgresql.org/ftp/</ulink>. A
      version that is suitable for current versions of Scientific
      Linux 3 can be found at <ulink
      url="http://www.postgresql.org/ftp/binary/v8.1.0/linux/rpms/redhat/rhel-es-3.0/">http://www.postgresql.org/ftp/binary/v8.1.0/linux/rpms/redhat/rhel-es-3.0/</ulink>.
    </para>

      <para>
        Initialize the database directory (usually 
        <filename class="directory">/var/lib/pgsql/data/</filename>), 
        start the database server, and make sure that it is started 
        at system start-up. This may be done with

<screen><rootprompt/><command>/etc/init.d/postgresql</command> start
<rootprompt/><command>chkconfig</command> postgresql on</screen>

        If the start-up script does not perform the initialization
        automatically, it might have to be done with

<screen><rootprompt/><command>initdb</command> -D <filename class="directory">/var/lib/pgsql/data/</filename></screen>

        and the server is started manually with

<screen><rootprompt/><command>postmaster</command> -i -D <filename class="directory">/var/lib/pgsql/data/</filename> >logfile 2>&amp;1 &amp;</screen>
    </para>

    <para>
      The server has to be configured to admit TCP/IP connections from
      <literal>localhost</literal>. This is the default for version 8
      of PostgreSQL. 

<!--  For earlier versions make sure,
      <filename>/var/lib/pgsql/data/postgresql.conf</filename>
      contains

<programlisting>...
tcpip_socket = true
...</programlisting>

      (this option is not recognised by version 8). -->

    </para>

    <para>
      For <dcache/> version 1.6.6 release 1, please make sure the file
      <filename>/var/lib/pgsql/data/postgresql.conf</filename>
      contains

<programlisting>...
add_missing_from = on
...</programlisting>

      This will not be necessary in future releases.
    </para>

    <para>
      The file <filename>/var/lib/pgsql/data/pg_hba.conf</filename>
      should contain

<programlisting>...
local   all         all                        trust
host    all         all         127.0.0.1/32   trust
host    all         all         ::1/128        trust</programlisting>

      <!-- for PostgreSQL version 8. -->

<!-- and

<programlisting>...
local   all         all                                                           trust
host    all         all         127.0.0.1 255.255.255.255                         trust
host    all         all         ::1/128   ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff trust</programlisting>

      for earlier versions. -->

    </para>

    <para>
      Restart the server, e.g. with
      
<screen><rootprompt/><command>/etc/init.d/postgresql</command> restart</screen>

      The configuration of the access rights in
      <filename>/var/lib/pgsql/data/pg_hba.conf</filename> is rather
      liberal: Any user on the local machine may connect to the
      PostgreSQL server as any database user without specifying a
      password. This way, you can be sure that problems will not be
      due to wrong access rights or passwords. See <xref
      linkend="cb-postgres-configure"/> of the <dcache/> book for more
      advice on configuring PostgreSQL.
    </para>

    <para>
      If a current version of PostgreSQL is not available for the
      distribution, it can be compiled as follows:
      You can download the source code from the official web site: <ulink
        url="http://www.postgresql.org/download">http://www.postgresql.org/download</ulink> and
      build it following the instruction: <ulink
        url="http://www.postgresql.org/docs/8.0/static/installation.html">http://www.postgresql.org/docs/8.0/static/installation.html</ulink>
      Here is a short version from that page:
      
<screen>./configure --prefix=/usr/local/pgsql
gmake
su
gmake install
adduser postgres
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/postmaster -D /usr/local/pgsql/data > logfile 2&gt;&amp;1 &amp;
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</screen>

      If there is another Postgres installed on your machine, make sure root's path is 
      set so that executables, esp. psql, postmaster, and pg_ctl, are called from the
      V8.x.x Postgres that you intend to use for dCache. (You will be doing most of this
      as root). Another thing is to make sure that the various libpg.so libraries are 
      not invoked from the other Postgres distribution. "locate libpg.so" will show which
      ones are on your system. Set LD_LIBRARY_PATH for root to insure that the "pnfs" 
      Postgress libs are seen first! 
    </para>

  </section>

  <section id="cb-postgres-configure">
    <title>Configuring Access to PostgreSQL</title>

    <para>
      In the installation guide instructions are given for configuring one
      PostgreSQL server on the admin node for all the above described purposes 
      with generous access rights. This is done to make the installation as easy as
      possible. The access rights are configured in the file
      <filename><replaceable>database_directory_name</replaceable>/data/pg_hba.conf</filename>.
      According to the installation guide the end of the file should look like
      
<programlisting>...
# TYPE  DATABASE    USER        IP-ADDRESS        IP-MASK           METHOD
local   all         all                                             trust
host    all         all         127.0.0.1/32                        trust
host    all         all         ::1/128                             trust
host    all         all         <replaceable>HostIP</replaceable>/32          trust</programlisting>
<!-- host    all         all   <replaceable>srmHostIP</replaceable>      255.255.255.255   trust -->

      This gives access to all databases in the PostgreSQL server to all users
      on the admin host.
    </para>
    
    <para>
      The databases can be secured by restricting access with this file. E.g.

<programlisting>...
# TYPE  DATABASE    USER        IP-ADDRESS        METHOD
local   all         postgres                      ident sameuser
local   all         pnfsserver                    password
local   all         all                           md5
host    all         all         127.0.0.1/32      md5
host    all         all         ::1/128           md5
host    all         all         <replaceable>HostIP</replaceable>/32          md5</programlisting>

      The server is made aware of this with

<screen><rootprompt/><command>pg_ctl</command> reload</screen>

      It can still be configured with the user <literal>postgres</literal>:

<screen><rootprompt/><command>su</command> - postgres</screen>
      
      And the password for e.g. the user <literal>pnfsserver</literal> can be
      set with

<screen><userprompt/><command>psql</command> template1 -c "ALTER USER pnfsserver WITH PASSWORD '<replaceable>yourPassword</replaceable>'"</screen>

      The <pnfs/> server is made aware of this password by changing the variable
      <varname>dbConnectString</varname> in the file
      <filename>/usr/etc/pnfsSetup</filename>:

<programlisting>...
export dbConnectString="user=pnfsserver password=<replaceable>yourPassword</replaceable>"</programlisting>

      User access should be prohibited to this file with

<screen><rootprompt/><command>chmod</command> go-rwx /usr/etc/pnfsSetup</screen>

    </para>
  </section>

  <section>
    <title>Performance of the PostgreSQL Server</title>

    <para>
      On small systems it should never be a problem to use one single
      PostgreSQL server for all the functions listed above. In the
      standard installation, the replica manager, the <pnfs/>
      companion are not activated by default. The billing cell will
      only write to a file by default. Also, prior to version 1.6.6 of
      <dcache/> only the pnfs server which does not use PostgreSQL was
      shipped. In this case, PostgreSQL will only be used if the
      conversion described in <xref linkend="cb-pnfs-postgres"/> was done.
    </para>

    <para>
      Whenever the PostgreSQL server is going to be used for another
      functionality, the impact on performance should be checked
      carefully. To improve the performance, the functionality should
      be installed on a separate host. Generally, a PostgreSQL server
      for a specific funcionality should be on the same host as the
      <dcache/> cell accessing that PostgreSQL server, and the
      PostgreSQL server containing the databases for the <pnfs/>
      server should run on the same host as the <pnfs/> server and the
      <cellname>PnfsManager</cellname> cell of the <dcache/> system
      accessing it. Accordingly, the <pnfs/> companion and the <pnfs/>
      server itself will use the same PostgreSQL server.
    </para>

    <para>
      It is especially useful to use a separate PostgreSQL server for
      the billing cell.
    </para>
    
  </section>

  <unfinished>

    <screen>

2. Create postgres user with the name you will be using to run pnfs server.
   Make sure it has "CREATEDB" privilege.

      psql -U postgres template1 -c "CREATE USER johndoe with CREATEDB"

      dropuser pnfsserver

      createuser --no-adduser --createdb --pwprompt pnfsserver


PostgreSQL in <dcache/>:

component  |    Database Host               | Database Name | Database User / Pw
--------------------------------------------------------------------------------
SRM        | ${srmDatabaseHost}             | dcache        | srmdcache
           |   or if not set: ${srmDbHost}  |               | srmdcache
           |     or if not set: localhost   |               |
--------------------------------------------------------------------------------
pin manag. | ${pinManagerDatabaseHost}      | dcache        | srmdcache
           |   or if not set: ${srmDbHost}  |               | srmdcache
           |     or if not set: localhost   |               |
--------------------------------------------------------------------------------
space man. | ${spaceManagerDatabaseHost}    | dcache        | srmdcache
           |   or if not set: ${srmDbHost}  |               | srmdcache
           |     or if not set: localhost   |               |
--------------------------------------------------------------------------------
companion  | ${companionDatabaseHost}       | companion     | srmdcache
           |   or if not set: localhost     |               | srmdcache
--------------------------------------------------------------------------------
replica m. | ${replicaManagerDatabaseHost}  | replicas      | srmdcache
           |   or if not set: localhost     |               | srmdcache
--------------------------------------------------------------------------------
pnfs server| localhost                      | admin, data1, | pnfsserver
           |                                | exp0, ...     | --free--
--------------------------------------------------------------------------------
billing    | ${billingDatabaseHost}         | billing       | srmdcache
           |   or if not set: localhost     |               | srmdcache




    </screen>

  </unfinished>
  
  
  
</chapter>
