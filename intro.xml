<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
]>

<chapter id="intro">

  <title>Introduction</title>

  <para>
    &dcache; is a distributed storage solution.  It organises storage
    across computers so the combined storage can be used without the
    end-users being aware of where their data is stored. They simply
    see a large amount of storage.
  </para>

  <para>
    Because end-users do not need to know on which computer their data
    is stored, it can be migrated from one computer to another without
    any interruption of service. As a consequence, (new) servers may
    be added to or taken away from the &dcache; storage cluster at any
    time.
   </para>

  <para>
    &dcache; supports requesting data from a tertiary storage
    system. Such systems typically store data on magnetic tapes
    instead of disks, which must be loaded and unloaded using a tape
    robot. The main reason for using tertiary storage is the better
    cost-efficiency, archiving a very large amount of data on rather
    inexpensive hardware. In turn the access latency for archived data
    is significantly higher.
  </para>

  <para>
    &dcache; also supports many transfer protocols (allowing users to
    read and write to data). These have a modular deployment, allowing
    &dcache; to support expanded capacity by providing additional
    front-end machines.
  </para>

  <para>
    Another performance feature of &dcache; is hot-spot data
    migration. In this process, &dcache; will detect when files are
    requested very often. If this happens, &dcache; can generate
    duplicates of the popular files on other computers.  This allows
    the load to be spread across multiple machines, so increasing
    throughput.
  </para>

  <para>
    The flow of data within &dcache; can also be carefully controlled.
    This is especially important for large sites as chaotic movement
    of data may lead to suboptimal usage. Instead, incoming and
    outgoing data can be marshaled so they use designated resources
    guaranteeing better throughput and improving end-user experience.
  </para>

  <para>
    &dcache; provides a comprehensive administrative interface for
    configuring the &dcache; instance.  This is described in the later
    sections of this book.
  </para>


  <section id="intro-cells-domains">
    <title>Cells and Domains</title>

    <para>
      &dcache;, as distributed storage software, can provide a
      coherent service using multiple computers or
      <firstterm>nodes</firstterm> (the two terms are used
      interchangeable).  Although &dcache; can provide a complete
      storage solution on a single computer, one of its strengths is
      the ability to scale by spreading the work over multiple nodes.
    </para>

    <para>
      A <firstterm>cell</firstterm> is &dcache;'s most fundamental
      executable building block.  Even a small &dcache; deployment
      will have many cells running.  Each cell has a specific task to
      perform and most will interact with other cells to achieve it.
    </para>

    <para>
      Cells can be grouped into common types; for example, pools,
      doors.  Cells of the same type behave in a similar fashion and
      have higher-level behaviour (such as storing files, making files
      available).  Later chapters will describe these different cell
      types and how they interact in more detail.
    </para>

    <para>
      There are only a few cells where (at most) only a single
      instance is required. The majority of cells within a &dcache;
      instance can have multiple instances and &dcache; is designed to
      allow load-balancing over these cells.
    </para>

    <para>
      A <firstterm>domain</firstterm> is a container for running
      cells. Each domain runs in its own Java Virtual Machine (JVM)
      instance, which it cannot share with any other domain. In
      essence, a domain <emphasis>is</emphasis> a JVM with the
      additional functionality necessary to run cells (such as system
      administration and inter-cell communication). This also implies,
      that a node's resources, such as memory, available CPU and network
      bandwidth, are shared among several domains running on the same
      node.
    </para>

    <para>
      &dcache; comes with a set of domain definitions, each specifying
      a useful set of cells to run within that domain to achieve a
      certain goal. These goals include storing data, providing a
      front-end to the storage, recording file names, and so on. The
      list of cells to run within these domains are recommended
      deployments: the vast majority of &dcache; deployments do not
      need to alter these lists.
    </para>

    <para>
      A node is free to run multiple domains, provided there's no
      conflicting requirement from the domains for exclusive access to
      hardware. A node may run a single domain; but, typically a node
      will run multiple domains. The choice of which domains to run
      on which nodes will depend on expected load of the &dcache;
      instance and on the available hardware. If this sounds
      daunting, don't worry: starting and stopping a domain is easy
      and migrating a domain from one node to another is often as easy
      as stopping the domain on one node and starting it on another.
    </para>


    <para>
      &dcache; is scalable storage software. This means that (in most
      cases) the performance of &dcache; can be improved by
      introducing new hardware. Depending on the performance issue,
      the new hardware may be used by hosting a domain migrated from a
      overloaded node, or by running an additional instance of a
      domain to allow load-balancing.
    </para>

    <para>
      Most cells communicate in such a way that they don't rely on in
      which domain they are running. This allows a site to move cells
      from one domain to another or to create new domain definitions
      with some subset of available cells.  Although this is possible,
      it is rare that redefining domains or defining new domains is
      necessary. Starting or stopping domains is usually sufficient
      for managing load.
    </para>

  </section>


<!--
  <section>
    <title>Pools of storage</title>

    <para>
      We introduce pools and poolgroups.
    </para>
  </section>

  <section>
    <title>Doors and movers</title>

    <para>
      Introduce doors...
    </para>
  </section>


  <section>
    <title>Linking &dcache; to the outside world</title>

    <para>
      Introduce unit, unitgroups and links.
    </para>
  </section>


  <section>
    <title>Storing data on tape</title>

    <para>
      Introduce HSM activity
    </para>

  </section>

  <section>
    <title>Linkgroups and SRM</title>

    <para>
      Introducing SRM concepts and linkgroups.
    </para>
  </section>

-->
  
  <figure id="fig-intro-layer-model">
    <title>The &dcache; Layer Model</title>
    <mediaobject>
      <imageobject role="fo">
	<imagedata fileref="images/test2.svg" format="SVG" align="center" contentwidth="16cm"/> 
                            <!-- width="100%" scalefit="1" contentdepth="100%" should scale optimal, but fop doesnt like it -->
      </imageobject>
      <imageobject role="html">
	<imagedata fileref="images/test.png" format="PNG" align="center"/>
      </imageobject>
    </mediaobject>
  </figure>

  <para>
    The layer model shown in <xref linkend="fig-intro-layer-model"/>
    gives an overview of the architecture of the &dcache; system.
  </para>

  <!-- TODO:
      companion

      finish replica manager

      Emails durchgehen: Patrick, Timur, Alex, Vladimir,...

      Where to put comments/help/release notes for actual USERS (srmcp and dccp, ...)
    -->
  
    <!-- TODO:
      Short description, features, overview of structure
    
      Filesystem - PNFS (Database), Data on Pools/Tape, Protocols, SRM (Database)
    
      Distributed server system, domains, cells, messages
    
      (Important) cells in a dCache system.

      Book assumes installations as described by the distribution. 
      -->
<!-- TODO 
      Todo somewhere:
    
      HSM - see dominik bernhard DONE

      Copy Manager - from Patrick

      unbalanced movers (CM?) - should be covered by CM doc. Or additional short cookbook entry with reference to CM doc?

      If a domain does not appear - should be covered by intouch

      ssh authorized_keys for scripting (tr -d '\r')
-->

</chapter>
