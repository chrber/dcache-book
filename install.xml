<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
]>

<chapter id="in">

  <title>Installing &dcache;</title>

  <chapterinfo>
    <author>
      <firstname>Michael</firstname>
      <surname>Ernst</surname>
      <affiliation>
        <shortaffil>FNAL</shortaffil>
      </affiliation>
    </author>

    <author>
      <firstname>Patrick</firstname>
      <surname>Fuhrmann</surname>
      <affiliation>
        <shortaffil>DESY</shortaffil>
      </affiliation>
    </author>

    <author>
      <firstname>Mathias</firstname>
      <surname>de Riese</surname>
      <affiliation>
        <shortaffil>DESY</shortaffil>
      </affiliation>
    </author>
  </chapterinfo>

  <para>
    The first section describes the installation of a fresh &dcache;
    instance using RPM files downloaded from <ulink
    url="http://www.dcache.org">the &dcache; homepage</ulink>.  It is
    followed by a guide to upgrading an existing installation. In both
    cases we assume standard requirements of a small to medium sized
    &dcache; instance without an attached <glossterm
    linkend="gl-tss">tertiary storage system</glossterm>. The third
    section contains some pointers on extended features.
  </para>

  <section id="in-install">
    <title>Installing a Single Node &dcache; Instance</title>

    <para>
      In the following the installation of a single node &dcache;
      instance will be described.  The &chimera; name space provider,
      some management components, and the &srm; need a &psql; server
      installed. We recommend running this &psql; on the local
      node. The first section describes the configuration of a &psql;
      server. After that the installation of &chimera; and of the
      &dcache; components will follow. During the whole installation
      process root access is required.
    </para>

    <section>
      <title>Prerequisites</title>

      <para>
        In order to install &dcache; the following requirements must be met:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            An RPM-based Linux distribution is required for the
            following procedure. For Debian derived systems the RPM
            may be converted to a DEB using alien. Solaris is
            supported using either the Solaris package or the tarball.
          </para>
        </listitem>

        <listitem>
          <para>
           &dcache; 1.9 requires Java 1.5 or 1.6 SDK. We recommend
           Java 1.6. It is recommended to use the newest Java release
           available within the release series used.
          </para>
        </listitem>

        <listitem>
          <para>
            &psql; must be installed and running. See <xref
            linkend="cb-postgres-install"/> for more details. It is
            strongly recommended to use version 8 or higher.
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Installation of the &dcache; Software</title>

      <para>
        The RPM packages may be installed right away, for example
        using the command:
      </para>

      <screen>&prompt-root; <command>rpm</command> -ivh dcache-server-<replaceable>version</replaceable>-<replaceable>release</replaceable>.i386.rpm
&prompt-root; <command>rpm</command> -ivh dcache-client-<replaceable>version</replaceable>-<replaceable>release</replaceable>.i386.rpm</screen>
    </section>


    <section>
      <title>Readying the &psql; server</title>

      <para>
        You must configure &psql; for use by &dcache; and create the
        necessary &psql; user accounts and database structure.  This
        section describes how to do this.
      </para>

      <section>
        <title>Configuring the &psql; server</title>

        <para>
          Using a &psql; server with &dcache; places a number of
          requirements on the database.  This section describes what
          configuration is necessary to ensure &psql; operates so
          &dcache; can use it.
        </para>

        <important>
          <title>Restarting &psql;</title>

          <para>
            If you have edited &psql; configuration files, you
            <emphasis>must</emphasis> restart &psql; for those changes
            to take effect.  On many systems, this can be done with
            the following command:
          </para>

          <screen>&prompt-root; <command>/etc/init.d/postgresql</command> restart</screen>
        </important>


        <section>
          <title>Enabling &tcp; connections</title>

          <para>
            When connecting to &psql;, &dcache; will always use &tcp;
            connections.  So, for &dcache; to use &psql;, support for
            &tcp; sockets must be enabled. We realize UNIX domain
            sockets are easier to work with from a security point of
            view, however there is no way to use UNIX domain sockets
            from a Java application.
          </para>

          <para>
            In contrast to &dcache;, the &psql; stand-alone client
            application <command>psql</command> can connect using
            either a &tcp; socket or via a UNIX domain socket.
            Because of this, it is common for &psql; to disable &tcp;
            sockets by default, requiring the admin to explicitly
            configure &psql; so connecting via a &tcp; socket is
            supported.
          </para>

          <para>
            To enable &tcp; sockets, edit the &psql; configuration
            file <filename>postgresql.conf</filename>.  This is often
            found in the <filename
            class="directory">/var/lib/pgsql/data</filename>, but may
            be located elsewhere.  You should ensure that the line
            <literal>tcpip_socket</literal> is set to
            <literal>true</literal>; for example:
          </para>

          <programlisting>tcpip_socket = true</programlisting>
        </section>


        <section>
          <title>Enabling local trust</title>

          <para>
            Perhaps the simplest configuration is to allow
            password-less access to the database and the following
            documentation assumes this is so.
          </para>

          <para>
            To allow local users to access &psql; without requiring a
            password, ensure the file
            <filename>pg_hba.conf</filename>, usually located in
            <filename class="directory">/var/lib/pgsql/data</filename>,
            contains the following lines.
          </para>

          <programlisting>local   all         all                        trust
host    all         all         127.0.0.1/32   trust
host    all         all         ::1/128        trust</programlisting>

          <note>
            <para>
              Please note it is also possible to run &dcache; with all
              &psql; accounts requiring passwords.
            </para>
          </note>
        </section>

      </section>


      <section>
        <title>Configuring &chimera;</title>

        <para>
          &chimera; is a library providing a hierarhical name space
          with associated meta data. Where pools in &dcache; store the
          content of files, &chimera; stores the names and meta data
          of those files. &chimera; itself stores the data in a
          relational database. We will use &psql; in this tutorial.
        </para>

        <note>
          <para> &dcache; used to use another name space
          implementation called &pnfs;. &pnfs; is still available, we
          do however recommend that new installations use &chimera;.
          </para>
        </note>

        <section>
          <title>Initialize the database</title>

          <para>
            Create the Chimera user and database and add the
            Chimera-specific tables and stored procedures:
          </para>

          <screen>&prompt-root; <command>createuser</command> -U postgres --no-superuser --no-createrole --createdb --pwprompt chimera
&prompt-root; <command>psql</command> -U chimera chimera -f /opt/d-cache/libexec/chimera/sql/create.sql
&prompt-root; <command>createlang</command> -U chimera plpgsql chimera
&prompt-root; <command>psql</command> chimera -f /opt/d-cache/libexec/chimera/sql/pgsql-procedures.sql</screen>

          <para>
            Database connection settings can be customized in
            <filename>/opt/d-cache/config/chimera-config.xml</filename>
            Specifically you should change the user to
            <quote>chimera</quote>.
          </para>

<screen>&lt;?xml version="1.0"?&gt;
&lt;config&gt;
        &lt;db fsid="0" url="jdbc:postgresql://localhost/chimera?prepareThreshold=3" drv="org.postgresql.Driver" user="chimera" pass="" dialect="PgSQL" /&gt;
        &lt;nfs&gt;
                &lt;port&gt;2049&lt;/port&gt;
                &lt;logLevel&gt;0&lt;/logLevel&gt;
                &lt;logFile&gt;/tmp/himera.log&lt;/logFile&gt;
        &lt;/nfs&gt;
&lt;/config&gt;</screen>
        </section>

        <section>
          <title>Mounting Chimera through NFS</title>

          <para>
            Although most components in &dcache; access the &chimera;
            database directly, some rely on a mounted file system for
            access. The mounted file system is also nice for
            administrative access. This offers the opportunity to use
            OS-level tools like ls and mkdir for Chimera. However,
            direct I/O-operations like cp are not possible, since the
            NFSV3 interface provides the namespace part only. This
            section describes how to start the &chimera; NFS3 server
            and mount the name space.
          </para>

          <para>
            On some linux distributions you have to switch the portmap
            daemon off:
          </para>
          <screen>&prompt-root; <command>/etc/init.d/portmap</command> stop</screen>

          <para>Chimera NFS server uses
          <filename>/etc/exports</filename> file to manage
          exports. The typical export file looks like:</para>

<screen>/ localhost(rw)
/pnfs
# or
# /pnfs *.my.domain(rw)</screen>

          <para>
            Start it via script:
          </para>

<screen>&prompt-root; <command>/opt/d-cache/libexec/chimera/chimera-nfs-run.sh</command> start</screen>

          <para>
            To automate the launching of that script at startup time,
            link to it from <filename>/etc/init.d/</filename>. Then
            announce it to chkconfig:
          </para>

<screen>&prompt-root; <command>chkconfig</command> --add chimera-nfs-run.sh
&prompt-root; <command>chkconfig</command> chimera-nfs-run.sh on</screen>

          <para>
            To configure the server, we need to mount the
            administrative view of &chimera; (localhost:/) locally
            (remote mounts are not allowed yet). This will allow us to
            create the main &chimera; path.
          </para>

<screen>&prompt-root; <command>mount</command> localhost:/ /mnt</screen>

          <para>
            First we create the root of the Chimera namespace, called
            'pnfs' for legacy reasons.
          </para>

<screen>&prompt-root; <command>mkdir</command> -p /mnt/pnfs/<replaceable>your domain</replaceable>   # mkdir -p /mnt/pnfs/desy.de</screen>

          <para>
            Now we need to add directory tags (=metadata, which will
            be evaluated by dCache and inherited by future
            subdirectories):
          </para>

<screen>&prompt-root; <command>mkdir</command> -p /mnt/pnfs/<replaceable>your domain</replaceable>/data
&prompt-root; <command>echo</command> "chimera" > /mnt/pnfs/<replaceable>your domain</replaceable>/data/'.(tag)(sGroup)'
&prompt-root; <command>echo</command> "StoreName sql" > /mnt/pnfs/<replaceable>your domain</replaceable>/data/'.(tag)(OSMTemplate)'</screen>

          <para>If you plan to use &dcap; with mounted file system
          instead of the URL-syntax (e.g. <command>dccp</command>
          <filename>/pnfs/desy.de/data/file1</filename>
          <filename>/tmp/file1</filename>), execute:</para>

<screen>&prompt-root; <command>mkdir</command> /mnt/admin/etc/config/dCache
&prompt-root; <command>touch</command> /mnt/admin/etc/config/dCache/dcache.conf
&prompt-root; <command>touch</command> /mnt/admin/etc/config/dCache/'.(fset)(dcache.conf)(io)(on)'
&prompt-root; <command>echo</command> "<replaceable>door host</replaceable>:<replaceable>port</replaceable>" > /mnt/admin/etc/config/dCache/dcache.conf</screen>

          <para>
            The configuration is done now, so unmount Chimera:
          </para>

<screen>&prompt-root; <command>umount</command> /mnt</screen>

          <para>
            Please note that whenever you need to change the
            configuration, you have to remount the admin-view
            (localhost:/) to a temporary location like /mnt.
          </para>

          <para>The 'user's view' of Chimera is automatically mounted
          by the &dcache; init script. It can be mounted manually
          with:</para>

<screen>&prompt-root; <command>mkdir</command> /pnfs
&prompt-root; <command>mount</command> localhost:/pnfs /pnfs</screen>
        </section>
      </section>

      <section>
        <title>Creating users and databases for &dcache;</title>

        <para>
          The &dcache; components will access the database server with
          the user <database class="user">srmdcache</database> which can
          be created with the <command>createuser</command>; for
          example:
        </para>

        <screen>&prompt-root; <command>createuser</command> -U postgres --no-superuser --no-createrole --createdb --pwprompt srmdcache</screen>

        <para>
          Several management components running on the head node as well
          as the &srm; will use the database
          <database>dcache</database> for state information:
        </para>

        <screen>&prompt-root; <command>createdb</command> -U srmdcache dcache</screen>

        <para>
          There might be several of these on several hosts. Each is
          used by the &dcache; components running on the respective
          host.
        </para>

        <screen>&prompt-root; <command>createdb</command> -U srmdcache companion
&prompt-root; <command>psql</command> -U srmdcache companion -f /opt/d-cache/etc/psql_install_companion.sql</screen>

        <para>
          If the resilience feature provided by the <glossterm
          linkend="gl-replicamanager">replica manager</glossterm> is
          used, the database <quote>replicas</quote> has to be prepared
          on the head node with the command:
        </para>

        <screen>&prompt-root; <command>createdb</command> -U srmdcache replicas
&prompt-root; <command>psql</command> -U srmdcache replicas -f /opt/d-cache/etc/psql_install_replicas.sql</screen>

        <note>
          <para>
            Note that the disk space will at least be cut in half if the
            replica manager is used.
          </para>
        </note>

        <para>
          If the billing information should also be stored in a
          database (in addition to files) the database
          <database>billing</database> has to be created:
        </para>

        <screen>&prompt-root; <command>createdb</command> -U srmdcache billing</screen>

        <para>
          However, we strongly advise against using the same database
          server for &chimera; and the billing information.  For how
          to configure the billing cell to write into this database,
          see below.
        </para>
      </section>
    </section>

    <section>
      <title>Installing &dcache; Components</title>

      <para>
        Use the templates of the configuration files found in
        <filename class="directory">/opt/d-cache/etc/</filename> to
        create the following files.
      </para>

      <para>
        The main configuration file of a &dcache; instance is
        <filename>/opt/d-cache/config/dCacheSetup</filename>. Set the
        variable <varname>java</varname> to the binary of the Java VM
        and the variable <varname>serviceLocatorHost</varname> to the
        hostname of the single node running &dcache;. Note that the
        file has to go into the subdirectory <filename
        class="directory">config/</filename> even though the template
        is found in <filename class="directory">etc/</filename>.
      </para>

      <para>
        The installation and start-up scripts use the information in
        <filename>/opt/d-cache/etc/node_config</filename>. For a setup
        with a single node, set <varname>NODE_TYPE</varname> to
        <quote>admin</quote>. To enable doors on this node, add the
        respective doors to <varname>SERVICES</varname>, for instance
        <quote>dcap</quote> or <quote>gridftp</quote>. Set
        <varname>NAMESPACE</varname> to <quote>chimera</quote>.
      </para>

      <para>
        For authorization of grid users the file
        <filename>/opt/d-cache/etc/dcache.kpwd</filename> is
        needed. Note that it may be generated from the standard
        <filename>/etc/grid-security/grid-mapfile</filename> with the
        tool <filename>grid-mapfile2dcache-kpwd</filename> which is
        distributed with the WLCG software.
      </para>

      <para>
        We proceed by finalising the initial configuration by
        executing
        <command>/opt/d-cache/install/install.sh</command>, for
        example:
      </para>

      <screen>&prompt-root; <command>/opt/d-cache/install/install.sh</command>
INFO:Skipping ssh key generation

 Checking MasterSetup  ./config/dCacheSetup O.k.

   Sanning dCache batch files

    Processing adminDoor
    Processing chimera
    Processing dCache
    Processing dir
    Processing door
    Processing gPlazma
    Processing gridftpdoor
    Processing gsidcapdoor
    Processing httpd
    Processing info
    Processing infoProvider
    Processing lm
    Processing maintenance
    Processing chimera
    Processing pool
    Processing replica
    Processing srm
    Processing statistics
    Processing utility
    Processing xrootdDoor


 Checking Users database .... Ok
 Checking Security       .... Ok
 Checking JVM ........ Ok
 Checking Cells ...... Ok
 dCacheVersion ....... Version production-1-9-3-1
        </screen>

        <para>
          No pools have been created on the node yet. Adding pools to
          a node is a two step process:
        </para>

        <orderedlist>
          <listitem>
            <para>
              The directory layout of the pool is created and filled
              with a skeleton configuration using <command>dcache pool
              create <replaceable>poolSize</replaceable>
              <replaceable>poolDirectory</replaceable></command>,
              where <replaceable>poolDirectory</replaceable> is the
              full path to the directory which will contain the data
              files as well as some of the configuration of the pool,
              and <replaceable>poolSize</replaceable> is the size of
              the pool, specified in bytes or with a M, G, or T suffix
              (for mibibytes, gibibytes and tibibytes, respectively).
            </para>

            <para>
              Make sure that there is always enough space under
              <replaceable>poolDirectory</replaceable>. Be aware that
              only pure data content is counted by &dcache;. Leave enough
              room for configuration files and filesystem overhead.
            </para>

            <para>
              Creating a pool does not modify the &dcache;
              configuration.
            </para>
          </listitem>
          <listitem>
            <para>
              The pool is given a unique name and added to the
              &dcache; configuration using <command>dcache pool add
              <replaceable>poolName</replaceable>
              <replaceable>poolDirectory</replaceable></command>,
              where <replaceable>poolDirectory</replaceable> is the
              directory in which the pool was created and
              <replaceable>poolName</replaceable> is a name for the
              pool. The name must be unique throughout the whole
              &dcache; installation, not just on the node.
            </para>
            <para>
              Adding a pool to a configuration does not modify the
              pool or the data in it and can thus safely be undone or
              repeated.
            </para>
          </listitem>
        </orderedlist>

        <para>
          An example may help to clarify the use of these commands:
        </para>

        <screen>&prompt-root; <command>/opt/d-cache/bin/dcache</command> pool create 500G <filename class="directory">/q/pool1</filename>
Created a 500 GiB pool in /q/pool1. The pool cannot be used until it has
been added to a domain. Use 'pool add' to do so.

Please note that this script does not set the owner of the pool directory.
You may need to adjust it.
&prompt-root; <command>/opt/d-cache/bin/dcache</command> pool add myFirstPool <filename class="directory">/q/pool1/</filename>

Added pool myFirstPool in /q/pool1 to dcache-vmDomain.

The pool will not be operational until the domain has been started. Use
'start dcache-vmDomain' to start the pool domain.
&prompt-user; <command>/opt/d-cache/bin/dcache</command> pool ls
Pool        Domain                       Size   Free Path
myFirstPool dcache-vmDomain               500    550 /q/pool1
Disk space is measured in GiB.
        </screen>

        <para>
          All configured components can now be starting with
          <command>dcache start</command>, for example:
        </para>

        <screen>&prompt-root; <command>/opt/d-cache/bin/dcache</command> start
Starting lmDomain  Done (pid=7514)
Starting dCacheDomain  Done (pid=7574)
Starting pnfsDomain  Done (pid=7647)
Starting dirDomain  Done (pid=7709)
Starting adminDomain  Done (pid=7791)
Starting httpdDomain  Done (pid=7849)
Starting utilityDomain  Done (pid=7925)
Starting gPlazma-dcache-vmDomain  Done (pid=8002)
Starting infoProviderDomain  Done (pid=8081)
Starting dcap-dcache-vmDomain  Done (pid=8154)
Starting gridftp-dcache-vmDomain  Done (pid=8221)
Starting gsidcap-dcache-vmDomain  Done (pid=8296)
Starting dcache-vmDomain  Done (pid=8369)
        </screen>

      </section>
  </section>

  <section id="in-multinode">
    <title>Installing a Multi Node dCache Instance</title>

    <para>
      The previous section decsribed how to install a single node
      &dcache; installation. A typically medium-sized &dcache;
      installation will however have a single head node hosting the
      name space provider and other central components, and a number
      of pool nodes. It is common to also use pool nodes as FTP and
      DCAP doors.
    </para>

    <para>
      The &chimera; file system must be mounted on all nodes running
      either the &srm; or &gridftp;. Client nodes relying on &dcap;
      access without using URLs also need to mount &chimera;. Pools do
      not need a mount anymore. Having a mount on the
      Chimera/NFS3-server node itself is always a good idea as it
      eases maintenance.
    </para>

    <para>
      To mount the &chimera; file system, either modify
      <filename>config/chimera-config.xml</filename> such that it
      points towards the correct &psql; host and start a local Chimera
      NFSv3 server locally, or mount the NFS file system exported from
      the head node. In the latter case, set
      <varname>NAMESPACE_NODE</varname> in
      <filename>etc/node_config</filename> to the host running the
      Chimera NFSv3 server.
    </para>

    <para>
      For the head node, follow the description of the previous
      chapter, but do not create any pools. For pools and for &dcap;
      or &gridftp; doors, &psql; is not needed and installation of
      &psql; can be skipped on nodes that only hosts these
      services. Proceed by creating
      <filename>config/dCacheSetup</filename>;
      <varname>serviceLocatorHost</varname> has to be set to the name
      of the head node. In <filename>etc/node_config</filename> leave
      <varname>NODE_TYPE</varname> empty. Add any doors you want to
      start on this node to <varname>SERVICES</varname> and set
      <varname>NAMESPAE</varname> to <quote>chimera</quote>. Run
      <filename>install/install.sh</filename> to finish the
      installation. Finally, use <command>dcache pool create</command>
      and <command>dcache pool add</command> to create and add pools
      on this node.
    </para>

  </section>

  <section id="in-upgrade">
    <title>Upgrading a &dcache; Instance</title>

    <para>
      Upgrading to bugfix releases within one version (e.g. from
      1.9.3-1 to 1.9.3-2) may be done by shutting down the server and
      upgrading the packages with

<screen>&prompt-root; <command>rpm</command> -Uvh <replaceable>packageName</replaceable></screen>

      Follow this by rerunning <command>install/install.sh</command>.
      For details on the changes, please refer to the change log on
      the download page.
    </para>
  </section>

</chapter>
