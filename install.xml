<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
<!ENTITY user-dcache "<systemitem class='username'>dcache</systemitem>">
<!ENTITY user-root "<systemitem class='username'>root</systemitem>">
%sharedents;
]>

<chapter id="in">

  <title>Installing &dcache;</title>

  <chapterinfo>
    <author>
      <firstname>Michael</firstname>
      <surname>Ernst</surname>
      <affiliation>
        <shortaffil>FNAL</shortaffil>
      </affiliation>
    </author>

    <author>
      <firstname>Patrick</firstname>
      <surname>Fuhrmann</surname>
      <affiliation>
        <shortaffil>DESY</shortaffil>
      </affiliation>
    </author>

    <author>
      <firstname>Mathias</firstname>
      <surname>de Riese</surname>
      <affiliation>
        <shortaffil>DESY</shortaffil>
      </affiliation>
    </author>
  </chapterinfo>

  <para>
    The first section describes the installation of a fresh &dcache;
    instance using RPM files downloaded from <ulink
    url="http://www.dcache.org">the &dcache; home-page</ulink>.  It is
    followed by a guide to upgrading an existing installation. In both
    cases we assume standard requirements of a small to medium sized
    &dcache; instance without an attached <glossterm
    linkend="gl-tss">tertiary storage system</glossterm>. The third
    section contains some pointers on extended features.
  </para>

  <section id="in-install">
    <title>Installing a &dcache; instance</title>

    <para>
      In the following the installation of a &dcache;
      instance will be described.  The &chimera; name space provider,
      some management components, and the &srm; need a &psql; server
      installed. We recommend running this &psql; on the local
      node. The first section describes the configuration of a &psql;
      server. After that the installation of &chimera; and of the
      &dcache; components will follow. During the whole installation
      process root access is required.
    </para>

    <section id="in-install-prerequisites">
      <title>Prerequisites</title>

      <para>
        In order to install &dcache; the following requirements must be met:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            An RPM-based Linux distribution is required for the
            following procedure. For Debian derived systems the RPM
            may be converted to a DEB using alien. Solaris is
            supported using either the Solaris package or the tarball.
          </para>
        </listitem>

        <listitem>
          <para>
           &dcache; requires Java 1.6 JRE. It is recommended to use &sunjvm; at the
	   latest patch-level (at least 1.6.0_18).
          </para>
        </listitem>

        <listitem>
          <para>
            &psql; must be installed and running. See <xref
            linkend="cb-postgres-install"/> for more details. It is
            strongly recommended to use version 8 or higher.
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="in-install-installation">
      <title>Installation of the &dcache; Software</title>

      <para>
        The RPM packages may be installed right away, for example
        using the command:
      </para>

      <screen>&prompt-root; <userinput>rpm -ivh dcache-server-<replaceable>version</replaceable>-<replaceable>release</replaceable>.i386.rpm</userinput>
&prompt-root; <userinput>rpm -ivh dcache-client-<replaceable>version</replaceable>-<replaceable>release</replaceable>.i386.rpm</userinput></screen>
       <para>
       The actual sources lie at <ulink url="http://www.dcache.org/downloads.shtml"/>.
       To install for example Version &dcache-version;-1 of the server you would use this:
        <screen>&prompt-root; <userinput>rpm -ivh http://www.dcache.org/downloads/1.9/dcache-server-&dcache-version;-1.noarch.rpm</userinput></screen>
        The client can be found in the download-section of the above url, too.
        </para>

    </section>

    <section id="in-install-postgres">
      <title>Readying the &psql; server for the use with &dcache;</title>

      <para>
	Using a &psql; server with &dcache; places a number of requirements on the database.
        You must configure &psql; for use by &dcache; and create the
        necessary &psql; user accounts and database structure.  This
        section describes how to do this.
      </para>

      <section id="in-install-postgres-trust">
	<title>Enabling local trust</title>

          <note>
            <para>
              Please note it is also possible to run &dcache; with all
              &psql; accounts requiring passwords. See <xref
              linkend="cb-postgres-configure"/> for
              more advice on the configuration of &psql;.
            </para>
          </note>

          <para>
            Perhaps the simplest configuration is to allow
            password-less access to the database and the following
            documentation assumes this is so.
          </para>

          <para>
            To allow local users to access &psql; without requiring a
            password, ensure the file
            <filename>pg_hba.conf</filename>, usually located in
            <filename class="directory">/var/lib/pgsql/data</filename>,
            contains the following lines.
          </para>

          <programlisting>local   all         all                        trust
host    all         all         127.0.0.1/32   trust
host    all         all         ::1/128        trust</programlisting>

          <important>
	    <title>Restarting &psql;</title>

	    <para>
            If you have edited &psql; configuration files, you
            <emphasis>must</emphasis> restart &psql; for those changes
            to take effect.  On many systems, this can be done with
            the following command:
	    </para>

	    <screen>&prompt-root; <userinput>/etc/init.d/postgresql restart</userinput>
Stopping postgresql service:                               [  OK  ]
Starting postgresql service:                               [  OK  ]</screen>
          </important>
        </section>

      <section id="in-install-postgres-chimera">
	<title>Configuring &chimera;</title>

        <para>
          &chimera; is a library providing a hierarchical name space
          with associated meta data. Where pools in &dcache; store the
          content of files, &chimera; stores the names and meta data
          of those files. &chimera; itself stores the data in a
          relational database. We will use &psql; in this tutorial.
          The properties of &chimera; are defined in
          <filename>/opt/d-cache/share/defaults/chimera.properties</filename>.
          See <xref linkend="cf-chimera"/> for more information.
        </para>

        <note>
          <para> &dcache; used to use another name space
          implementation called &pnfs;. &pnfs; is still available, we
          do however recommend that new installations use &chimera;.
          </para>
        </note>

        <section id="in-install-postgres-chimera-initDB">
	  <title>Initialize the database</title>

          <para>
            Create the <database>Chimera</database> user and database and add the
            Chimera-specific tables and stored procedures:
          </para>

          <screen>&prompt-root; <userinput>createdb -U postgres chimera</userinput>
CREATE DATABASE

&prompt-root; <userinput>createuser -U postgres --createdb --pwprompt chimera</userinput>
Enter password for new role:
Enter it again:
CREATE ROLE

&prompt-root; <userinput>psql -U chimera chimera -f /opt/d-cache/libexec/chimera/sql/create.sql</userinput>
psql:/opt/d-cache/libexec/chimera/sql/create.sql:23: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_inodes_pkey" for table "t_inodes"
CREATE TABLE
psql:/opt/d-cache/libexec/chimera/sql/create.sql:35: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_dirs_pkey" for table "t_dirs"
CREATE TABLE
psql:/opt/d-cache/libexec/chimera/sql/create.sql:45: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_inodes_data_pkey" for table "t_inodes_data"
<lineannotation>many more like this...</lineannotation>
INSERT 0 1
<lineannotation>many more like this...</lineannotation>
INSERT 0 1
CREATE INDEX
CREATE INDEX
psql:/opt/d-cache/libexec/chimera/sql/create.sql:256: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_storageinfo_pkey" for table "t_storageinfo"
CREATE TABLE
psql:/opt/d-cache/libexec/chimera/sql/create.sql:263: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_access_latency_pkey" for table "t_access_latency"
CREATE TABLE
psql:/opt/d-cache/libexec/chimera/sql/create.sql:270: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_retention_policy_pkey" for table "t_retention_policy"
CREATE TABLE
psql:/opt/d-cache/libexec/chimera/sql/create.sql:295: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_locationinfo_pkey" for table "t_locationinfo"
CREATE TABLE
psql:/opt/d-cache/libexec/chimera/sql/create.sql:311: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_locationinfo_trash_pkey" for table "t_locationinfo_trash"
CREATE TABLE
CREATE INDEX
psql:/opt/d-cache/libexec/chimera/sql/create.sql:332: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_acl_pkey" for table "t_acl"
CREATE TABLE
CREATE INDEX

&prompt-root; <userinput>createlang -U postgres plpgsql chimera</userinput>
&prompt-root; <userinput>psql -U chimera chimera -f /opt/d-cache/libexec/chimera/sql/pgsql-procedures.sql</userinput>
CREATE FUNCTION
CREATE FUNCTION
CREATE FUNCTION
CREATE TRIGGER
CREATE FUNCTION
CREATE TRIGGER
CREATE SEQUENCE
CREATE FUNCTION
CREATE TRIGGER
</screen>

          <note>
            <para>
              In general you should switch the
              <systemitem class='service'>portmap</systemitem> daemon off
              before starting &chimera;:
            </para>
            <screen>&prompt-root; <userinput>/etc/init.d/portmap stop</userinput>
Stopping portmap: portmap</screen>
          </note>

        </section>
      </section>

        <section id="in-install-postgres-users">
	  <title>Creating users and databases for &dcache;</title>

         <para>
          The &dcache; components will access the database server with
          the user <database class="user">srmdcache</database> which can
          be created with the <command>createuser</command>; for
          example:
         </para>

        <screen>&prompt-root; <userinput>createuser -U postgres --createdb --pwprompt srmdcache</userinput></screen>

        <para>
          Several management components running on the head node as well
          as the &srm; will use the database
          <database>dcache</database> for state information:
        </para>

        <screen>&prompt-root; <userinput>createdb -U srmdcache dcache</userinput></screen>

        <para>
          There might be several of these on several hosts. Each is
          used by the &dcache; components running on the respective
          host.
        </para>

        <para>
	Now the configuration of &psql; is done and you can start &dcache;.
	</para>
	</section>

<screen>&prompt-root; <userinput>/opt/d-cache/bin/dcache start</userinput>
Starting dCacheDomain done</screen>
        </section>

    <section id="in-install-configure">
      <title>Configuring &dcache;</title>
      <section id="in-install-configure-terminology">
	<title>Terminology</title>
	  <para>
	    &dcache; consists of one or more <firstterm>domains</firstterm>.
	    A domain in &dcache; is a Java Virtual Machine hosting one or more &dcache;
	    <firstterm>cells</firstterm>. Each domain must have a name which is unique
	    throughout the &dcache; instance and a cell must have a unique name within the
	    domain hosting the cell.
	  </para>
	  <para>
	    A <firstterm>service</firstterm> is an abstraction
	    used in the &dcache; configuration to describe atomic units to add to a
	    domain. It is typically implemented through one or more cells.  &dcache;
	    keeps lists of the domains and the services that are to be run within these
	    domains in the <firstterm>layout files</firstterm>.
	    The layout file may contain domain- and service- specific configuration
	    values. A <firstterm>pool</firstterm> is a cell providing physical data storage
	    services.
	  </para>
	</section>

	<section id="in-install-configure-files">
	  <title>Configuration files</title>

	  <para>
        In the setup of &dcache;, there are three main places for
        configuration files:
	<itemizedlist>
	  <listitem>
            <filename class="directory">/opt/d-cache/share/defaults</filename>
	  </listitem>

	  <listitem>
	    <filename>/opt/d-cache/etc/dcache.conf</filename>
	  </listitem>

	  <listitem>
	    <filename class="directory">/opt/d-cache/etc/layouts</filename>
	  </listitem>
	</itemizedlist>
	The folder <filename class="directory">/opt/d-cache/share/defaults</filename>
	contains the default
	settings of the &dcache;.
        If one of the default configuration values needs to be changed, copy the default
	setting of this value from one of the files in
	<filename class='directory'>/opt/d-cache/share/defaults</filename>
        to the file <filename>/opt/d-cache/etc/dcache.conf</filename>, which initially is
	empty and update the value.
	  </para>
	  <para>
	Layouts describe which domains to run on a host and which services to run in each
	domain.
	For the customized configuration of your &dcache; you will create a
	<filename>mylayout.conf</filename> file in
	<filename class="directory">/opt/d-cache/etc/layouts</filename>.
	  </para>
	</section>

      <important>
      <para>
        Do not update configuration values in the files in the default folders,
        since changes to these files will be overwritten by updates.
      </para>
      </important>

      <para>
	As the files in <filename class="directory">share/defaults/</filename> do serve
	as succinct documentation for all available configuration parameters and their
	default values it is quite useful to have a look at them.
      </para>

    <section id="in-install-layout">
      <title>Defining domains and services</title>
      <para>
	Domains and services are defined in the layout files.
        Depending on your site, you may have requirements upon the doors that
        you want to configure and domains within which you want to organise
        them.
      </para>

      <para>
        A domain must be defined if services are to run in that domain.
	Services will be started in the order in which they are defined.
      </para>

      <para>
	Every domain is a Java Virtual Machine that can be started and stopped
	separately. You might want to define several domains for the different
	services depending on the necessity of restarting the services separately.
      </para>

      <para>
	In the layouts files it is defined which domains to start and
	which services to put in which domain.  Configuration can be
	done per domain and per service.
      </para>

      <para>
	  A name in square brackets, without a forward-slash
	  (<literal>/</literal>) defines a domain.
	  A name in square brackets with a forward slash defines a service that is
	  to run in a domain.
	  Lines starting with a hash-symbol (<literal>#</literal>) are comments and will be
	  ignored by &dcache;.
      </para>

      <para>
        There may be several layout files in the layout directory, but only one
	of them is read by &dcache; when starting up. By default it is the
	<filename>single.conf</filename>.
	If the &dcache; should be started with another layout file you will have to make
	this configuration in <filename>/opt/d-cache/etc/dcache.conf</filename>.
      </para>

      <informalexample>
	<programlisting>dcache.layout=mylayout</programlisting>
	This entry in <filename>/opt/d-cache/etc/dcache.conf</filename>
	will instruct &dcache; to read the layout file
	<filename>/opt/d-cache/etc/layouts/mylayout.conf</filename> when starting up.
      </informalexample>

      <informalexample>
	These are the first lines of <filename>/opt/d-cache/etc/layouts/single.conf</filename>:
	<programlisting>messageBroker=none

[dCacheDomain]
[dCacheDomain/admin]
[dCacheDomain/broadcast]
[dCacheDomain/poolmanager]</programlisting>

	<para>
	  <literal>[&domain-dcache;]</literal> defines a domain
	  called &domain-dcache;. In this example only one domain is defined.
	  All the services are running in that domain. Therefore
	  no messagebroker is needed, which is the meaning of the entry
	  <literal>messageBroker=none</literal>.
	</para>

	<para>
	  <literal>[&domain-dcache;/&cell-admin;]</literal> declares that
	  the &cell-admin; service is to be run in the &domain-dcache; domain.
	</para>
      </informalexample>

      <informalexample>
	<para>
	  Here is an example for the first lines of the <filename>mylayout.conf</filename>
	  of a single node &dcache; with several domains.
	</para>
	<programlisting>[dCacheDomain]
[dCacheDomain/poolmanager]
[dCacheDomain/dummy-prestager]
[dCacheDomain/broadcast]
[dCacheDomain/loginbroker]
#[dCacheDomain/topo]

[namespaceDomain]
[namespaceDomain/pnfsmanager]
[namespaceDomain/cleaner]
[namespaceDomain/acl]
[namespaceDomain/nfsv3]

[gPlazmaDomain]
[gPlazma/gplazma]

[srmDomain]
[srmDomain/srm]
[srmDomain/spacemanager]
[srmDomain/transfermanagers]</programlisting>

      </informalexample>
	<important>Having defined more than one domain, a messagebroker is needed.
	This is because the
	defined domains need to be able to communicate with each other. The default value is
	<literal>messageBroker=cells</literal>, as defined in the defaults
	<filename>/opt/d-cache/share/defaults/dcache.properties</filename>.
	</important>
    </section>

    <section id="in-install-configure-pools">
      <title>Creating and configuring pools</title>

      <para>
	&dcache; will need to write the files it keeps in pools.
	These pools are defined as services within &dcache;. Hence, they are added
	to the layout file of your &dcache; instance, like all other services. To create a
	pool, you will have to create a directory in which the pool will be stored and
	define the pool in the layout file. The files and subdirectories of the pool are
	created automatically when &dcache; is started.
      </para>

       <note>
        <title>Mind the Gap!</title>
	<para>
	  The default gap for poolsizes is 4GiB. This means you should
	  make a bigger pool than 4GiB otherwise you would have to
	  change this gap in the &dcache; admin tool. See the example
	  below.  See also <xref linkend="intouch-admin"/>.
	</para>

	<screen>&dc-prompt-local; <userinput>cd <replaceable>poolName</replaceable></userinput>
&dc-prompt-pool; <userinput>set gap 2G</userinput>
&dc-prompt-pool; <userinput>save</userinput></screen>
       </note>


      <informalexample>
      <para>
	Consider the following example for adding a pool to a &dcache; layout file.
      </para>
	<programlisting>[${host.name}Domain/pool]
name=pool1
path=/path/to/pool1
waitForFiles=${path}/data
maxDiskSpace=2T</programlisting>

        <para>
	  You can name the domain the pool is running on after the
	  host on which the pool is located.  The only required
	  properties are <varname>name</varname> and
	  <varname>path</varname>.  The <varname>path</varname>
	  property defines in which directory files are to be stored.
	  The <varname>name</varname> defines the name of the
	  pool. With this name, the pool can also be addressed from
	  administrative components (see <xref
	  linkend="intouch-admin"/> or <xref linkend="intouch-web"
	  />).
	</para>
	<para>
	  The property <varname>waitForFiles</varname> instructs the
	  pool not to start up until the specified file or directory
	  is available.  This is recommended as it prevents problems
	  should the underlying storage be unavailable (e.g., if a
	  RAID device is offline).  The property
	  <varname>maxDiskSpace</varname> defines the maximum disk
	  usage for the pool.
	</para>

	 <para>
	  In the example above the name of the pool is
	  <literal>pool1</literal> and the pool has 2 Tebibytes.  The
	  example pool waits for the data directory (<filename
	  class='directory'>${path}/data</filename>) to become
	  available.  The <literal>${path}</literal> will expand to
	  the value of the <varname>path</varname> property, so the
	  example <varname>waitForFiles</varname> value is always
	  correct.
	</para>
      </informalexample>

      <para>
	Adding a pool to a configuration does not modify the pool or
	the data in it and can thus safely be undone or repeated.
      </para>

      </section>

      <section id="in-install-non-root">
	<title>Running &dcache; as a non-&user-root; user</title>
	<para>
	  For security reasons you might want to run &dcache; as a
	  non-&user-root; user. This needs to be configured in
	  <filename>/opt/d-cache/etc/dcache.conf</filename> and the
	  ownership of the pools and the billing directories need to
	  be changed.
	</para>
	<informalexample>
	  <para>
	    In this example we explain how to configure &dcache; to
	    run as user &user-dcache;.
	  </para>
	  <para>
	    First of all create the user &user-dcache; and a new
	    directory <filename
	    class="directory">/var/log/dcache</filename>, owned by
	    &user-dcache;
	  </para>

	    <screen>&prompt-root;<userinput>useradd dcache</userinput>
&prompt-root;<userinput>mkdir /var/log/dcache</userinput>
&prompt-root;<userinput>chown dcache /var/log/dcache</userinput></screen>
	    <para>
	      and add two lines to
	      <filename>/opt/d-cache/etc/dcache.conf</filename>.
	  </para>
	  <programlisting>dcache.user=dcache
dcache.paths.billing=/var/log/dcache</programlisting>
	  <para>
	    In the layout file
	    <filename>/opt/d-cache/etc/layouts/mylayout.conf</filename>
	    a pool was defined.
	  </para>
	  <programlisting>[${host.name}Domain/pool]
name=pool1
path=/path/to/pool1
waitForFiles=${path}/data
maxDiskSpace=2T</programlisting>
          <para>
	    Change the ownership of the directory of the pool.
	  </para>
	  <screen>&prompt-root;<userinput>chown -R dcache /path/to/pool1</userinput></screen>
	  <para>
	    Moreover, if &dcache; has been running as &user-root; the
	    files <filename>/tmp/createDDL.jdbc</filename> and
	    <filename>/tmp/dropDDL.jdbc</filename> need to be removed
	    as they are owned by the user &user-root;.
	  </para>
	  <screen>&prompt-root;<userinput>rm -f /tmp/createDDL.jdbc /tmp/dropDDL.jdbc</userinput></screen>

	<important>
	  <para>
	    If you switched the portmap daemon off the domain in which
	    the &nfs; server is running needs to be running as
	    &user-root;. This needs to be set in the layout file.
	  </para>
	<programlisting>[namespaceDomain]
dcache.user=root
[namespaceDomain/pnfsmanager]
[namespaceDomain/cleaner]
[namespaceDomain/acl]
[namespaceDomain/nfsv3]</programlisting>
	</important>

          <para>
	    Now you can start &dcache; as user &user-dcache;
	  </para>
	  <screen>&prompt-root;<userinput>/opt/d-cache/bin/dcache  start</userinput>
Starting dCacheDomain done
Starting namespaceDomain done
Starting gPlazmaDomain done
Starting srmDomain done</screen>
          <para>
            and verifiy that &dcache; is running as &user-dcache; and
            the &nfs; server is running as &user-root;.
	  </para>
	  <screen>&prompt-root;<userinput>/opt/d-cache/bin/dcache status</userinput>
DOMAIN          STATUS  PID   USER
dCacheDomain    running 11040 dcache
namespaceDomain running 11117 root
gPlazmaDomain   running 11125 dcache
srmDomain       running 11182 dcache</screen>
	</informalexample>
      </section>

      <section id="in-install-configure-java">
	<title>&java; heap size</title>

      <note>
        <para>
	  &dcache; uses &java; to parse the configuration files and
	  will search for &java; on the system path first; if it is
	  found there, no further action is needed. If &java; is not
	  on the system path, the environment variable
	  <envar>JAVA_HOME</envar> defines the location of the &java;
	  installation directory. Alternatively, the environment
	  variable <envar>JAVA</envar> can be used to point to the
	  &java; executable directly.
        </para>

	<para>
	  If <envar>JAVA_HOME</envar> or <envar>JAVA</envar> cannot be
	  defined as global environment variables
	  in the operating system, then they can be defined in either
	  <filename>/etc/default/dcache</filename> or <filename>/etc/dcache.env</filename>.
	  These two files are sourced by the init script and allow
	  <envar>JAVA_HOME</envar>, <envar>JAVA</envar> and
	  <envar>DCACHE_HOME</envar> to be defined.
	</para>
      </note>

      <para>
	By default the &java; heap size and the maximum direct buffer
	size are defined as
	<programlisting>dcache.java.memory.heap=512m
dcache.java.memory.direct=512m</programlisting>
        Again, these values can be changed in
	<filename>/opt/dcache/etc/dcache.conf</filename>.
      </para>

	<para>
	  For optimization of your &dcache; you can define the &java; heap size in the
	  layout file separately for every domain.
	  <informalexample>
	    <programlisting>[dCacheDomain]
dcache.java.memory.heap=2048m
dcache.java.memory.direct=0m
...
[utilityDomain]
dcache.java.memory.heap=384m
dcache.java.memory.direct=16m</programlisting>
	  </informalexample>
	</para>
      </section>

      <section id="in-install-configure-starting">
	<title>Starting &dcache;</title>
	<para>
	  All configured components can now be started with
	  <userinput>/opt/d-cache/bin/dcache start</userinput>.
	</para>
	<informalexample>
	  <screen>&prompt-root; <userinput>/opt/d-cache/bin/dcache start</userinput>
Starting dCacheDomain  Done (pid=7574)
Starting namespaceDomain  Done (pid=7647)
Starting gPlazmaDomain  Done (pid=8002)
Starting srmDomain  Done (pid=8081)</screen>
	</informalexample>
      </section>

      <para> 
	Now you can have a look at your &dcache; via The Web
	Interface, see <xref linkend="intouch-web">intouch-web</xref>:
	<uri>http://<replaceable>httpd.example.org</replaceable>:2288/</uri>,
	where <replaceable>httpd.example.org</replaceable> is the node on which your
	&cell-httpd; service is running.
	For a single node &dcache; this is the machine on which your &dcache; is running.
      </para>

  </section>

  <section id="in-install-multinode">
    <title>Installing &dcache; on several nodes</title>
 
    <tip>
      <para>
	On &dcache; nodes running only pool services you do not need to
	install &psql;. If your current node hosts only these services,
	the installation of &psql; can be skipped.
      </para>
    </tip>

    <para>
      Installing &dcache; on several nodes is not much more complicated
      than installing it on a single node.
      Think about how &dcache; should be organised regarding services and
      domains. Then adapt the layout files, as
      described in <xref linkend="in-install-layout" />, to the layout that
      you have in mind. The files <filename>/opt/d-cache/etc/layouts/head.conf</filename>
      and <filename>/opt/d-cache/etc/layouts/pool.conf</filename> contain
      examples for a &dcache; head-node and a &dcache; pool respectively.
    </para>

    <para>
      On any other nodes than the head node, <varname>broker.host</varname>
      has to be added to
      <filename>/opt/d-cache/etc/dcache.conf</filename>.
      <varname>broker.host</varname> should point to the host running your
      &dcache; broker. Usually that is the host containing the special
      domain &domain-dcache;, because that domain acts implicitly as a
      broker.
    </para>

  </section>

</section>

<section id="in-upgrade">
  <title>Upgrading a &dcache; Instance</title>

  <para>
    Upgrading to bugfix releases within one supported branch (e.g. from
    &dcache-version;-1 to  &dcache-version;-2) may be done by
    upgrading the packages with

    <screen>&prompt-root; <userinput>rpm -Uvh <replaceable>packageName</replaceable></userinput></screen>
    Now &dcache; needs to be started again.
<important>Always read the release notes carefully before upgrading!</important>
  </para>
</section>

</chapter>
