<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
]>
<chapter id="cf-gplazma">

<title>Authorization in &dcache;</title>

  <chapterinfo>
    <author>
      <firstname>Ted</firstname>
      <surname>Hesselroth</surname>
    </author>
    <author>
      <firstname>Antje</firstname>
      <surname>Petersen</surname>
    </author>

  </chapterinfo>

  <para>
    Authorization in &dcache; is done via &cell-gplazma; using
    grid-certificates. Cells make requests to &cell-gplazma; by
    submitting user credential information to it, receiving the
    authorization decision and site-specific user information such as
    uid, gid, and rootpath in return.
  </para>

  <para>
    The acronym stands for Grid-aware PLuggable AuthoriZation
    Management, and supports the use of plugins which implement
    various selectable authorization methods. The five
    currently-available methods are:
  </para>

  <itemizedlist spacing="compact">

    <listitem>
      <para>
	gplazmalite-vorole-mapping : In this method the mapping to the
	username is done from the concatenation of the user's DN with
	the user's Fully Qualified Attribute Name (FQAN). A second
	file, <filename>storage-authzdb</filename>, is used for the
	mapping of the username to the uid, gid, and rootpath.
      </para>
    </listitem>

    <listitem>
      <para>
	kpwd : This is the <quote>legacy</quote> method. The
	<filename>dcache.kpwd</filename> file is used to map a user's
	DN to a local username, and the same file is used in a second
	mapping of the username to the uid, gid, and rootpath. As in
	all methods, if the mappings succeed, file system access is
	done using the obtained uid and gid, and it is checked that
	the local path of the transfer starts with the designated
	rootpath.
      </para>
    </listitem>

    <listitem>
      <para>
	grid-mapfile : This method employs a grid mapfile. From the
	mapfile, the user's DN is mapped to a username. Again the mapping of
	username to uid, gid, and rootpath is through the
	<filename>storage-authzdb</filename> file.
      </para>
    </listitem>

    <listitem>
      <para>
	saml-vo-mapping : The DN and Role are mapped to a username via
	a callout to a <ulink
	url="http://grid.racf.bnl.gov/GUMS/">GUMS</ulink> server (Grid
	User Management System). The GUMS service may run an extension
	which returns the uid, gid, and rootpath as well. Otherwise,
	the mapping of username to uid, gid, and rootpath is through
	the <filename>storage-authzdb</filename> file.
      </para>
    </listitem>

    <listitem>
      <para>
	xacml-vo-mapping :
<!-- TODO short explanation -->

      </para>
    </listitem>

  </itemizedlist>

  <para>
    There are two versions of &cell-gplazma; available,
    &cell-gplazma1; and &cell-gplazma2;. &cell-gplazma1; is enabled by
    default. If you want to use &cell-gplazma2; you will have to
    specify
  </para>
  <programlisting>gplazma.version = 2</programlisting>
  <para>
    in <filename>/opt/d-cache/etc/dcache.conf</filename> or in the layout file.
    <informalexample>
      <programlisting>[gPlazmaDomain]
[gPlazmaDomain/gplazma]
gplazma.version = 2</programlisting>
    </informalexample>

  </para>

  <section id="cf-gplazma-certificates">
    <title>Using x509 Certificates</title>
    <para>
      In &dcache; x509 Certificates are used for authentication and
      authorisation. An x509 certificate identifies someone as an
      individual, much like a passport or an identity card. To be able
      to verify the chain of trust when using the non-commercial
      grid-certificates you should install the list of certificates of
      grid Certification Authorities (CAs). In case you are using
      commercial certificates you will find the list of CAs in your
      browser. Moreover, you will need a server certificate for the
      &dcache; host and a user certificate.
    </para>

    <section>
      <title>CA Certificates</title>
      <para>
	CERN packages a number of CA certificates. These are deployed
	by most grid sites. By deploying these certificates, you
	state that you trust the CA's procedure for identify
	individuals and to act promptly if there are any security
	issues.
      </para>

      <para>
	Install the CA certificates.
      </para>
      <screen>&prompt-root; <userinput>cd /etc/yum.repos.d/</userinput>
&prompt-root; <userinput>wget http://grid-deployment.web.cern.ch/grid-deployment/glite/repos/3.2/lcg-CA.repo</userinput>
&prompt-root; <userinput>yum install lcg-CA</userinput></screen>

    <para>
      The directory <filename
      class='directory'>/etc/grid-security/certificates</filename>
      will be created and CA certificates will be copied to this directory.
    </para>

    <para>
      Certificates which have been revoked are collected in
      certificate revocation lists (CRLs). To get the CRLs install the
      <command>fetch-crl</command> command.
    </para>
    <screen>&prompt-root; <userinput>yum install fetch-crl</userinput>
&prompt-root; <userinput>/usr/sbin/fetch-crl</userinput></screen>
      <para>
	<command>fetch-crl</command> adds x509 CRLs to <filename
	class='directory'>/etc/grid-security/certificates</filename>.
	You will usually set up a cron job to get the CRLs.
      </para>
    </section>

    <section>
      <title>Host Certificate</title>
      <para>
	If you do not have a host certificate you will need to request
	it from your chosen CA. Once you have the certificate in your
	browser, make a backup and name it
	<filename>hostCertificate.p12</filename>. Copy the host
	certificate to the directory <filename
	class='directory'>/etc/grid-security/</filename> on your
	server and convert it to <filename>*.pem</filename>.
      </para>

      <screen>&prompt-root; <userinput>openssl pkcs12 -clcerts -nokeys -in <replaceable>hostCertificate</replaceable>.p12 -out hostcert.pem</userinput>
Enter Import Password:
MAC verified OK</screen>
      <para>
	Here you will need to enter the password you used when you did the backup in your browser.
      </para>

      <screen>&prompt-root; <userinput>openssl pkcs12 -nocerts -in <replaceable>hostCertificate</replaceable>.p12 -out hostkey.pem</userinput>
Enter Import Password:
MAC verified OK
Enter PEM pass phrase:</screen>

      <para>
	Again you will need to enter the above mentioned import
	password. Then you will need to choose a PEM pass phrase, and
	remove it from the key.
      </para>
      <screen>&prompt-root; <userinput>openssl rsa -in hostkey.pem -out hostkey.pem</userinput>
Enter pass phrase for hostkey.pem:
writing RSA key</screen>

      <para>
	Now change the file permissions.
      </para>
      <screen>&prompt-root; <userinput>chmod 400 hostkey.pem</userinput>
&prompt-root; <userinput>chmod 644 hostcert.pem</userinput></screen>
    </section>

    <section>
      <title>User Certificate</title>
      <para>
	Copy your user certificate to the directory <filename
	class='directory'>.globus</filename> on your worker node and
	convert it from <filename>*.p12</filename> to
	<filename>usercert.pem</filename> and
	<filename>userkey.pem</filename> as described above.
      </para>
    </section>

    <section id="cf-gplazma-certificates-voms">
      <title>VOMS Proxy Certificate</title>

      <para>
	For very large groups of people, it is often more
	convenient to authorise people based on their membership of
	some group. To identify that they are a member of some group,
	the certificate owner can create a new short-lived x509
	certificate that includes their membership of various
	groups. This short-lived certificate is a proxy-certificate
	and, when their membership information comes from a VOMS
	server, it is often referred to as a voms proxy
	certificate.
      </para>

      <para>
	You can generate a proxy certificate using the command
	<command>voms-proxy-init</command>, which is capable of adding
	VOMS attributes to the proxy. If
	<command>voms-proxy-init</command> is not installed on your
	machine get the &glite; repository and install the VOMS
	clients.
      </para>

      <screen>&prompt-root; <userinput>cd /etc/yum.repos.d/</userinput>
&prompt-root; <userinput>wget http://grid-deployment.web.cern.ch/grid-deployment/glite/repos/3.2/glite-UI.repo</userinput>
&prompt-root; <userinput>yum install glite-security-voms-clients</userinput></screen>

      <section id="cf-gplazma-certificates-voms-proxy-init">
	<title><command>Creating a VOMS proxy</command></title>
	<para>
	  To create a VOMS proxy for your user certificate you need to
	  execute the <command>voms-proxy-init</command> as a user.
	</para>

	<informalexample>
	  <screen>&prompt-user; <userinput>export PATH=/opt/glite/bin/:$PATH</userinput>
&prompt-user; <userinput>voms-proxy-init</userinput>
Enter GRID pass phrase:
Your identity: /C=DE/O=GermanGrid/OU=DESY/CN=John Doe

Creating proxy ........................................................................Done
Your proxy is valid until Mon Mar  7 22:06:15 2011</screen>
        </informalexample>

	<section id="cf-gplazma-certificates-voms-proxy-init-voms">
	  <title>Certifying your membership of a VO</title>
	  <para>
	    You can certify your membership of a VO by using the
	    command <command>voms-proxy-init -voms
	    <replaceable>yourVO</replaceable></command>. This is
	    useful as in &dcache; authorization can be done by VO (see
	    <xref linkend='cf-gplazma-vorole'/>). To be able to use
	    the extension <command>-voms
	    <replaceable>yourVO</replaceable></command> you need to be
	    able to access VOMS servers. To this end you need the the
	    VOMS server's and the CA's DN. Create a file
	    <filename>/etc/grid-security/vomsdir/<replaceable>VO</replaceable>/<replaceable>hostname</replaceable>.lsc</filename>
	    per VOMS server containing on the 1st line the VOMS
	    server's DN and on the 2nd line, the corresponding CA's
	    DN. The name of this file should be the fully qualified
	    hostname followed by an <filename>.lsc</filename>
	    extension and the file must appear in a subdirectory
	    <filename
	    class='directory'>/etc/grid-security/vomsdir/<replaceable>VO</replaceable></filename>
	    for each VO that is supported by that VOMS server and by
	    the site.
	  </para>

	  <para>
	    At <ulink url="http://operations-portal.egi.eu/vo" /> you
	    can search for a VO and find this information.
	  </para>

	  <informalexample>
	    <para>
	      For example, the file /etc/grid-security/vomsdir/desy/grid-voms.desy.de.lsc contains:
	    </para>
	    <programlisting>/C=DE/O=GermanGrid/OU=DESY/CN=host/grid-voms.desy.de
/C=DE/O=GermanGrid/CN=GridKa-CA</programlisting>
          <para>
	    where the first entry is the DN of the DESY VOMS server
	    and the second entry is the DN of the CA which signed the
	    DESY VOMS server's certificate.
	  </para>
	  </informalexample>

      <para>
	In addition, you need to have a file
	<filename>/opt/glite/etc/vomses</filename> containing your VO's VOMS server.
      </para>

    <informalexample>
      <para>
	For DESY the file <filename>/opt/glite/etc/vomses</filename> should
	contain the entry
      </para>
      <programlisting>"desy" "grid-voms.desy.de" "15104" "/C=DE/O=GermanGrid/OU=DESY/CN=host/grid-voms.desy.de" "desy" "24"</programlisting>
      <para>
	The first entry <quote>desy</quote> is the real name or a
	nickname of your VO. <quote>grid-voms.desy.de</quote> is the
	hostname of the VOMS server. The number <quote>15104</quote>
	is the port number the server is listening on. The forth entry
	is the DN of the server's VOMS certificate. The fifth entry,
	<quote>desy</quote>, is the VO name and the last entry is the
	globus version number which is not used anymore and can be
	omitted.
      </para>

    </informalexample>

    <informalexample>

      <para>
	Use the command <command>voms-proxy-init -voms</command> to
	create a VOMS proxy with VO <quote>desy</quote>.
      </para>

      <screen>&prompt-user;<userinput> voms-proxy-init -voms desy</userinput>
Enter GRID pass phrase:
Your identity: /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
Creating temporary proxy ....................................................... Done
Contacting  grid-voms.desy.de:15104 [/C=DE/O=GermanGrid/OU=DESY/CN=host/grid-voms.desy.de] "desy" Done
Creating proxy .................................... Done
Your proxy is valid until Mon Mar  7 23:52:13 2011</screen>

  <para>
    View the information about your VOMS proxy with
    <command>voms-proxy-info</command>
  </para>

      <screen>&prompt-user; <userinput>voms-proxy-info</userinput>
subject   : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe/CN=proxy
issuer    : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
identity  : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
type      : proxy
strength  : 1024 bits
path      : /tmp/x509up_u500
timeleft  : 11:28:02</screen>

      <para>
	The last line tells you how much longer your proxy will be valid.
      </para>
      <para>
	If your proxy is expired you will get
      </para>
      <screen>&prompt-user; <userinput>voms-proxy-info</userinput>
subject   : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe/CN=proxy
issuer    : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
identity  : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
type      : proxy
strength  : 1024 bits
path      : /tmp/x509up_u500
timeleft  : 0:00:00</screen>

    <para>
      The command <command>voms-proxy-info -all</command> gives you
      information about the proxy and about the VO.
    </para>

<screen>&prompt-user; <userinput>voms-proxy-info -all</userinput>
subject   : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe/CN=proxy
issuer    : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
identity  : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
type      : proxy
strength  : 1024 bits
path      : /tmp/x509up_u500
timeleft  : 11:24:57
=== VO desy extension information ===
VO        : desy
subject   : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
issuer    : /C=DE/O=GermanGrid/OU=DESY/CN=host/grid-voms.desy.de
attribute : /desy/Role=NULL/Capability=NULL
attribute : /desy/test/Role=NULL/Capability=NULL
timeleft  : 11:24:57
uri       : grid-voms.desy.de:15104</screen>

      <para>
	Use the command <command>voms-proxy-destroy</command> to destroy your VOMS proxy.
      </para>
      <screen>&prompt-user; <userinput>voms-proxy-destroy</userinput>
&prompt-user; <userinput>voms-proxy-info</userinput>

Couldn't find a valid proxy.

</screen>

    </informalexample>

	</section>
      </section>
    </section>
  </section>
  <section id="cf-gplazma-install">
    <title>Configuring how &cell-gplazma; works</title>

    <para>
      The &cell-gplazma; cell can be called from &gridftp; and
      &gsidcap; doors and the &srm; server.
    </para>

    <para>
      Depending on which authorization methods are to be used, some
      configuration files must be modified. The configuration files
      described here must exist on the node that should run
      the &cell-gplazma; cell and must contain the correct
      site-specific information for the &dcache; on which it is
      deployed.
    </para>

    <section id="cf-gplazma-policy">
      <title>The &cell-gplazma; policy file</title>

      <para>
	The &cell-gplazma; policy, located in the
	<filename>/opt/d-cache/etc/dcachesrm-gplazma.policy</filename>
	file, controls the authorization plugins to be used ("ON" or
	"OFF" for each plugin) and the order of their execution.
      </para>

      <informalexample>
      <programlisting width="80"># Switches
xacml-vo-mapping="OFF"
saml-vo-mapping="ON"
kpwd="ON"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF"</programlisting>

      <para>
	The order of execution is specified by assigning a different
	number to each plugin, such as
      </para>

	<programlisting width="80"># Priorities
xacml-vo-mapping-priority="5"
saml-vo-mapping-priority="1"
kpwd-priority="3"
grid-mapfile-priority="4"
gplazmalite-vorole-mapping-priority="2"</programlisting>
      </informalexample>

      <para>
	In the above example, the saml-vo-mapping plugin would be
	tried first. If authorization was denied for that method, or
	if the authentication method itself failed, then the kpwd
	plugin would be tried. The "Priorities" numbering shows that
	if gplazmalite-vorole-mapping were to also be turned on, it
	would be tried after the saml-vo-mapping plugin and before the
	kpwd method.
      </para>

      <para>
	Having more than one plugin turned on allows a plugin to be
	used as fallback for another plugin that may fail. It also
	allows for the authorization of special users who may be
	denied by the other methods.
      </para>

      <para>
	The policy file also contains a section for each of the
	plugins, for configuration specific to that plugin. These
	sections are described in the documentation for each plugin,
	as follows.
      </para>
    </section>


  <section id="cf-gplazma-authzdb">
    <title><filename>storage-authzdb</filename></title>

    <para>
      In &cell-gplazma;, except for the dcache.kpwd plugin,
      authorization mapping is a two-step process. First, a username
      is obtained from a mapping of the user's DN or DN and role, then
      a mapping of username to uid, gid, rootpath is performed. The
      <filename>storage-authzdb</filename> file is used for the
      second mapping.
    </para>

    <section>
      <title>Preparing <filename>storage-authzdb</filename></title>

      <para>
	The directory <filename class='directory'>/etc/grid-security</filename> is
	the location of <filename>storage-authzdb</filename>. The file
	must contain a line specifying the version of the
	<filename>storage-authzdb</filename> format.
      </para>

      <blockquote><programlisting width="80">version 2.1</programlisting></blockquote>

      <para>
	The other lines in the file each contain eight fields: the
	string <literal>authorize</literal>, followed by the username, read-write
	permission, uid, gid, and three paths.
      </para>

      <blockquote>
	<programlisting width="80">authorize doegroup read-write 12345 1234 / /data/<replaceable>yourDirectory</replaceable> /</programlisting>
      </blockquote>

      <para>
	In the <filename>storage-authzdb</filename> file, there must
	be a line for each username to be authorized. The existence of
	three paths is for legacy purposes. The second path is of most
	importance; it is the path under which the user is allowed to
	access files. It is permissible to simply use a
	<quote><filename class="directory">/</filename></quote> for
	the second path.
      </para>

      <blockquote>
	<programlisting width="80">authorize doegroup read-write 12345 1234 / / /</programlisting>
      </blockquote>

      <para>
	in which case the user will be authorized for any path (the
	filesystem permissions in &chimera; must also allow the transfer).
      </para>

      <para>
	The first path is nearly always left as <quote><filename
	class="directory">/</filename></quote>, but it may be used as
	a home directory in interactive session, as a subdirectory of
	the second path. Upon login, the second path is used as the
	user's root, and a <quote>cd</quote> is performed to the first
	path. The first path is always defined as being relative to
	the second path.
      </para>

      <para>
        Multiple gids can be assigned by using comma-separated values for the GID file, as in
      </para>

      <blockquote>
	<programlisting width="80">authorize doegroup read-write 12345 5063,5071,6843 / / /</programlisting>
      </blockquote>

      <para>
	The lines of the <filename>storage-authzdb</filename> file are
	similar to the <quote>login</quote> lines of the
	<filename>dcache.kpwd</filename> file. If you alreay have a
	<filename>dcache.kwpd</filename> file, create
	<filename>storage-authzdb</filename> by taking the lines from
	your <filename>dcache.kpwd</filename> file that start with the
	word <literal>login</literal>, for example,
      </para>

      <blockquote>
	<programlisting width="80">login doegroup read-write 12345 50631234 / /data/<replaceable>yourDirectory</replaceable> /</programlisting>
      </blockquote>

      <para>
	and replacing the word <literal>login</literal> with
	<literal>authorize</literal>.
      </para>


    <section>
      <title>Support for the Priority Field in <filename>storage-authzdb</filename></title>

      <para>
	In the future, &dcache; services may support the use of
	priorites, to be assigned in
	<filename>storage-authzdb</filename>. To assign priorities in
	<filename>storage-authzdb</filename>, replace the stated
	version number with <literal>2.2</literal>
      </para>

      <blockquote>
	<programlisting width="80">version 2.2</programlisting>
      </blockquote>

      <para>
	In the remainder of the file, the fourth field of each line is
	the priority, which is an integer. Otherwise the fields have
	the same definitions as in version 2.1.
      </para>

      <blockquote>
	<programlisting width="80">authorize doegroup1     read-write    2       12345 1234   / /data/<replaceable>yourDirectory</replaceable>/doe1 /
authorize doegroup2     read-write    0       23456 2345   / /data/<replaceable>yourDirectory</replaceable>/doe2 /</programlisting>
      </blockquote>

      <para>
	Using version 2.1, the default priority is <quote>0</quote>,
	therefore use this value if it is desired to have the same
	behavior as in 2.2. Interpretation of the priority value is
	dependent on the implementation of any &dcache; service which
	may use it, however, the convention is that higher numerical
	values of the field result in higher priority. See the
	documentation of the specific service in question for details.
      </para>

      <para>
	There are currently no &dcache; services which make use of the
	priority field.
      </para>

    </section>
    </section>
  </section>

  <section id="cf-gplazma-vorole">
    <title>The gplazmalite-vorole-mapping Plugin</title>

    <para>
      The &cell-gplazma; policy file
      <filename>/opt/d-cache/etc/dcachesrm-gplazma.policy</filename>
      contains two lines for this plugin.
    </para>

    <blockquote>
      <programlisting width="80"># Built-in gPLAZMAlite grid VO role mapping
gridVoRolemapPath="/etc/grid-security/grid-vorolemap"
gridVoRoleStorageAuthzPath="/etc/grid-security/storage-authzdb"</programlisting>
    </blockquote>

    <para>
      The second is the <filename>storage-authzdb</filename> used in
      other plugins. See the above documentation <xref
      linkend='cf-gplazma-authzdb'/> for how to create the file.
    </para>

    <section>
      <title>Preparing <filename>grid-vorolemap</filename></title>

      <para>
	The file is similar in format to the
	<filename>grid-mapfile</filename>, however there is an
	additional field following the DN (Certificate Subject),
	containing the FQAN (Fully Qualified Attribute Name).
      </para>

      <informalexample>
	<programlisting width="80">"/C=DE/O=GermanGrid/OU=DESY/CN=John Doe" "/desy" doegroup
"/C=DE/DC=GermanGrid/O=DESY/CN=John Doe" "/desy/Role=NULL/" doegroup
"/C=DE/DC=GermanGrid/O=DESY/CN=John Doe" "/desy/Role=NULL/Capability=NULL" doegroup</programlisting>
      </informalexample>

      <para>
	Therefore each line has three fields: the user's DN, the
	user's FQAN, and the username that the DN and FQAN combination
	are to be mapped to.
      </para>

      <para>
	The FQAN is sometimes semantically referred to as the
	<quote>role</quote>. The same user can be mapped to different
	usernames depending on what their role is. The role is
	determined by how the user creates their proxy, for example,
	using <link
	linkend='cf-gplazma-certificates-voms-proxy-init'><command>voms-proxy-init</command></link>.
	The FQAN contains the user's Group, Role (optional), and
	Capability (optional). The latter two may be set to the string
	<quote>NULL</quote>, in which case they will be ignored by the
	plugin.
      </para>

      <informalexample>
      <para>
	If a user is authorized in multiple roles, for example
      </para>

	<programlisting width="80">"/DC=org/DC=doegrids/OU=People/CN=John Doe" "/cms/uscms" uscms01
"/DC=org/DC=doegrids/OU=People/CN=John Doe" "/cms/uscms/Role=cmsuser" cms2847
"/DC=org/DC=doegrids/OU=People/CN=John Doe" "/cms/uscms/Role=cmsphedex" phedex
"/DC=org/DC=doegrids/OU=People/CN=John Doe" "/cms/uscms/Role=cmsprod" cmsprod</programlisting>

      <para>
	they would be mapped to the username corresponding to the role
	found in the proxy that the user creates for use by the client
	software. If the user actually creates several roles in their
	proxy, authorization (and subsequent check of path and
	filesystem permissions) will be attempted for each role in the
	order that they are found in the proxy.
      </para>

      <para>
	In a &gridftp; &url;, the user may also explicity request a
	username.
      </para>

	<programlisting width="80">gsiftp://doeprod@ftp-door.example.org:2811/testfile1</programlisting>

      <para>
	in which case other roles will be disregarded.
      </para>
      </informalexample>

    </section>

    <section>
      <title>Authorizing a VO</title>

      <para>
	Instead of individual DNs, it is allowable to use
	<literal>*</literal> or <literal>"*"</literal> as the first
	field, such as
      </para>

      <informalexample>
	<programlisting width="80">"*" "/desy/Role=production/" desyprod
</programlisting>
      </informalexample>

      <para>
	In that case, any DN with the corresponding role will
	match. It should be noted that a match is first attempted with
	the explicit DN. Therefore if both DN and
	<literal>"*"</literal> matches can be made, the DN match will
	take precedence. This is true for the revocation matches as
	well (see below).
      </para>

      <para>
	Thus a user with subject
	<literal>/C=DE/O=GermanGrid/OU=DESY/CN=John Doe</literal> and
	role <literal>/desy/Role=production</literal> will be mapped
	to username <literal>desyprod</literal> via the above
	<filename>storage-authzdb</filename> line with
	<literal>"*"</literal> for the DN, except if there is also a
	line such as
	<programlisting>"/C=DE/O=GermanGrid/OU=DESY/CN=John Doe" "/desy/Role=production" desyprod2</programlisting>
      </para>

      <para>
	in which case the username will be <literal>desyprod2</literal>.
      </para>
    </section>

    <section>
      <title>Revocation Entries</title>

      <para>
	To create a revocation entry, add a line with a dash
	(<literal>-</literal>) as the username, such as
      </para>

      <blockquote>
	<programlisting width="80">"/C=DE/O=GermanGrid/OU=DESY/CN=John Doe" "/desy/production" -</programlisting>
      </blockquote>

      <para>
	or modify the username of the entry if it already exists. The
	behaviour is undefined if there are two entries which differ
	only by username.
      </para>

      <para>
	Since DN is matched first, if a user would be authorized by
	his VO membership through a <literal>"*"</literal> entry, but
	is matched according to his DN to a revocation entry,
	authorization would be denied. Likewise if a whole VO were
	denied in a revocation entry, but some user in that VO could
	be mapped to a username through his DN, then authorization
	would be granted.
      </para>
    </section>

    <section>
      <title>More Examples</title>

      <para>
	Suppose that there are users in production roles that are
	expected to write into the storage system data which will be
	read by other users. In that case, to protect the data the
	non-production users would be given read-only access. Here in
	<filename>/etc/grid-security/grid-vorolemap</filename> the
	production role maps to username <literal>cmsprod</literal>,
	and the role which reads the data maps to
	<literal>cmsuser</literal>.
      </para>

      <blockquote>
	<programlisting width="80">"*" "/cms/uscms/Role=cmsprod" cmsprod
"*" "/cms/uscms/Role=cmsuser" cmsuser</programlisting>
      </blockquote>

      <para>
	The read-write privilege is controlled by the third field in
	the lines of
	<filename>/etc/grid-security/storage-authzdb</filename>
      </para>

      <blockquote>
	<programlisting width="80">authorize cmsprod  read-write  9811 5063 / /data /
authorize cmsuser  read-only  10001 6800 / /data /</programlisting>
      </blockquote>


      <para>
	Another use case is when users are to have their own
	directories within the storage system. This can be arranged
	within the &cell-gplazma; configuration files by mapping each
	user's DN to a unique username and then mapping each username
	to a unique root path. As an example, lines from
	<filename>/etc/grid-security/grid-vorolemap</filename> would
	therefore be written
      </para>

      <blockquote>
	<programlisting width="80">"/DC=org/DC=doegrids/OU=People/CN=Selby Booth" "/cms" cms821
"/DC=org/DC=doegrids/OU=People/CN=Kenja Kassi" "/cms" cms822
"/DC=org/DC=doegrids/OU=People/CN=Ameil Fauss" "/cms" cms823</programlisting>
      </blockquote>

      <para>
	and the corresponding lines from
	<filename>/etc/grid-security/storage-authzdb</filename> would be
      </para>

      <blockquote>
	<programlisting width="80">authorize cms821 read-write 10821 7000 / /data/cms821 /
authorize cms822 read-write 10822 7000 / /data/cms822 /
authorize cms823 read-write 10823 7000 / /data/cms823 /</programlisting>
      </blockquote>

      <para>
	Starting with &dcache; 1.8, regular expressions are supported
	in the <filename>/etc/grid-security/storage-authzdb</filename>
	file. Substitutions by regular expression group are also
	permitted. Place a regular expression in the username field of
	the <filename>storage-authzdb</filename> file. Any groups in
	the regular expression (defined by enclosure in parentheses)
	can be referred to in later fields of the line, and the
	corresponding substitution will be made when the file is
	read. For example, the above lines for granting users
	individual directories can be replaced with
      </para>

      <blockquote>
	<programlisting width="80">authorize cms(\d\d\d) read-write 10$1 7000 / /data/cms$1 /</programlisting>
      </blockquote>

<!--TODO: Karsten said this does not work! -->

      <para>
	in which case <literal>cms821</literal> matches
	<literal>cms(\d\d\d)</literal> and the group
	<literal>(\d\d\d)</literal> is substituted in
	<literal>10$1</literal> to yield <literal>10821</literal> and
	in <filename>/pnfs/fnal.gov/data/cms$1</filename> to yield
	<filename>/pnfs/fnal.gov/data/cms821</filename>, and so on.
      </para>

    </section>
  </section>

  <section id="cf-gplazma-kpwd">
    <title>The kpwd Plugin</title>

    <para>
      The section in the &cell-gplazma; policy file for the kpwd plugin
      specifies the location of the <filename>dcache.kpwd</filename>
      file, for example
    </para>

    <blockquote>
      <programlisting width="80"># dcache.kpwd
kpwdPath="/opt/d-cache/etc/dcache.kpwd"</programlisting>
    </blockquote>

    <para>
      To maintain only one such file, make sure that this is the same
      location as defined in
      <filename>/opt/d-cache/share/defaults/dcache.properties</filename>.
    </para>

    <para>
      Use <filename>/opt/d-cache/share/examples/gplazma/dcache.kpwd</filename>
      to create this file.
    </para>
  </section>


  <section id="cf-gplazma-gridmap">
    <title>The grid-mapfile Plugin</title>

    <para>
      Two file locations are defined in the policy file for this
      plugin:
    </para>

    <blockquote>
      <programlisting width="80"># grid-mapfile
gridMapFilePath="/etc/grid-security/grid-mapfile"
storageAuthzPath="/etc/grid-security/storage-authzdb"</programlisting>
    </blockquote>


    <section>
      <title>Preparing the <filename>grid-mapfile</filename></title>

      <para>
	The <filename>grid-mapfile</filename> is the same as that used in other
	applications. It can be created in various ways, either by
	connecting directly to VOMS or GUMS servers, or by hand.
      </para>

      <para>
	Each line contains two fields: a DN (Certificate Subject) in
	quotes, and the username it is to be mapped to.
      </para>

      <blockquote>
	<programlisting width="80">"/C=DE/O=GermanGrid/OU=DESY/CN=John Doe" johndoe</programlisting>
      </blockquote>

      <para>
	When using the grid-mapfile plugin, the
	<filename>storage-authzdb</filename> file must also be
	configured. See <xref linkend="cf-gplazma-authzdb"/> for
	details.
      </para>
    </section>
  </section>

  <section id="cf-gplazma-saml">
    <title>The saml-vo-mapping Plugin</title>

    <para>
      There are two lines in the policy file for this plugin.
    </para>

    <blockquote>
      <programlisting width="80"># SAML-based grid VO role mapping
mappingServiceUrl="https://gums.oursite.edu:8443/gums/services/GUMSAuthorizationServicePort"
# Time in seconds to cache the mapping in memory
saml-vo-mapping-cache-lifetime="60"</programlisting>
    </blockquote>

    <para>
      The first line containins the &url; for the GUMS web
      service. Replace the &url; with that of the site-specific <ulink
      url="http://grid.racf.bnl.gov/GUMS/">GUMS</ulink>. When using
      the "GUMSAuthorizationServicePort", the service will only
      provide the username mapping and it will still be necessary to
      have the storage-authzdb file used in other plugins. See the
      above documentation <link
      linkend='cf-gplazma-authzdb'>
      storage-authzdb</link> for how to create the file. If a GUMS
      server providing a "StorageAuthorizationServicePort" with
      correct uid, gid, and rootpath information for your site is
      available, the storage-authzdb file is not necesary.
    </para>

    <para>
      The second line contains the value of the caching lifetime. In
      order to decrease the volume of requests to the SAML
      authorization (GUMS) service, authorizations for the
      saml-vo-mapping method are by default cached for a period of
      time. To change the caching duration, modify the
      saml-vo-mapping-cache-lifetime value in
      <filename>/opt/d-cache/etc/dcachesrm-gplazma.policy</filename>
    </para>

    <blockquote>
      <programlisting width="80">saml-vo-mapping-cache-lifetime="120"</programlisting>
    </blockquote>

    <para>
      To turn off caching, set the value to 0. The default value is 180
      seconds.
    </para>

  </section>


  <section id="cf-gplazma-xacml">
    <title>The xacml-vo-mapping Plugin</title>

    <para>
     &cell-gplazma; includes an authorization plugin, to support the XACML
     authorization schema. Using XACML with SOAP messaging allows
     gPlazma to acquire authorization mappings from any service which
     supports the <ulink
     url="http://cd-docdb.fnal.gov/cgi-bin/ShowDocument?docid=2952">obligation
     profile for grid interoperability</ulink>.  Servers presently
     supporting XACML mapping are the latest releases of GUMS and
     SCAS. Using the new plugin is optional, and previous
     configuration files are still compatible with &cell-gplazma;. It is
     normally not necessary to change this file, but if you have
     customized the previous copy, transfer your changes to the new
     batch file.
    </para>

    <para>
      The configuration is very similar to that for the saml-vo-mapping plugin.
      There are two lines for the configuration.
    </para>

    <blockquote>
      <programlisting width="80"># XACML-based grid VO role mapping
XACMLmappingServiceUrl="https://gums.example.org:8443/gums/services/GUMSXACMLAuthorizationServicePort"
# Time in seconds to cache the mapping in memory
xacml-vo-mapping-cache-lifetime="180"</programlisting>
    </blockquote>

for a <ulink url="http://grid.racf.bnl.gov/GUMS/">GUMS</ulink> server, or, for an SCAS server,

    <blockquote>
      <programlisting width="80"># XACML-based grid VO role mapping
XACMLmappingServiceUrl="https://scas.europeansite.eu:8443"
# Time in seconds to cache the mapping in memory
xacml-vo-mapping-cache-lifetime="180"</programlisting>
    </blockquote>

    <para>
      As for the saml-vo-mapping, the first line containins the &url;
      for the web service.Replace the &url; with that of the site-specific
      GUMS or SCAS server. When using the "GUMSXACMLAuthorizationServicePort"
      (notice the difference in service name from that for the saml-vo-mapping)
      with a GUMS server, the service will only provide the username mapping
      and it will still be necesary to have the storage-authzdb file used in
      other plugins. See the above documentation <link linkend='cf-gplazma-authzdb'>
      Configuring storage-authzdb</link> for how to create the file. An SCAS server
      will return a UID, a primary GID, and secondary GIDS, but not a rootpath. A
      storage-authzdb file will be necesary to assign the rootpath. Since SCAS
      does not return a username, the convention in  &cell-gplazma; is to use "uid:gid"
      for the username, where uid is the string representation of the uid returned by
      SCAS, and gid is the string representation of the primary GID returned by SCAS.
      Thus a line such as
    </para>

    <blockquote>
      <programlisting width="80">authorize 13160:9767 read-write 13160 9767 / /data /</programlisting>
    </blockquote>

    <para>
      in <filename>/etc/grid-security/storage-authzdb</filename> will
      serve to assign the user mapped by SCAS to uid=13160 and primary
      gid=9767 the rootpath <filename>/data</filename>. It is best for
      consistency's sake to fill in the UID and GID fields with the
      same values as in the "uid:gid" field.  Additional secondary
      gids can be assigned by using comma-separated values in the GID
      field. Any gids there not already returned as secondary gids by
      SCAS will be added to the secondary gids list.
    </para>

    <para>
      The second line contains the value of the caching lifetime. In
      order to decrease the volume of requests to the XACML
      authorization (GUMS or SCAS) service, authorizations for the
      saml-vo-mapping method are by default cached for a period of
      time. To change the caching duration, modify the
      xacml-vo-mapping-cache-lifetime value in
      <filename>/opt/d-cache/etc/dcachesrm-gplazma.policy</filename>
    </para>

    <blockquote>
      <programlisting width="80">saml-vo-mapping-cache-lifetime="120"</programlisting>
    </blockquote>

    <para>
      To turn off cach caching, set the value to 0. For xacml-vo-mapping, the
      default value is 180 seconds.
    </para>

  </section>

  <section id="cf-gplazma-example">
    <title>An example policy file</title>

    <para>
      Here is an example of how a policy file might be set up.
    </para>

    <informalexample>
      <programlisting width="80"># Switches
xacml-vo-mapping="OFF"
saml-vo-mapping="ON"
kpwd="ON"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF"

# Priorities
xacml-vo-mapping-priority="5"
saml-vo-mapping-priority="1"
kpwd-priority="3"
grid-mapfile-priority="4"
gplazmalite-vorole-mapping-priority="2"

# dcache.kpwd
kpwdPath="/opt/d-cache/etc/dcache.kpwd"

# grid-mapfile
gridMapFilePath="/etc/grid-security/grid-mapfile"
storageAuthzPath="/etc/grid-security/storage-authzdb"

# SAML-based grid VO role mapping
mappingServiceUrl="https://fledgling09.fnal.gov:8443/gums/services/GUMSAuthorizationServicePort"
saml-vo-mapping-cache-lifetime="60"

# Built-in gPLAZMAlite grid VO role mapping
gridVoRolemapPath="/etc/grid-security/grid-vorolemap"
gridVoRoleStorageAuthzPath="/etc/grid-security/storage-authzdb"</programlisting>
    </informalexample>

    <para>
      In this case, &cell-gplazma; will attempt to authorize first
      through a GUMS server, and fall back to using
      <filename>dcache.kpwd</filename>. The mappingServiceUrl would
      have to be changed to a GUMS server appropriate for the site.
    </para>

  </section>
  </section>

  <section id="cf-gplazma-setup">
    <title>Configuring how other &dcache; components work with &cell-gplazma;</title>

    <para>
      The properties files are located in <filename
      class='directory'>/opt/d-cache/share/defaults/</filename>. All
      values can be redefined in
      <filename>/opt/d-cache/etc/dcache.conf</filename>. Do not modify
      any values here as your changes will be lost when you next
      upgrade. Changes of the properties require a restart of the cell.
    </para>

    <section>
      <title>The <filename>gPlazma.properties</filename> File</title>

      <para>
	This Java properties file contains default values for
	&cell-gplazma; configuration parameters.
      </para>

      <para>
	The number of concurrent requests to process is set as
      </para>
      <blockquote>
	<programlisting width="80">gPlazmaNumberOfSimutaneousRequests=30</programlisting>
      </blockquote>

      <para>
	 Setting this number too high may result in large spikes of
	 CPU activity and the potential to run out of memory. Setting
	 the number too low results in potentially slow login
	 activity.
      </para>

      <para>
	It is possible to specifiy to use &cell-gplazma; as a
	module. Nevertheless the default is
      </para>
      <blockquote>
	<programlisting width="80">useGPlazmaAuthorizationModule=false</programlisting>
      </blockquote>
      <para>
	 This property takes one of two values:
	 <literal>false</literal> or <literal>true</literal>.
	 Specifying <literal>false</literal> has no effect. Enabling &cell-gplazma; as a
	 module results in doors running their own &cell-gplazma;.
	 This has the advantage of distributing the CPU load but
	 requires additional maintenance. &cell-gplazma; as a module
	 may be enabled on a per-door basis.
      </para>

      <para>
	 Run a centralised &cell-gplazma; service
      </para>
      <blockquote>
	<programlisting width="80">useGPlazmaAuthorizationCell=true</programlisting>
      </blockquote>
      <para>
	This property takes one of two values,
	<literal>false</literal> or <literal>true</literal>,
	Specifying <literal>true</literal> if &dcache; is to run a
	single centralised &cell-gplazma;.  Doors may still be
	configured to use the &cell-gplazma; module.
      </para>

    </section>

  </section>


  <section id="cf-gplazma-direct">
    <title>Using Direct Calls of gPlazma Methods</title>

    <para>
      Cells may also call &cell-gplazma; methods as an alternative, or
      as a fallback, to using the &cell-gplazma; cell.
    </para>

    <section>
      <title>Operation without a &cell-gplazma; Cell</title>

      <para>
	If the &cell-gplazma; cell is not started, other cells can
	still authorize by calling &cell-gplazma; methods directly
	from a pluggable module. The &cell-gplazma; control files and
	host certificates are needed on the node from which
	authorization will take place. To invoke the &cell-gplazma;
	modules, modify the following line in
	<filename>gridftpdoorSetup</filename> or
	<filename>srmSetup</filename> to
      </para>

      <blockquote>
	<programlisting width="80">useGPlazmaAuthorizationModule=true</programlisting>
      </blockquote>

      <para>
	and make sure that the <literal>gplazmaPolicy</literal> line
	defines a valid &cell-gplazma; policy file on the node for
	which authorization is to occur:
      </para>

      <blockquote>
	<programlisting width="80">gplazmaPolicy=${ourHomeDir}/etc/dcachesrm-gplazma.policy</programlisting>
      </blockquote>


      <para>
	No adjustable timeout is available, but any blocking would
	likely be due to a socket read in the saml-vo-mapping plugin,
	which is circumvented by a built-in 30-second timeout.
      </para>
    </section>


    <section>
      <title>Using a &cell-gplazma; Cell with a Direct-Call
      Fallback</title>

      <para>
	Both a call to the &cell-gplazma; cell and the direct call of
	the &cell-gplazma; module may be specified. In that case,
	authentication will first be tried via the &cell-gplazma;
	cell, and if that does not succeed, authentication by direct
	invocation of &cell-gplazma; methods will be tried. Modify the
	following lines to:
      </para>

      <blockquote>
	<programlisting width="80">useGPlazmaAuthorizationModule=true
useGPlazmaAuthorizationCell=true</programlisting>
      </blockquote>

      <para>
	Make sure that the line for <filename>gplazmaPolicy</filename>
      </para>

      <blockquote>
	<programlisting width="80">gplazmaPolicy=${ourHomeDir}/etc/dcachesrm-gplazma.policy</programlisting>
      </blockquote>

      <para>
	set to a local policy file on the node. The &cell-gplazma;
	policy file on the &door-gridftp; or &srm; does not have to
	specify the same plugins as the &cell-gplazma; cell.
      </para>

    </section>
  </section>


  <section id="cf-gplazma-ops">
    <title>&cell-gplazma; Options</title>

      <section>
      <title>Validating User Attributes in &dcache; 1.9</title>

      <para>
	In version 1.9, VOMS attribute validation in &cell-gplazma;
	uses a method in which installation of the voms server
	certificate is not required. Instead the signature on an
	attribute is checked against the ca certificate that signed
	the voms server certificate.  To have &cell-gplazma; validate
	the proxy attributes in &dcache; 1.9, write configuration
	directories and "*.lsc" files in
	<filename>/etc/grid-security/vomsdir</filename> for each
	authorized voms server according to <ulink
	url="https://twiki.cern.ch/twiki/bin/view/LCG/VomsFAQforServiceManagers">these
	instructions</ulink> and in
	<filename>/opt/d-cache/etc/dcachesrm-gplazma.policy</filename>
	set
      </para>

	<programlisting width="80">vomsValidation="true"</programlisting>

      <para>
	As with previous versions, the default is
	<literal>false</literal>. Whether validation is on or not,
	there must be a non-empty <filename
	class="directory">/etc/grid-security/vomsdir</filename> on the
	node which is running &cell-gplazma;. It is enough to do
      </para>

      <screen>&prompt-root; <userinput>mkdir /etc/grid-security/vomsdir</userinput>
&prompt-root; <userinput>touch /etc/grid-security/vomsdir/empty-cert.pem</userinput></screen>

      <para>
      to create the non-empty directory.
      </para>

    </section>
  </section>

  <section id="cf-gplazma-webadmin-example">
    <title>&cell-gplazma; config example to work with authenticated webadmin</title>
	<para>
In this section an example configuration of &cell-gplazma; is presented to enable working with
&cell-webadmin; in authenticated mode and give a user admin-rights.
The <filename>/opt/d-cache/etc/dcachesrm-gplazma.policy</filename> file would look like this:
<programlisting width="80"># Switches
xacml-vo-mapping="OFF"
saml-vo-mapping="OFF"
kpwd="ON"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF"

# Priorities
xacml-vo-mapping-priority="5"
saml-vo-mapping-priority="1"
kpwd-priority="3"
grid-mapfile-priority="4"
gplazmalite-vorole-mapping-priority="2"

# Configurable Options for Plugins|Services
# #################################################################################
# Path to local or remotely accessible authorization repositories|services.
# A valid path is required if corresponding switch is ON.

# dcache.kpwd
kpwdPath="/opt/d-cache/etc/dcache.kpwd"

# #################################################################################
# END</programlisting>

The <filename>/opt/d-cache/etc/dcache.kpwd</filename> file would look like this:
<programlisting width="80">version 2.1

mapping "/C=DE/O=GermanGrid/OU=DESY/CN=Jan Schaefer" jans
# the following are the user auth records
login jans read-write 17506 1000 / / /
 /C=DE/O=GermanGrid/OU=DESY/CN=Jan Schaefer

# set pwd
passwd jans 8402480 read-write 17506 1000 / / /</programlisting>

This maps the subject part of a Grid-Certificate
<literal>subject=/C=DE/O=GermanGrid/OU=DESY/CN=Jan Schaefer</literal>
to the User <systemitem class="username">jans</systemitem> and the entry
<programlisting width="80">login jans read-write 17506 1000 / / /
 /C=DE/O=GermanGrid/OU=DESY/CN=Jan Schaefer</programlisting>
applies unix-like values to <systemitem class="username">jans</systemitem>,
most important is the <literal>1000</literal>, because it is the assigned
GID. This must match the value af the <varname>webadminAdminGid</varname> configured in your webadmin.
This is sufficient for login using a certificate. The entry
<programlisting width="80">passwd jans 8402480 read-write 17506 1000 / / /</programlisting>
 enables Username/Password login, such as a valid login would be user
 <systemitem class="username">jans</systemitem> with the
 password <literal>blub</literal>. The password <literal>blub</literal> is written in an
 obfuscated fashion, as <literal>8402480</literal> with the
 algorithm of the kpwd file (also see <xref linkend="cf-gplazma-kpwd"/>).
 Again the <literal>1000</literal> here is the assigned GID.
	</para>
  </section>
</chapter>
