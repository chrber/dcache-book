<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;

<!ENTITY gp1-vorolemap "<literal>gplazmalite-vorole-mapping</literal> plug-in">
<!ENTITY gp1-gridmap "<literal>grid-mapfile</literal> plug-in">
<!ENTITY gp1-saml "<literal>saml-vo-mapping</literal> plug-in">
<!ENTITY gp1-xacml "<literal>xacml-vo-mapping</literal> plug-in">
<!ENTITY gp1-kpwd "<literal>kpwd</literal> plug-in">
<!ENTITY gp2-vorolemap "<literal>vorolemap</literal> plug-in">
<!ENTITY gp2-authzdb "<literal>authzdb</literal> plug-in">
<!ENTITY gp2-nis "<literal>nis</literal> plug-in">
<!ENTITY gp2-gridmap "<literal>gridmap</literal> plug-in">
<!ENTITY gp2-argus "<literal>argus</literal> plug-in">
<!ENTITY gp2-kpwd "<literal>kpwd</literal> plug-in">
<!ENTITY gp2-x509 "&x509; plug-in">
<!ENTITY gp2-voms "<literal>voms</literal> plug-in">

<!ENTITY auth "<literal>auth</literal>">
<!ENTITY map "<literal>map</literal>">
<!ENTITY account "<literal>account</literal>">
<!ENTITY session "<literal>session</literal>">
<!ENTITY identity "<literal>identity</literal>">

<!ENTITY pam-optional "<literal>optional</literal>">
<!ENTITY pam-requisite "<literal>requisite</literal>">
<!ENTITY pam-required "<literal>required</literal>">
<!ENTITY pam-sufficient "<literal>sufficient</literal>">

<!ENTITY uid "<acronym>UID</acronym>">
<!ENTITY gid "<acronym>GID</acronym>">
<!ENTITY dn "<acronym>DN</acronym>">
<!ENTITY fqan "<acronym>FQAN</acronym>">
<!ENTITY pam "<acronym>PAM</acronym>">
<!ENTITY crl "<acronym>CRL</acronym>">
<!ENTITY saml "<acronym>SAML</acronym>">
<!ENTITY xacml "<acronym>XACML</acronym>">

<!ENTITY nis "<literal>NIS</literal>">
<!ENTITY ldap "<systemitem class='protocol'>LDAP</systemitem>">

<!ENTITY argus "<productname>ARGUS</productname>">
<!ENTITY scas "<productname>SCAS</productname>">
<!ENTITY gums  "<productname>GUMS</productname>">
<!ENTITY globus "<productname>GLOBUS</productname>">
]>

<chapter id="cf-gplazma">

  <title>Authorization in &dcache;</title>

  <para>
    &dcache; has an open interface to work with different authorization
    services. With &dcache; you get two implementations of this interface:
    &cell-gplazma1; and &cell-gplazma2;. Both are described in this chapter.
    &cell-gplazma; is an acronym for Grid-aware PLuggable AuthorZation
    Management.  Both implementations come with various plug-ins that implement
    different authorization methods (e.g., Username/Password).  &cell-gplazma1;
    is grown over the last few years and provides with some older authorization
    methods &cell-gplazma2; does not. On the other hand: &cell-gplazma2; has a
    more modular structure, offers the possibility to add custom plug-ins and
    is able to make use of some authorization techniques you cannot use with
    &cell-gplazma1; (i.e., centralised banning of users). Also &cell-gplazma2;
    has an new &pam; like configuration system that makes configuration very
    easy.
  </para>

  <para>
    Read the following sections and see which version matches your needs best.
    If both do, we recommend to use &cell-gplazma2;. For legacy reasons version
    <literal>1</literal> is used as default. To set the version set
    <varname>gplazma.version</varname> property in
    <filename>&path-ode-ed;/dcache.conf</filename> to
    <literal>1</literal> or <literal>2</literal>.
  </para>

  <informalexample>
    <programlisting>gplazma.version = 2</programlisting>
  </informalexample>

  <para>
    The recommended way to specify the version is to set it in <filename>dcache.conf</filename>,
    but if you prefer you might as well do it in the layout file.
  </para>

  <informalexample>
    <programlisting>[gPlazmaDomain]
[gPlazmaDomain/gplazma]
gplazma.version = 2</programlisting>
  </informalexample>
  <note>
    <para>
      If you don't explicitly set the version to <literal>2</literal>
      then &cell-gplazma1; will be used.
    </para>
  </note>
  <section id="cf-gplazma-basics">
    <title>Basics</title>

    <para>
      Though it is possible to allow anonymous access to &dcache; it is usually
      desirable to authenticate users. The user then has to connect to one of
      the different doors (e.g., &door-gridftp;, &door-dcap;) and login with
      credentials that prove his identity. These credentials usually are &x509;
      certificates, but dCache also supports username/password and kerberos
      authentication.
    </para>

    <para>
      The door collects the credential information from the user and sends a
      login request to the configured authorization service (in most cases this
      is &cell-gplazma; and we will go on assuming it is). Within
      &cell-gplazma; the configured plug-ins try to verify the users identity
      and determine his access rights.  From this a response is created that is
      then sent back to the door. The response may also contain additional user
      information like &uid;, &gid; and the path to the data directory. While
      for authentication usually more global services (e.g., &argus;) may be
      used, the mapping to site specific &uid;s has to be configured on a per
      site basis. Both versions of &cell-gplazma; come with several plug-ins.
      Their configuration is described in <xref
          linkend="cf-gplazma-plug-inconfig"/>.
    </para>
  </section>

  <section id="cf-gplazma-gp1">
    <title>&cell-gplazma1;</title>
    <para>
      &cell-gplazma1; comes with support for five different authentication and
      mapping methods. Each method is implemented in a plug-in-like module.
    </para>
    <section id="cf-gplazma-gp1-configuration">
      <title>Configuration</title>
      <para>
        The &cell-gplazma; cell can be called from the &door-gridftp; and the
        &door-dcap; and the &serv-srm; server.
      </para>
      <para>
        This section describes how to configure &cell-gplazma1; in general. You
        also need to adjust the plug-in specific configuration files, depending
        on which authorization methods you choose to employ. The configuration
        of the plug-ins is described later in this chapter, since the files are
        also used by &cell-gplazma2;.
      </para>
      <para>
        The &cell-gplazma; policy, located in the
        <filename>&path-ode-ed;/dcachesrm-gplazma.policy</filename> file,
        controls the authorization plug-ins to be used (<literal>ON</literal>
        or <literal>OFF</literal> for each plug-in) and the order of their
        execution.
      </para>
      <informalexample>
        <programlisting># Switches
xacml-vo-mapping="OFF"
saml-vo-mapping="ON"
kpwd="ON"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF" </programlisting>
        <para>
          The order of execution is specified by assigning a different number to
          each plug-in, such as
        </para>
        <programlisting># Priorities
xacml-vo-mapping-priority="5"
saml-vo-mapping-priority="1"
kpwd-priority="3"
grid-mapfile-priority="4"
gplazmalite-vorole-mapping-priority="2" </programlisting>
        <para>
          In the above example, only the &gp1-saml; and the &gp1-kpwd; are
          activated (i.e., switched <literal>ON</literal>).  Of those the
          &gp1-saml; would be tried first, because it was assigned a higher
          priority.  Note that the higher the value the
          <emphasis>lower</emphasis> is the plugins priority. If authorization
          was denied for that method, or if the authentication method itself
          failed, then the next activated plugin with the next lower priority
          would be tried. In this example this would be the &gp1-kpwd;. If the
          &gp1-vorolemap; would also be activated, it would be tried after the
          &gp1-saml; and before the &gp1-kpwd;.
        </para>
      </informalexample>
      <para>
        Activating more than one plug-in allows plug-ins to be used as
        fall-back for another plug-ins that may fail. It also allows for the
        authorization of special users who may be denied by the other methods.
      </para>

      <para>
        After the general configuration the policy file also contains a section
        for each of the plug-ins with plug-in specific configuration. These
        sections are described in the documentation for each plug-in, as
        follows. You may delete or comment out the lines specifing the
        priorities and configuration for unused plug-ins.
      </para>

      <para>
        Here is an example of how a policy file might be set up.
      </para>

      <informalexample>
        <programlisting># Switches
xacml-vo-mapping="OFF"
saml-vo-mapping="ON"
kpwd="ON"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF"

# Priorities
saml-vo-mapping-priority="1"
kpwd-priority="3"

# dcache.kpwd
kpwdPath="&path-ode-eg;/dcache.kpwd"

# SAML-based grid VO role mapping
mappingServiceUrl="https://fledgling09.fnal.gov:8443/gums/services/GUMSAuthorizationServicePort"
saml-vo-mapping-cache-lifetime="60"</programlisting>

      <para>
        In this case, &cell-gplazma1; will attempt to authorize first
        through a &gums; server, and fall back to using
        <filename>dcache.kpwd</filename>. The <varname>mappingServiceUrl</varname>
        would have to be changed to a &gums; server appropriate for the site.
      </para>
      </informalexample>

      <section id="cf-gplazma-ops">
        <title>Configuring &voms; Attribute Validation</title>

        <para>
          &voms; attribute validation in &cell-gplazma1; does not
          require &voms; server certificates.  Instead the signature
          of an attribute is checked against the CA Certificate that
          signed the &voms; server certificate. To have
          &cell-gplazma1; validate the proxy attributes in &dcache;,
          write configuration directories and
          <filename>*.lsc</filename> files in
          <filename>/etc/grid-security/vomsdir</filename> for each
          authorized &voms; server according to <ulink
          url="https://twiki.cern.ch/twiki/bin/view/LCG/VomsFAQforServiceManagers">
          these instructions</ulink> and set the
          <varname>vomsValidation</varname> in
          <filename>&path-ode-ed;/dcachesrm-gplazma.policy</filename>
          to <literal>true</literal>.
        </para>
	<note>
	  <para>
	    The legacy method of using <filename>*.pem</filename>
	    files which contain the &voms; server certificates is
	    still supported. To achieve this add the
	    <filename>*.pem</filename> file which contains the
	    certificate of the &voms; server to the directory
	    <filename
	    class='directory'>/etc/grid-security/vomsdir/</filename>.
	  </para>
	  <para>
	    Note that it is recommended to use the
	    <filename>*.lsc</filename> files for the &voms; attribute
	    validation as with this method you don't need to keep the
	    &voms; server certificate up to date.
	  </para>
	</note>
        <para>
          The default is to validate the attributes. In both cases there must
          be a non-empty <filename
              class="directory">/etc/grid-security/vomsdir</filename> directory
          on the node which is running &cell-gplazma1;. To create a working
          dummy directory it is enough to do
        </para>

        <screen>&prompt-root; <userinput>mkdir -p /etc/grid-security/vomsdir</userinput>
&prompt-root; <userinput>touch /etc/grid-security/vomsdir/empty-cert.pem</userinput></screen>

      </section>
      <section id="cf-gplazma-gp1-plug-ins">
        <title>plug-ins</title>
        <para>
          This section describes the five different authentication methods for
          &cell-gplazma1;.  Four of them share the common file
          <filename>storage-authzdb</filename> for mapping usernames to
          &uid;/&gid; and provide additional user specific path information.
          The format of this file is described in <xref
              linkend="cf-gplazma-plug-inconfig-authzdb"/>.
        </para>
        <section id="cf-gplazma-gp1-plug-ins-vorolemap">
          <title>&gp1-vorolemap;</title>
          <para>
            The &gp1-vorolemap; maps a combination of &dn; and &fqan; (Fully
            Qualified Attribute Name) to a username using a
            <filename>vorolemap</filename> file. The subsequent mappings to
            &uid; and &gid; is done via the <filename>storage-authzdb</filename>
            file.
          </para>
        </section>

        <section id="cf-gplazma-gp1-plug-ins-kpwd">
          <title>&gp1-kpwd;</title>
          <para>
            The &gp1-kpwd; uses a <filename>kpwd</filename> file for
            authorization and mapping.  This is the <quote>legacy</quote>
            method and is recommended only for testing and/or rather small and
            independent sites or as a fallback method. The file contains
            different records for authorization and mappings.  Its format is
            documented within the sample file in
            <filename>&path-ods-usd;/examples/gplazma/dcache.kpwd</filename>.
            In the first step a &dn; or &kerberos; principal is mapped to a
            username. To authorize the user has to provide the password
            belonging to the mapped username to get &uid; and &gid; and user
            path information.
          </para>
        </section>

        <section id="cf-gplazma-gp1-plug-ins-gridmap">
          <title>&gp1-gridmap;</title>
          <para>
            This plug-in uses a <literal>grid-mapfile</literal> to map &dn;s to
            usernames. The subsequent mapping to &uid;/&gid; is done via the
            <link linkend="cf-gplazma-plug-inconfig-authzdb">
              <filename>storage-authzdb</filename>
            </link> file.
          </para>
        </section>

        <section id="cf-gplazma-gp1-plug-ins-saml">
          <title>&gp1-saml;</title>
          <para>
            This plug-in requests &dn; to username mappings from a &gums;
            server (Grid User Management System). The &gums; service may run an
            extension which returns the &uid;/&gid; plus the additional user
            path information. Without this extension &uid;and &gid; are
            obtained via the <link linkend="cf-gplazma-plug-inconfig-authzdb">
              <filename>storage-authzdb</filename>
            </link> file.
          </para>
        </section>

        <section id="cf-gplazma-gp1-plug-ins-xacml">
          <title>&gp1-xacml;</title>
          <para>
            This plug-in requests &dn; to username mappings from a &gums;
            server with &xacml; support. The &gums; service may run an
            extension which returns the &uid;/&gid; plus the additional user
            path information. Without this extension &uid; and &gid; are
            obtained via the <filename>storage-authzdb</filename> (see <xref
                linkend="cf-gplazma-plug-inconfig-authzdb"/>) file.
          </para>
        </section>
      </section>
    </section>
  </section>
  <section id="cf-gplazma-gp2">
    <title>&cell-gplazma2;</title>
    <para>
      Some newer requirements (e.g., reverse mapping, banning) could not be
      integrated into &cell-gplazma1; without making major changes on its
      architecture. Since the effort would have only beed slightly less than a
      reimplementation, we decided to keep the established &cell-gplazma1; and
      create a new version from scratch that could offer modern features for
      those who already require them. In the long term &cell-gplazma2; is meant
      to replace &cell-gplazma1; completely. For this reason it supports most
      of the latter's authentication methods. But not only offers
      &cell-gplazma2; new features, it also comes with flexible architecture
      that can be extended by plug-ins. Since many authentication methods
      share some functionality (e.g., use <filename>storage-authdb</filename>)
      the same functionality that was covered by one plug-in in version 1 is
      now divided into several plug-ins.  This way, if for example you used
      the &gp1-vorolemap; of &cell-gplazma1; you will now need to use
      the &gp2-vorolemap; and the &gp2-authzdb; to get the same functionality.
      Currently &cell-gplazma2; comes with seven plug-ins that can be used to
      cover a wide range of systems.  Check if yours is among those.  Some
      plug-ins are designed for backwards compatibility and will work with your
      existing files (e.g., <filename>vorolemap</filename>) and some offer
      completely new functionality (e.g., &nis;/&ldap; mapping, &argus;
      banning).
    </para>
    <para>
      &cell-gplazma2; has several advantages over &cell-gplazma1; in means of
      design, flexibility and functionality.  Its behaviour is easily
      configurable with a &pam;-style configuration file, that will be described in
      detail in the next section.
    </para>
    <section id="cf-gplazma-gp2-configuration">
      <title>Configuration</title>
      <para>
        To use &cell-gplazma2;, the first thing you have to do is to activate
        it by setting <varname>gplazma.version</varname> to
        <literal>2</literal> in <filename>dcache.conf</filename>. This is
        described in the first part of this chapter.  Afterwards edit
        <filename>&path-ode-ed;/gplazma.conf</filename> with your
        favourite editor (e.g., vim) to match your requirements. The plug-ins
        will be used in the order &auth;, &map;, &account; and &session;.
        Within these groups they are used in the order they are specified.
      </para>
      <para>
        It will look something like this:
        <informalexample>
          <programlisting># Some comment
auth    optional  x509
auth    optional  voms
map     requisite vorolemap
map     requisite authzdb authzdb=/etc/grid-security/authzdb
session requisite authzdb</programlisting>
        </informalexample>
      </para>
      <para>
        Each line consists of one of the keywords &auth;, &map;, &account;,
        &session; or &identity; followed by one of the modifiers &pam-optional;,
        &pam-required;, &pam-requisite; or &pam-sufficient;, the name of the
        plug-in and a list of parameters. Empty lines and lines starting with a
        <literal>#</literal> are comments and will be ignored.  With the first
        keyword you specify the type of the plugin (some plug-ins implement
        several types) and the modifier defines how success or failure of the
        plugin is handled. The configured plugins are then combined into two
        stacks. The first is processed each time a authentication decision has
        to be made and the second stack is used to perform mapping and reverse
        mapping. The first stack consists of &auth;, &map;, &account; and
        &session; plugins, the second one only of &identity; plugins.
      </para>
      <para>
        <!--
        <cmdsynopsis>
          <group>
            <option>auth</option>
            <option>map</option>
            <option>account</option>
            <option>session</option>
            <option>identity</option>
          </group>
          <group>
            <option>optional</option>
            <option>required</option>
            <option>requisite</option>
            <option>sufficient</option>
          </group>
          <arg choice='plain'><replaceable>plugin</replaceable></arg>
          <arg rep='repeat' choice='plain'><replaceable>key=value</replaceable></arg>
        </cmdsynopsis>
        -->
        <programlisting>auth|map|account|session|identity optional|required|requisite|sufficient <replaceable>plug-in</replaceable> ["<replaceable>key</replaceable>=<replaceable>value</replaceable>" ...]</programlisting>
      </para>
      <para>
        <variablelist>
          <varlistentry>
            <term>&auth;</term>
            <listitem>
              <para>
                &auth;-plug-ins are used to read the users public and private
                credentials and ask some authority, if those are valid for
                accessing the system.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>&map;</term>
            <listitem>
              <para>
                &map;-plug-ins map the user information obtained in the &auth; step to
                &uid; and &gid;s. This may also be done in several steps (e.g., the
                &gp2-vorolemap; maps the users &dn;+&fqan; to a username which is
                then mapped to &uid;/&gid;s by the &gp2-authzdb;.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>&account;</term>
            <listitem>
              <para>
                &account;-plug-ins verify the validity of a possibly mapped identity
                of the user and may reject the login depending on information
                gathered within the map step.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>&session;</term>
            <listitem>
              <para>
                &session; plug-ins usually enrich the session with additional
                attributes like the user's home directory.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>&identity;</term>
            <listitem>
              <para>
                &identity; plug-ins have have two functions to map from usernames to
                &uid; and &gid; and vice versa.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <para>
        The meaning of the modifiers follow the &pam; specification:
        <variablelist>
          <varlistentry>
            <term>&pam-optional;</term>
            <listitem>
              <para>
                The success or failure of this plug-in is only important if it
                is the only plug-in in the stack associated with this type.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>&pam-sufficient;</term>
            <listitem>
              <para>
                Success of such a plug-in is enough to satisfy the
                authentication requirements of the stack of plug-ins (if a
                prior required plug-in has failed the success of this one is
                ignored). A failure of this plug-in is not deemed as fatal for
                the login attempt. If the plug-in succeeds &cell-gplazma2;
                immediately proceeds with the next plug-in type or returns
                control to the door if this was the last stack.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>&pam-required;</term>
            <listitem>
              <para>
                Failure of such a plug-in will ultimately lead to
                &cell-gplazma2; returning failure but only after the remaining
                plug-ins for this type have been invoked.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>&pam-requisite;</term>
            <listitem>
              <para>
                Like &pam-required;, however, in the case that such a plug-in
                returns a failure, control is directly returned to the door.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>

      <section id="cf-gplazma-gp2-configuration-plug-ins">
        <title>plug-ins</title>
        <para>
          &cell-gplazma2; functionality is configured by combining different types of
          plug-ins to work together in a way that matches your requirements. For
          this purpose there are four different types of plug-ins. These types
          correspond to the keywords &auth;, &map;, &account;, &session; and &identity;
          from the previous section.
        </para>

        <section id="cf-gplazma-gp2-configuration-plug-ins-authzdb">
          <title>authzdb</title>
          <para>
            The &gp2-authzdb; implementation offers &map; and &session;
            functionality. As a &map;-plug-in it takes a username and maps it
            to &uid;/&gid; using the <filename>storage-authzdb</filename> file.
          </para>
          <informaltable frame='all'>
            <tgroup cols='3' align='left' colsep='1' rowsep='1'>
              <colspec colname='parameter' colwidth='*'/>
              <colspec colname='meaning' colwidth='1.5*'/>
              <colspec colname='default' colwidth='2.6*'/>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Meaning</entry>
                  <entry>Default</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><varname>authzdb</varname></entry>
                  <entry>Path to <filename>storage-autzdb</filename></entry>
                  <entry><filename>/etc/grid-security/storage-authzdb</filename></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="cf-gplazma-gp2-configuration-plug-ins-argus">
          <title>argus</title>
          <para>
            The &gp2-argus; is an &account; plug-in, currently used for banning
            users by their &dn;. It talks to your site's &argus; system (see
            <ulink url="https://twiki.cern.ch/twiki/bin/view/EGEE/AuthorizationFramework">
              https://twiki.cern.ch/twiki/bin/view/EGEE/AuthorizationFramework
            </ulink>) to check for banned users.
          </para>
          <informaltable frame='all'>
            <tgroup cols='3' align='left' colsep='1' rowsep='1'>
              <colspec colname='parameter' colwidth='*'/>
              <colspec colname='meaning' colwidth='1.5*'/>
              <colspec colname='default' colwidth='3.0*'/>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Meaning</entry>
                  <entry>Default</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><varname>HostCert</varname></entry>
                  <entry>Path to host certificate</entry>
                  <entry><filename>/etc/grid-security/hostcert.pem</filename></entry>
                </row>
                <row>
                  <entry><varname>HostKey</varname></entry>
                  <entry>Path to host key</entry>
                  <entry><filename>/etc/grid-security/hostkey.pem</filename></entry>
                </row>
                <row>
                  <entry><varname>KeyPass</varname></entry>
                  <entry>Password for host key</entry>
                  <entry></entry>
                </row>
                <row>
                  <entry><varname>TrustMaterial</varname></entry>
                  <entry>Path to CA certificates</entry>
                  <entry><filename class="directory">/etc/grid-security/certificates</filename></entry>
                </row>
                <row>
                  <entry><varname>PEPEndpoint</varname></entry>
                  <entry>&url; of PEP service</entry>
                  <entry><uri>https://localhost:8154/authz</uri></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="cf-gplazma-gp2-configuration-plug-ins-gridmap">
          <title>GridMap</title>
          <para>
            The &gp2-gridmap; is a mapping plug-in. It maps &globus; identities
            and &kerberos; identities to a username.
          </para>
          <informaltable frame='all'>
            <tgroup cols='3' align='left' colsep='1' rowsep='1'>
              <colspec colname='parameter' colwidth='*'/>
              <colspec colname='meaning' colwidth='1.5*'/>
              <colspec colname='default' colwidth='3.0*'/>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Meaning</entry>
                  <entry>Default</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><varname>gridmap</varname></entry>
                  <entry>Path to <literal>grid-mapfile</literal></entry>
                  <entry><filename>/etc/grid-security/grid-mapfile</filename></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="cf-gplazma-gp2-configuration-plug-ins-kpwd">
          <title>kpwd</title>
          <para>
            The &gp2-kpwd; has &auth;, &map; and &session; capabilities. It
            authorizes users by username and password, by pairs of &dn; and
            &fqan; and by &kerberos; principals. As a &map; plug-in it maps
            usernames to &uid; and &gid;. And as a &session; plug-in it adds
            root and home path information to the session based on the user's
            username.
          </para>
          <informaltable frame='all'>
            <tgroup cols='3' align='left' colsep='1' rowsep='1'>
              <colspec colname='parameter' colwidth='*'/>
              <colspec colname='meaning' colwidth='1.5*'/>
              <colspec colname='default' colwidth='3.0*'/>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Meaning</entry>
                  <entry>Default</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><varname>pwdfile</varname></entry>
                  <entry>Path to <filename>dcache.kpwd</filename></entry>
                  <entry><filename>&path-ode-eg;/dcache.kpwd</filename></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="cf-gplazma-gp2-configuration-plug-ins-voms">
          <title>voms</title>
          <para>
            The &gp2-voms; is a &auth; plug-in. It can be used to verify &x509;
            certificates. It takes the certifcates and checkes their validity
            by testing them against the trusted CAs. The verified certificates
            are then stored and passed on to the other plug-ins in the stack.
          </para>
          <informaltable frame='all'>
            <tgroup cols='3' align='left' colsep='1' rowsep='1'>
              <colspec colname='parameter' colwidth='*'/>
              <colspec colname='meaning' colwidth='1.5*'/>
              <colspec colname='default' colwidth='3.0*'/>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Meaning</entry>
                  <entry>Default</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><varname>cadir</varname></entry>
                  <entry>Path to ca certificates</entry>
                  <entry><filename>/etc/grid-security/certificates</filename></entry>
                </row>
                <row>
                  <entry><varname>vomsdir</varname></entry>
                  <entry>Path to <filename>vomsdir</filename></entry>
                  <entry><filename>/etc/grid-security/vomsdir</filename></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="cf-gplazma-gp2-configuration-plug-ins-vorolemap">
          <title>vorolemap</title>
          <para>
            The &gp2-voms; is a &map; plug-in. It can be used to map pairs
            of &dn; and &fqan; to a username via a <link
                linkend="cf-gplazma-plug-inconfig-vorolemap-gridvorolemap">vorolemap</link>
            file.
          </para>
          <informaltable frame='all'>
            <tgroup cols='3' align='left' colsep='1' rowsep='1'>
              <colspec colname='parameter' colwidth='*'/>
              <colspec colname='meaning' colwidth='1.5*'/>
              <colspec colname='default' colwidth='3.0*'/>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Meaning</entry>
                  <entry>Default</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><varname>vorolemap</varname></entry>
                  <entry>Path to <filename>vorolemap</filename></entry>
                  <entry><filename>/etc/grid-security/vorolemap</filename></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section id="cf-gplazma-gp2-configuration-plug-ins-x509">
          <title>&gp2-x509;</title>

          <para>
            The &gp2-x509; is a &auth; plug-in that extracts &x509;
            certificate chains from the credentials of a user to be used by
            other plug-ins.
          </para>

        </section>
      </section>
    </section>
  </section>
  <section id="cf-gplazma-certificates">
    <title>Using &x509; Certificates</title>
    <para>
      Most plug-ins of &cell-gplazma; support &x509; certificates for authentication and
      authorisation. &x509; certificates are used to identify entities (e.g., persons, hosts)
      in the Internet. The certificates contain a &dn; (Distinguished Name) that uniquely
      describes the entity. To give the certificate credibility it is issued by a CA (Certificate
      Authority) which checks the identity upon request of the certificate (e.g., by
      checking the persons id).
      For the use of &x509; certificates with &dcache; your users will have to request a
      certificate from a CA you trust and you need host certificates for every host of your
      &dcache; instance.
    </para>

    <section id="cf-gplazma-certificates-cacerts">
      <title>CA Certificates</title>
      <para>
        To be able to locally verify the validity of the certificates, you need
        to store the CA certificates on your system. Most operating systems
        come with a number of commercial CA certificates, but for the
        <emphasis>Grid</emphasis> you will need the certificates of the Grid
        CAs. For this, CERN packages a number of CA certificates. These are
        deployed by most grid sites. By deploying these certificates, you state
        that you trust the CA's procedure for the identification of individuals
        and you agree to act promptly if there are any security issues.
      </para>
      <para>
	    To install the CERN CA certificates follow the following steps:
      </para>
      <screen>&prompt-root; <userinput>cd /etc/yum.repos.d/</userinput>
&prompt-root; <userinput>wget http://grid-deployment.web.cern.ch/grid-deployment/glite/repos/3.2/lcg-CA.repo</userinput>
&prompt-root; <userinput>yum install lcg-CA</userinput></screen>
      <para>
        This will create the directory <filename class='directory'>/etc/grid-security/certificates</filename>
        which contains the Grid CA certificates.
      </para>
      <para>
        Certificates which have been revoked are collected in certificate revocation lists
        (&crl;s). To get the &crl;s install the <command>fetch-crl</command> command as described
        below.
      </para>
      <screen>&prompt-root; <userinput>yum install fetch-crl</userinput>
&prompt-root; <userinput>/usr/sbin/fetch-crl</userinput></screen>
      <para>
        <command>fetch-crl</command> adds &x509; &crl;s to <filename
            class='directory'>/etc/grid-security/certificates</filename>.
        It is recommended to set up a cron job to periodically update the &crl;s.
      </para>
    </section>

    <section id="cf-gplazma-certificates-usercert">
      <title>User Certificate</title>
      <para>
        If you do not have a valid grid user certificate yet, you have to
        request one from your CA. Follow the instructions from your CA on how to
        get a certificate. After your request was accepted you will get a URL
        pointing to your new certificate. Install it into your browser to be
        able to access grid resources with it.  Once you have the certificate
        in your browser, make a backup and name it
        <filename>userCertificate.p12</filename>.  Copy the user certificate to
        the directory <filename class='directory'>~/.globus/</filename> on your
        worker node and convert it to <filename>usercert.pem</filename> and
        <filename>userkey.pem</filename> as described below.
      </para>

      <screen>&prompt-user; <userinput>openssl pkcs12 -clcerts -nokeys -in <replaceable>userCertificate</replaceable>.p12 -out usercert.pem</userinput>
Enter Import Password:
MAC verified OK</screen>
      <para>
        During the backup your browser asked you for a password to encrypt the
        certificate. Enter this password here when asked for a password.  This
        will create your user certificate.
      </para>

      <screen>&prompt-user; <userinput>openssl pkcs12 -nocerts -in <replaceable>userCertificate</replaceable>.p12 -out userkey.pem</userinput>
Enter Import Password:
MAC verified OK
Enter PEM pass phrase:</screen>
      <para>
        In this step you need to again enter the backup password. When asked
        for the <acronym>PEM</acronym> pass phrase choose a secure password.
        If you want to use your key without having to type in the pass phrase
        every time, you can remove it by executing the following command.
      </para>
      <screen>&prompt-root; <userinput>openssl rsa -in userkey.pem -out userkey.pem</userinput>
Enter pass phrase for userkey.pem:
writing RSA key</screen>
      <para>
        Now change the file permissions to make the key only readable by you and
        the certificate world readable and only writable by you.
      </para>
      <screen>&prompt-root; <userinput>chmod 400 userkey.pem</userinput>
        &prompt-root; <userinput>chmod 644 usercert.pem</userinput></screen>
    </section>

    <section id="cf-gplazma-certificates-hostcert">
      <title>Host Certificate</title>
      <para>
        To request a host certificate for your server host, follow again the
        instructions of your CA.
      </para>
      <para>
        The conversion to <filename>hostcert.pem</filename> and
        <filename>hostkey.pem</filename> works analogous to the user
        certificate. For the hostkey you have to remove the pass phrase. How to
        do this is also explained in the previous section. Finally copy the
        <filename>host*.pem</filename> files to
        <filename>/etc/grid-security/</filename> as <literal>root</literal> and
        change the file permissions in favour of the user running the grid
        application.
      </para>
    </section>

    <section id="cb-voms-proxy-glite">
      <title>&voms; Proxy Certificate</title>
      <para>
        For very large groups of people, it is often more convenient to
        authorise people based on their membership of some group. To identify
        that they are a member of some group, the certificate owner can create a
        new short-lived &x509; certificate that includes their membership of
        various groups. This short-lived certificate is called a
        proxy-certificate and, if the membership information comes from a &voms;
        server, it is often referred to as a &voms;-proxy.
      </para>

      <screen>&prompt-root; <userinput>cd /etc/yum.repos.d/</userinput>
&prompt-root; <userinput>wget http://grid-deployment.web.cern.ch/grid-deployment/glite/repos/3.2/glite-UI.repo</userinput>
&prompt-root; <userinput>yum install glite-security-voms-clients</userinput></screen>

      <section id="cf-gplazma-certificates-voms-proxy-init">
        <title><command>Creating a &voms; proxy</command></title>
        <para>
          To create a &voms; proxy for your user certificate you need to
          execute the <command>voms-proxy-init</command> as a user.
        </para>

        <informalexample>
          <screen>&prompt-user; <userinput>export PATH=/opt/glite/bin/:$PATH</userinput>
&prompt-user; <userinput>voms-proxy-init</userinput>
Enter GRID pass phrase:
Your identity: /C=DE/O=GermanGrid/OU=DESY/CN=John Doe

Creating proxy ........................................................................Done
Your proxy is valid until Mon Mar  7 22:06:15 2011</screen>
        </informalexample>

        <section id="cf-gplazma-certificates-voms-proxy-init-voms">
          <title>Certifying your membership of a VO</title>
          <para>
            You can certify your membership of a VO by using the command
            <command>voms-proxy-init -voms
              <replaceable>yourVO</replaceable></command>. This is useful as in
            &dcache; authorization can be done by VO (see <xref
                linkend='cf-gplazma-plug-inconfig-voauth'/>). To be able to use
            the extension <command>-voms
              <replaceable>yourVO</replaceable></command> you need to be able
            to access &voms; servers. To this end you need the the &voms; server's
            and the CA's DN. Create a file
            <filename>/etc/grid-security/vomsdir/<replaceable>VO</replaceable>/<replaceable>hostname</replaceable>.lsc</filename>
            per &voms; server containing on the 1st line the &voms; server's DN and
            on the 2nd line, the corresponding CA's DN. The name of this file
            should be the fully qualified hostname followed by an
            <filename>.lsc</filename> extension and the file must appear in a
            subdirectory <filename
                class='directory'>/etc/grid-security/vomsdir/<replaceable>VO</replaceable></filename>
              for each VO that is supported by that &voms; server and by the
              site.
          </para>

          <para>
            At <ulink url="http://operations-portal.egi.eu/vo" /> you
            can search for a VO and find this information.
          </para>

          <informalexample>
            <para>
              For example, the file /etc/grid-security/vomsdir/desy/grid-voms.desy.de.lsc contains:
            </para>
            <programlisting>/C=DE/O=GermanGrid/OU=DESY/CN=host/grid-voms.desy.de
/C=DE/O=GermanGrid/CN=GridKa-CA</programlisting>
            <para>
              where the first entry is the DN of the DESY &voms; server
              and the second entry is the DN of the CA which signed the
              DESY &voms; server's certificate.
            </para>
          </informalexample>

          <para>
            In addition, you need to have a file
            <filename>/opt/glite/etc/vomses</filename> containing your VO's &voms; server.
          </para>

          <informalexample>
            <para>
              For DESY the file <filename>/opt/glite/etc/vomses</filename> should
              contain the entry
            </para>
            <programlisting>"desy" "grid-voms.desy.de" "15104" "/C=DE/O=GermanGrid/OU=DESY/CN=host/grid-voms.desy.de" "desy" "24"</programlisting>
            <para>
              The first entry <quote>desy</quote> is the real name or a
              nickname of your VO. <quote>grid-voms.desy.de</quote> is the
              hostname of the &voms; server. The number <quote>15104</quote>
              is the port number the server is listening on. The forth entry
              is the DN of the server's &voms; certificate. The fifth entry,
              <quote>desy</quote>, is the VO name and the last entry is the
              globus version number which is not used anymore and can be
              omitted.
            </para>
          </informalexample>
          <informalexample>
            <para>
              Use the command <command>voms-proxy-init -voms</command> to
              create a &voms; proxy with VO <quote>desy</quote>.
            </para>

            <screen>&prompt-user;<userinput> voms-proxy-init -voms desy</userinput>
Enter GRID pass phrase:
Your identity: /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
Creating temporary proxy ....................................................... Done
Contacting  grid-voms.desy.de:15104 [/C=DE/O=GermanGrid/OU=DESY/CN=host/grid-voms.desy.de] "desy" Done
Creating proxy .................................... Done
Your proxy is valid until Mon Mar  7 23:52:13 2011</screen>
            <para>
              View the information about your &voms; proxy with
              <command>voms-proxy-info</command>
            </para>

            <screen>&prompt-user; <userinput>voms-proxy-info</userinput>
subject   : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe/CN=proxy
issuer    : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
identity  : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
type      : proxy
strength  : 1024 bits
path      : /tmp/x509up_u500
timeleft  : 11:28:02</screen>
            <para>
              The last line tells you how much longer your proxy will be valid.
            </para>
            <para>
              If your proxy is expired you will get
            </para>
            <screen>&prompt-user; <userinput>voms-proxy-info</userinput>
subject   : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe/CN=proxy
issuer    : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
identity  : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
type      : proxy
strength  : 1024 bits
path      : /tmp/x509up_u500
timeleft  : 0:00:00</screen>
            <para>
              The command <command>voms-proxy-info -all</command> gives you
              information about the proxy and about the VO.
            </para>

            <screen>&prompt-user; <userinput>voms-proxy-info -all</userinput>
subject   : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe/CN=proxy
issuer    : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
identity  : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
type      : proxy
strength  : 1024 bits
path      : /tmp/x509up_u500
timeleft  : 11:24:57
=== VO desy extension information ===
VO        : desy
subject   : /C=DE/O=GermanGrid/OU=DESY/CN=John Doe
issuer    : /C=DE/O=GermanGrid/OU=DESY/CN=host/grid-voms.desy.de
attribute : /desy/Role=NULL/Capability=NULL
attribute : /desy/test/Role=NULL/Capability=NULL
timeleft  : 11:24:57
uri       : grid-voms.desy.de:15104</screen>
            <para>
              Use the command <command>voms-proxy-destroy</command> to destroy your &voms; proxy.
            </para>
            <screen>&prompt-user; <userinput>voms-proxy-destroy</userinput>
&prompt-user; <userinput>voms-proxy-info</userinput>

Couldn't find a valid proxy.</screen>
          </informalexample>
        </section>
      </section>
    </section>
  </section>
  <section id="cf-gplazma-plug-inconfig">
    <title>Configuration files</title>
    <para>
      In this section we explain the format of the different files that are used by
      both &cell-gplazma1; and &cell-gplazma2; plug-ins.
    </para>
    <section id="cf-gplazma-plug-inconfig-authzdb">
      <title><filename>storage-authzdb</filename></title>

      <para>
        In &cell-gplazma;, except for the &gp2-kpwd;, authorization is a
        two-step process. First, a username is obtained from a mapping of the
        user's &dn; or his &dn; and role, then a mapping of username to &uid;
        and &gid; with optional additional session parameters like the root
        path is performed. For the second mapping usually the file called
        <filename>storage-authzdb</filename> is used.
      </para>

      <section id="cf-gplazma-plug-inconfig-authzdb-preparation">
        <title>Preparing <filename>storage-authzdb</filename></title>

        <para>
          The default location of the <filename>storage-authzdb</filename> is
          <filename class='directory'>/etc/grid-security</filename>.  Before the
          mapping entries there has to be a line specifying the version of the
          used file format.
        </para>

        <informalexample>
          <programlisting>version 2.1</programlisting>
        </informalexample>

        <para>
          &dcache; supports versions 2.1 and to some extend 2.2.
        </para>
        <para>
          Except for empty lines and comments (lines start with <literal>#</literal>)
          the configuration lines have the following format:
          <programlisting> authorize <replaceable>username</replaceable> (read-only|read-write) <replaceable>&uid;</replaceable> <replaceable>&gid;</replaceable>[,<replaceable>GID</replaceable>]* <replaceable>homedir</replaceable> <replaceable>rootdir</replaceable> </programlisting>
          For legacy reasons there may be a third path entry which is ignored by
          &dcache;. The username here has to be the name the user has been mapped
          to in the first step (e.g., by his &dn;).
        </para>

        <informalexample>
          <programlisting>authorize john read-write 1001 100 / /data/experiments /</programlisting>
          <para>
            In this example user <replaceable>john</replaceable> will be mapped to
            &uid; 1001 and &gid; 100 with read access on the directory <filename
                class="directory">/data/experiments</filename>.  You may choose to
            set the user's root directory to <filename
                class="directory">/</filename>.
          </para>
        </informalexample>

        <informalexample>
          <programlisting>authorize adm read-write 1000 100 / / /</programlisting>

          <para>
            In this case the user <replaceable>adm</replaceable> will be granted
            read/write access in any path, given that the file system permissions
            in &chimera; also allow the transfer.
          </para>
        </informalexample>
        <para>
          The first path is nearly always left as <quote><filename
                class="directory">/</filename></quote>, but it may be used as a
          home directory in interactive session, as a subdirectory of the root
          path. Upon login, the second path is used as the user's root, and a
          <quote>cd</quote> is performed to the first path. The first path is
          always defined as being relative to the second path.
        </para>

        <para>
          Multiple &gid;s can be assigned by using comma-separated values for the
          &gid; file, as in
        </para>

        <informalexample>
          <programlisting>authorize john read-write 1001 100,101,200 / / /</programlisting>
        </informalexample>

        <para>
          The lines of the <filename>storage-authzdb</filename> file are similar
          to the <quote>login</quote> lines of the
          <filename>dcache.kpwd</filename> file. If you already have a
          <filename>dcache.kwpd</filename> file, you can easily create
          <filename>storage-authzdb</filename> by taking the lines from your
          <filename>dcache.kpwd</filename> file that start with the word
          <literal>login</literal>, for example,
        </para>

        <informalexample>
          <programlisting>login john read-write 1001 100 / /data/experiments /</programlisting>
        </informalexample>

        <para>
          and replace the word <literal>login</literal> with
          <literal>authorize</literal>. The following line does this for you.
        </para>

        <programlisting>&prompt-root; sed "s/^ *login/authorize/" dcache.kpwd|grep "^authorize" > storage-authzdb </programlisting>
      </section>
    </section>

    <section id="cf-gplazma-plug-inconfig-vorolemap">
      <title>The gplazmalite-vorole-mapping plug-in</title>
      <para>
        The &cell-gplazma; policy file
        <filename>&path-ode-ed;/dcachesrm-gplazma.policy</filename> contains
        two lines for this plug-in.
      </para>

      <programlisting># Built-in gPLAZMAlite grid VO role mapping
gridVoRolemapPath="/etc/grid-security/grid-vorolemap"
gridVoRoleStorageAuthzPath="/etc/grid-security/storage-authzdb" </programlisting>

      <para>
        The second is the <filename>storage-authzdb</filename> used in other
        plug-ins. See the above documentation on <link
            linkend="cf-gplazma-plug-inconfig-authzdb"><filename>storage-authdb</filename></link>
          for how to create the file.
      </para>

      <section id="cf-gplazma-plug-inconfig-vorolemap-gridvorolemap">
        <title>Preparing <filename>grid-vorolemap</filename></title>

        <para>
          The file is similar in format to the <literal>grid-mapfile</literal>,
          however there is an additional field following the &dn; (Certificate
          Subject), containing the &fqan; (Fully Qualified Attribute Name).
        </para>

        <programlisting>"/C=DE/O=GermanGrid/OU=DESY/CN=John Doe" "/some-vo" doegroup
"/C=DE/DC=GermanGrid/O=DESY/CN=John Doe" "/some-vo/Role=NULL" doegroup
"/C=DE/DC=GermanGrid/O=DESY/CN=John Doe" "/some-vo/Role=NULL/Capability=NULL" doegroup </programlisting>

        <para>
          Therefore each line has three fields: the user's &dn;, the user's &fqan;,
          and the username that the &dn; and &fqan; combination are to be mapped to.
        </para>

        <para>
          The &fqan; is sometimes semantically referred to as the
          <quote>role</quote>. The same user can be mapped to different usernames
          depending on what their &fqan; is. The &fqan; is determined by how the user
          creates their proxy, for example, using <link
              linkend='cb-voms-proxy-glite'><command>voms-proxy-init</command></link>.
            The &fqan; contains the user's Group, Role (optional), and Capability
            (optional). The latter two may be set to the string <quote>NULL</quote>,
            in which case they will be ignored by the plug-in. Therefore the three
            lines in the example above are equivalent.
          </para>

          <informalexample>
            <para>
              If a user is authorized in multiple roles, for example
            </para>

            <programlisting>"/DC=org/DC=doegrids/OU=People/CN=John Doe" "/some-vo/sub-grp" vo_sub_grp_user
"/DC=org/DC=doegrids/OU=People/CN=John Doe" "/some-vo/sub-grp/Role=user" vouser
"/DC=org/DC=doegrids/OU=People/CN=John Doe" "/some-vo/sub-grp/Role=admin" voadmin
"/DC=org/DC=doegrids/OU=People/CN=John Doe" "/some-vo/sub-grp/Role=prod" voprod</programlisting>

            <para>
              he will get the username corresponding to the &fqan; found in the proxy
              that the user creates for use by the client software. If the user
              actually creates several roles in his proxy, authorization (and
              subsequent check of path and file system permissions) will be attempted
              for each role in the order that they are found in the proxy.
            </para>

            <para>
              In a &gridftp; &url;, the user may also explicitly request a username.
            </para>

            <programlisting>gsiftp://doeprod@ftp-door.example.org:2811/testfile1</programlisting>

            <para>
              in which case other roles will be disregarded.
            </para>
          </informalexample>

        </section>
      </section>

      <section id="cf-gplazma-plug-inconfig-voauth">
        <title>Authorizing a VO</title>

        <para>
          Instead of individual &dn;s, it is allowed to use <literal>*</literal> or
          <literal>"*"</literal> as the first field, such as
        </para>

        <informalexample>
          <programlisting>"*" "/desy/Role=production/" desyprod </programlisting>
          <para>
            In that case, any &dn; with the corresponding role will match. It should
            be noted that a match is first attempted with the explicit &dn;. Therefore
            if both &dn; and <literal>"*"</literal> matches can be made, the &dn; match
            will take precedence. This is true for the revocation matches as well
            (see below).
          </para>

          <para>
            Thus a user with subject <literal>/C=DE/O=GermanGrid/OU=DESY/CN=John
              Doe</literal> and role <literal>/desy/Role=production</literal> will
            be mapped to username <literal>desyprod</literal> via the above
            <filename>storage-authzdb</filename> line with <literal>"*"</literal>
            for the &dn;, except if there is also a line such as
            <programlisting>"/C=DE/O=GermanGrid/OU=DESY/CN=John Doe"
              "/desy/Role=production" desyprod2</programlisting>
          </para>

          <para>
            in which case the username will be <literal>desyprod2</literal>.
          </para>
        </informalexample>

        <section>
          <title>Revocation Entries</title>

          <para>
            To create a revocation entry, add a line with a dash
            (<literal>-</literal>) as the username, such as
          </para>

          <programlisting>"/C=DE/O=GermanGrid/OU=DESY/CN=John Doe" "/desy/production" -</programlisting>

          <para>
            or modify the username of the entry if it already exists. The behaviour
            is undefined if there are two entries which differ only by username.
          </para>

          <para>
            Since &dn; is matched first, if a user would be authorized by his VO
            membership through a <literal>"*"</literal> entry, but is matched
            according to his &dn; to a revocation entry, authorization would be
            denied. Likewise if a whole VO were denied in a revocation entry, but
            some user in that VO could be mapped to a username through his &dn;, then
            authorization would be granted.
          </para>
        </section>

        <section>
          <title>More Examples</title>

          <informalexample>
            <para>
              Suppose that there are users in production roles that are expected to
              write into the storage system data which will be read by other users. In
              that case, to protect the data the non-production users would be given
              read-only access. Here in
              <filename>/etc/grid-security/grid-vorolemap</filename> the production
              role maps to username <literal>cmsprod</literal>, and the role which
              reads the data maps to <literal>cmsuser</literal>.
            </para>

            <programlisting>"*" "/cms/uscms/Role=cmsprod" cmsprod
"*" "/cms/uscms/Role=cmsuser" cmsuser</programlisting>

            <para>
              The read-write privilege is controlled by the third field in the lines
              of <filename>/etc/grid-security/storage-authzdb</filename>
            </para>
            <programlisting>authorize cmsprod  read-write  9811 5063 / /data /
              authorize cmsuser  read-only  10001 6800 / /data /</programlisting>
          </informalexample>

          <informalexample>
            <para>
              Another use case is when users are to have their own directories within
              the storage system. This can be arranged within the &cell-gplazma;
              configuration files by mapping each user's &dn; to a unique username and
              then mapping each username to a unique root path. As an example, lines
              from <filename>/etc/grid-security/grid-vorolemap</filename> would
              therefore be written
            </para>
            <programlisting>"/DC=org/DC=doegrids/OU=People/CN=Selby Booth" "/cms" cms821
"/DC=org/DC=doegrids/OU=People/CN=Kenja Kassi" "/cms" cms822
"/DC=org/DC=doegrids/OU=People/CN=Ameil Fauss" "/cms" cms823</programlisting>

            <para>
              and the corresponding lines from
              <filename>/etc/grid-security/storage-authzdb</filename> would be
            </para>

            <programlisting>authorize cms821 read-write 10821 7000 / /data/cms821 /
authorize cms822 read-write 10822 7000 / /data/cms822 /
authorize cms823 read-write 10823 7000 / /data/cms823 /</programlisting>
          </informalexample>

        </section>
      </section>

      <section id="cf-gplazma-kpwd">
        <title>The kpwd plug-in</title>

        <para>
          The section in the &cell-gplazma; policy file for the kpwd plug-in
          specifies the location of the <filename>dcache.kpwd</filename>
          file, for example
        </para>

        <informalexample>
          <programlisting># dcache.kpwd
kpwdPath="&path-ode-eg;/dcache.kpwd"</programlisting>
        </informalexample>
        <para>
          To maintain only one such file, make sure that this is the same
          location as defined in
          <filename>&path-ods-usd;/defaults/dcache.properties</filename>.
        </para>

        <para>
          Use <filename>&path-ods-usd;/examples/gplazma/dcache.kpwd</filename>
          to create this file.
        </para>
      </section>

      <section id="cf-gplazma-gridmap">
        <title>The &gp1-gridmap;</title>

        <para>
          Two file locations are defined in the policy file for this plug-in:
        </para>

        <programlisting># grid-mapfile
gridMapFilePath="/etc/grid-security/grid-mapfile"
storageAuthzPath="/etc/grid-security/storage-authzdb"</programlisting>

        <section>
          <title>Preparing the <literal>grid-mapfile</literal></title>

          <para>
            The <literal>grid-mapfile</literal> is the same as that used in other
            applications. It can be created in various ways, either by connecting
            directly to &voms; or &gums; servers, or by hand.
          </para>

          <para>
            Each line contains two fields: a &dn; (Certificate Subject) in quotes, and
            the username it is to be mapped to.
          </para>
          <informalexample>
            <programlisting>"/C=DE/O=GermanGrid/OU=DESY/CN=John Doe" johndoe</programlisting>
          </informalexample>
          <para>
            When using the &gp1-gridmap;, the
            <filename>storage-authzdb</filename> file must also be configured.
            See <xref linkend="cf-gplazma-plug-inconfig-authzdb"/> for details.
          </para>
        </section>
      </section>

      <section id="cf-gplazma-saml">
        <title>The saml-vo-mapping plug-in</title>

        <para>
          There are two lines in the policy file for this plug-in.
        </para>

        <programlisting># SAML-based grid VO role mapping
mappingServiceUrl="https://gums.oursite.edu:8443/gums/services/&gums;AuthorizationServicePort"
# Time in seconds to cache the mapping in memory
saml-vo-mapping-cache-lifetime="60"</programlisting>

        <para>
          The first line contains the &url; for the &gums; web service. Replace the
          &url; with that of the site-specific &gums;. When using the
          <varname>GUMSAuthorizationServicePort</varname>", the service will only
          provide the username mapping and it will still be necessary to have the
          storage-authzdb file used in other plug-ins. See the above documentation
          <link linkend="cf-gplazma-plug-inconfig-authzdb"> storage-authzdb</link>
          for how to create the file. If a &gums; server providing a
          <varname>StorageAuthorizationServicePort</varname> with correct &uid;,
          &gid;, and root path information for your site is available, the
          storage-authzdb file is not necessary.
        </para>

        <para>
          The second line contains the value of the caching lifetime. In order to
          decrease the volume of requests to the &saml; authorization (&gums;)
          service, authorizations for the &gp1-saml; are by default cached for a
          period of time. To change the caching duration, modify the
          <varname>saml-vo-mapping-cache-lifetime</varname> value in
          <filename>&path-ode-ed;/dcachesrm-gplazma.policy</filename>
        </para>

        <programlisting>saml-vo-mapping-cache-lifetime="120"</programlisting>

        <para>
          To turn off caching, set the value to <literal>0</literal>. The default
          value is <literal>180</literal> seconds.
        </para>
      </section>

      <section id="cf-gplazma-xacml">
        <title>The xacml-vo-mapping plug-in</title>

        <para>
          &cell-gplazma; includes an authorization plug-in, to support the &xacml;
          authorization schema. Using &xacml; with SOAP messaging allows &cell-gplazma;
          to acquire authorization mappings from any service which supports the <ulink
              url="http://cd-docdb.fnal.gov/cgi-bin/ShowDocument?docid=2952">obligation
            profile for grid interoperability</ulink>.  Servers presently supporting
          &xacml; mapping are the latest releases of &gums; and &scas;. Using the new
          plug-in is optional, and previous configuration files are still compatible
          with &cell-gplazma;. It is normally not necessary to change this file, but
          if you have customized the previous copy, transfer your changes to the new
          batch file.
        </para>

        <para>
          The configuration is very similar to that for the &gp1-saml;.  There are
          two lines for the configuration.
        </para>

        <programlisting># XACML-based grid VO role mapping
XACMLmappingServiceUrl="https://gums.example.org:8443/gums/services/GUMS";
XACMLAuthorizationServicePort="8443"
# Time in seconds to cache the mapping in memory
xacml-vo-mapping-cache-lifetime="180"</programlisting>

        <programlisting># XACML-based grid VO role mapping
XACMLmappingServiceUrl="https://scas.europeansite.eu:8443"
# Time in seconds to cache the mapping in memory
xacml-vo-mapping-cache-lifetime="180"</programlisting>

        <para>
          As for the &gp1-saml;, the first line contains the &url; for the web
          service. Replace the &url; with that of the site-specific &gums; or
          &scas; server. When using the
          <varname>GUMSXACMLAuthorizationServicePort</varname> (notice the
          difference in service name from that for the &gp1-saml;) with a
          &gums; server, the service will only provide the username mapping and
          it will still be necessary to have the storage-authzdb file used in
          other plug-ins.  See the above documentation about <link
              linkend="cf-gplazma-plug-inconfig-authzdb">storage-authzdb</link>
          for how to create the file. An &scas; server will return a &uid;, a
          primary &gid;, and secondary &gid;s, but not a root path. A
          <filename>storage-authzdb</filename> file will be necessary to assign
          the root path.  Since &scas; does not return a username, the
          convention in  &cell-gplazma; is to use <literal>uid:gid</literal>
          for the username, where <literal>uid</literal> is the string
          representation of the &uid; returned by &scas;, and
          <literal>gid</literal> is the string representation of the primary
          &gid; returned by &scas;.  Thus a line such as
        </para>
        <informalexample>
          <programlisting>authorize 13160:9767 read-write 13160 9767 / /data /</programlisting>

          <para>
            in <filename>/etc/grid-security/storage-authzdb</filename> will serve to
            assign the user mapped by &scas; to &uid;<literal>=13160</literal> and
            primary &gid;<literal>=9767</literal> the root path
            <filename>/data</filename>. It is best for consistency's sake to fill in
            the &uid; and &gid; fields with the same values as in the
            <literal>uid:gid</literal> field.  Additional secondary &gid;s can be
            assigned by using comma-separated values in the &gid; field. Any &gid;s
            there not already returned as secondary &gid;s by &scas; will be added to
            the secondary &gid;s list.
          </para>
        </informalexample>

        <para>
          The second line contains the value of the caching lifetime. In order to
          decrease the volume of requests to the &xacml; authorization (&gums; or
          &scas;) service, authorizations for the &gp1-saml; method are by default
          cached for a period of time. To change the caching duration, modify the
          <varname>xacml-vo-mapping-cache-lifetime</varname> value in
          <filename>&path-ode-ed;/dcachesrm-gplazma.policy</filename>
        </para>

        <programlisting>saml-vo-mapping-cache-lifetime="120"</programlisting>

        <para>
          To turn off caching, set the value to <literal>0</literal>. For the
          &gp1-xacml; the default value is <literal>180</literal> seconds.
        </para>
      </section>
    </section>
  <section id="cf-gplazma-setup">
    <title>&cell-gplazma; specific &dcache; configuration</title>

    <para>
      &dcache; has many parameters that can be used to configure the systems behaviour.
      You can find all these parameters well documented and together with their
      default values in the properties files in
      <filename class='directory'>&path-ods-usd;/defaults/</filename>.  To
      use non-default values, you have to set the new values in
      <filename>&path-ode-ed;/dcache.conf</filename> or in the layout file.
      Do not change the defaults in the properties files! After changing a
      parameter you have to restart the concerned cells.
    </para>

    <para>
      Refer to the file <filename>gPlazma.properties</filename> for a full list
      of properties for &cell-gplazma; The following table shows the most
      commonly used ones:
    </para>

    <informaltable frame='all'>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
        <colspec colname='parameter' colwidth='*'/>
        <colspec colname='meaning' colwidth='1*'/>
        <colspec colname='default' colwidth='0.5*'/>
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Meaning</entry>
            <entry>Default</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><varname>gPlazmaNumberOfSimultaneousRequests</varname></entry>
            <entry>The number of concurrent requests</entry>
            <entry><literal>30</literal></entry>
          </row>
          <row>
            <entry><varname>useGPlazmaAuthorizationModule</varname></entry>
            <entry>Run &cell-gplazma; local for each door</entry>
            <entry>&false;</entry>
          </row>
          <row>
            <entry><varname>useGPlazmaAuthorizationCell</varname></entry>
            <entry>Run a central &cell-gplazma; instance.</entry>
            <entry>&true;</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>
      Setting the value for
      <varname>gPlazmaNumberOfSimultaneousRequests</varname> too high may
      result in large spikes of CPU activity and the potential to run out of
      memory. Setting the number too low results in potentially slow login
      activity.
    </para>

    <para>
      The default mode for &cell-gplazma; is to run centralised in one instance.
      It is however possible to specify to use &cell-gplazma1; as module running
      locally to the doors. Set this property to &true; in the
      domain you wish to run the module in.
    </para>

    <para>
      If you decide to run &cell-gplazma1; as a module you can switch off the
      centralised by setting <varname>useGPlazmaAuthorizationCell</varname> to
      &false;. Note that is also possible to mix both modes.
    </para>

    <section id="cf-gplazma-direct">
      <title>Using Direct Calls of &cell-gplazma1; Methods</title>

      <para>
        Cells may also call &cell-gplazma1; methods as an alternative, or as a
        fall-back, to using the &cell-gplazma; cell.
      </para>

      <section>
        <title>Operation without a &cell-gplazma; Cell</title>

        <para>
          If the &cell-gplazma; cell is not started, other cells can still
          authorize by calling &cell-gplazma1; methods directly from a pluggable
          module. The &cell-gplazma1; control files and host certificates are
          needed on the node from which authorization will take place. To invoke
          the &cell-gplazma1; modules, modify the following line in
          <filename>gridftpdoorSetup</filename> or <filename>srmSetup</filename>
          to
        </para>

        <programlisting>useGPlazmaAuthorizationModule=true</programlisting>

        <para>
          and make sure that the <varname>gplazmaPolicy</varname> line defines a
          valid &cell-gplazma1; policy file on the node for which authorization is
          to occur:
        </para>

        <programlisting>gplazmaPolicy=&path-ode-ed;/dcachesrm-gplazma.policy</programlisting>

        <para>
          No adjustable timeout is available, but any blocking would likely be due
          to a socket read in the &gp1-saml;, which is circumvented by a
          built-in 30-second timeout.
        </para>
      </section>

      <section>
        <title>Using a &cell-gplazma; Cell with a Direct-Call Fallback</title>

        <para>
          Both a call to the &cell-gplazma; cell and the direct call of the
          &cell-gplazma1; module may be specified. In that case, authentication
          will first be tried via the &cell-gplazma; cell, and if that does not
          succeed, authentication by direct invocation of &cell-gplazma1; methods
          will be tried. Modify the following lines to:
        </para>

        <programlisting>useGPlazmaAuthorizationModule=true
useGPlazmaAuthorizationCell=true</programlisting>

        <para>
          Make sure that the line for <varname>gplazmaPolicy</varname>
        </para>

        <programlisting>gplazmaPolicy=&path-ode-ed;/dcachesrm-gplazma.policy</programlisting>

        <para>
          set to a local policy file on the node. The &cell-gplazma;
          policy file on the &door-gridftp; or &serv-srm; does not have to
          specify the same plug-ins as the &cell-gplazma; cell.
        </para>

      </section>
    </section>

    <section id="cf-gplazma-username-password-webdav-example">
        <title>Enabling Username/Password Access for &webdav;</title>
        <para>
            This section describes how to activate the Username/Password access for &webdav;. It uses <filename>dcache.kwpd</filename> file as an example format for storing Username/Password information.
            First make sure &cell-gplazma2; is enabled in the <filename>&path-ode-ed;/dcache.conf</filename> or in the layout file.
        </para>

        <informalexample>
            <programlisting>gplazma.version = 2</programlisting>
        <para>
            Check your &webdav; settings: enable the &http; access, disallow the anonymous access, disable requesting and requiring the client authentication and activate basic authentication.
        </para>
            <programlisting>webdavProtocol=http
webdavAnonymousAccess=NONE
webdavWantClientAuth=false
webdavNeedClientAuth=false
webdavBasicAuthentication=true</programlisting>
        <para>
            Adjust the <filename>&path-ode-ed;/gplazma.conf</filename> to use the &gp2-kpwd; (for more information see also <xref
                linkend="cf-gplazma-gp2"/>).
        </para>
        <para>
            It will look something like this:
        </para>
            <programlisting>auth optional kpwd
map requisite kpwd
session requisite kpwd</programlisting>
        <para>
            The <filename>&path-ode-eg;/dcache.kpwd</filename> file is the place where you can specify the username/password record. It should contain the username and the password hash, as well as &uid;, &gid;, access mode and the home, root and fsroot directories:
        </para>
            <programlisting># set passwd
passwd tanja 6a4cd089 read-write 500 100 / / /</programlisting>
        <para>
            The passwd-record could be automatically generated by the &dcache; kpwd-utility, for example:
        </para>
            <screen>&prompt-root; <userinput>&path-odb-n-s;dcache kpwd dcuseradd -u 500 -g 100 -h / -r / -f / -w read-write -p dickerelch tanja</userinput></screen>
        </informalexample>
        <para>
            Some file access examples:
        </para>
        <programlisting>curl -u tanja:dickerelch http://webdav-door.example.org:2880/pnfs/</programlisting>
        <programlisting>wget --user=tanja --password=dickerelch http://webdav-door.example.org:2880/pnfs/</programlisting>
    </section>

    <section id="cf-gplazma-webadmin-example">
      <title>&cell-gplazma; config example to work with authenticated webadmin</title>
      <para>
        In this section an example configuration of &cell-gplazma1; is presented to enable working with
        &cell-webadmin; in authenticated mode and give a user administrator access.
      </para>
      <informalexample>
        <para>
          The <filename>&path-ode-ed;/dcachesrm-gplazma.policy</filename> file would look like this:
        </para>
        <programlisting># Switches
xacml-vo-mapping="OFF"
saml-vo-mapping="OFF"
kpwd="ON"
grid-mapfile="OFF"
gplazmalite-vorole-mapping="OFF"

# Priorities
xacml-vo-mapping-priority="5"
saml-vo-mapping-priority="1"
kpwd-priority="3"
grid-mapfile-priority="4"
gplazmalite-vorole-mapping-priority="2"

# Configurable Options for plug-ins|Services
# #################################################################################
# Path to local or remotely accessible authorization repositories|services.
# A valid path is required if corresponding switch is ON.

# dcache.kpwd
kpwdPath="&path-ode-eg;/dcache.kpwd"

# #################################################################################
# END</programlisting>
        <para>
          The <filename>&path-ode-eg;/dcache.kpwd</filename> file would look like this:
        </para>
        <programlisting>version 2.1

mapping "/C=DE/O=ExampleOrganisation/OU=EXAMPLE/CN=John Doe" john
# the following are the user auth records
login jans read-write 1000 100 / / /
/C=DE/O=ExampleOrganisation/OU=EXAMPLE/CN=John Doe

# set pwd
passwd john 8402480 read-write 1000 100 / / /</programlisting>
        <para>
          This maps the subject part of a Grid-Certificate
          <literal>subject=/C=DE/O=ExampleOrganisation/OU=EXAMPLE/CN=John Doe</literal> to
          the User <systemitem class="username">john</systemitem> and the entry
          <programlisting>login john read-write 1000 100 / / /
            /C=DE/O=GermanGrid/OU=DESY/CN=John Doe</programlisting> applies
          unix-like values to <systemitem class="username">john</systemitem>, most
          important is the <literal>100</literal>, because it is the assigned &gid;.
          This must match the value of the <varname>webadminAdminGid</varname>
          configured in your webadmin.  This is sufficient for login using a
          certificate. The entry
          <programlisting>passwd john 8402480 read-write 1000 100 / / /</programlisting>
          enables Username/Password login, such as a valid login would be user
          <systemitem class="username">john</systemitem> with some password.  The
          password is encrypted with the kpwd-algorithm (also see <xref
              linkend="cf-gplazma-kpwd"/>) and then stored in the file.  Again the
          <literal>100</literal> here is the assigned &gid;.
        </para>
      </informalexample>
    </section>
  </section>
</chapter>
