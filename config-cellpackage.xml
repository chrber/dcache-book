<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
]>

<chapter id="cf-cellpackage">

  <title>The Cell Package</title>

  <para>
    All of &dcache; makes use of the cell package. It is a framework for a distributed and scalable
    server system in Java. The &dcache; system is divided into cells
    which communicate with each other via messages. Several cells run
    simultaneously in one domain.
  </para>

  <para>
    Each domain runs in a separate Java virtual machine and each
    cell is run as a separate thread therein. Domain names have to be unique.
    The domains communicate with each other via &tcp; using connections that are
    established at start-up.  The topology is controlled by the location manager
    service.  In the standard configuration, all domains connect with the
    &domain-dcache;, which routes all messages to the appropriate domains.  This
    forms a star topology.
  </para>

  <note>
    <title>Only for message communication</title>
    <para>
      The &tcp; communication controlled by the location manager service is for
      the short control messages sent between cells.  Any transfer of the data
      stored within &dcache; does not use these connections; instead, dedicated
      &tcp; connections are established as needed.
    </para>
  </note>

  <para>
    A single node provides the location-manager service.  For a single-host &dcache;
    instance, this is <systemitem class="systemname">localhost</systemitem>;
    for multi-host &dcache; instances, the hostname of the node providing this service
    must be configured using the <literal>serviceLocatorHost</literal> property.
  </para>

  <para>
    The domain that hosts the location manager service is also configurable.  By default,
    the service runs within the &domain-dcache; domain; however, this may be changed by
    setting the <literal>broker.domain</literal> property.  The port that
    the location manager listens on is also configurable, using the
    <literal>serviceLocatorPort</literal> property; however, most sites may leave this
    property unaltered and use the default value.
  </para>

  <para>
    Within this framework, cells send messages to other cells
    addressing them in the form
    <literal><replaceable>cellName</replaceable>@<replaceable>domainName</replaceable></literal>.
    This way, cells can communicate without knowledge about the host
    they run on. Some cells are <glossterm
      linkend="gl-well-known-cell">well known</glossterm>, i.e. they
    can be addressed just by their name without
    <literal>@<replaceable>domainName</replaceable></literal>. Evidently,
    this can only work properly if the name of the cell is unique
    throughout the whole system. If two well known cells with the same name are present, the
    system will behave in an undefined way.  Therefore it is wise to
    take care when starting, naming, or renaming the well known
    cells. In particular this is true for pools, which are well known cells.
  </para>

  <para>
    A domain is started with a shell script
    <filename>bin/dcache start <replaceable>domainName</replaceable></filename>.
    The routing manager and location manager cells are started in
    each domain and are part of the underlying cell package
    structure. Each domain will contain at least one cell in
    addition to them.
  </para>

</chapter>


