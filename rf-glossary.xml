<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                         "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % sharedents SYSTEM "shared-entities.xml" >
%sharedents;
]>

<chapter id="rf-glossary">

  <title>Glossary</title>

  <para>
    The following terms are used in &dcache;.
  </para>

  <glosslist>
    <glossentry id="gl-tss">
      <glossterm>tertiary storage system</glossterm>
      <glossdef>
	<para>
	  A mass storage system which stores data and is connected to
	  the &dcache; system. Each &dcache; pool will write files to
	  it as soon as they have been completely written to the pool
	  (if the pool is not configured as a <glossterm
	  linkend="gl-lfs">LFS</glossterm>). The tertiary storage
	  system is not part of &dcache;. However, it is possible to
	  connect any mass storage system as tertiary storage system
	  to &dcache; via a simple interface.
	</para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-tape_backend">
      <glossterm>tape backend</glossterm>
      <glossdef>
	<para>
	  A <glossterm linkend="gl-tss">tertiary storage
	  system</glossterm> which stores data on magnetic tapes.
	</para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-hsm">
      <glossterm>Hierarchical Storage Manager (&hsm;)</glossterm>
      &hsm;
      <glosssee otherterm="gl-tss">tertiary storage system</glosssee>
    </glossentry>

    <glossentry id="gl-hsm_type">
      <glossterm>HSM type</glossterm>
      <glossdef>
	<para>
	  The type of &hsm; which is connected to &dcache; as a
	  <glossterm linkend="gl-tss">tertiary storage
	  system</glossterm>. The choice of the HSM type influences
	  the communication between &dcache; and the &hsm;. Currently
	  there are <literal>osm</literal> and
	  <literal>enstore</literal>. <literal>osm</literal> is used
	  for most HSMs (TSM, HPSS, ...).
	</para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-lfs">
      <glossterm>Large File Store (<abbrev>LFS</abbrev>)</glossterm>
      <glossdef>
	<para>
	  A Large File Store is the name for a &dcache; instance that
	  is acting as a filesystem independent to, or in cooperation
	  with, an <glossterm linkend="gl-hsm">&hsm;</glossterm>
	  system.  When &dcache; is acting as an LFS, files may be
	  stored and later read without involving any &hsm; system.
	</para>

	<para>
	  Whether a &dcache; instance provides an LFS depends on
	  whether there are <glossterm
	  linkend="gl-pool">pools</glossterm> configured to do so.
	  The <literal>LFS</literal> option, specified for each pool
	  within the <glossterm
	  linkend="gl-poollist-file"><filename>poollist</filename>
	  file</glossterm>, describes how that pool should behave.
	  This option can take three possible values:
	</para>

	<variablelist>
          <varlistentry>
            <term><literal>none</literal></term>
	    <listitem>
              <para>
		the pool does not contribute to any LFS capacity. All
		newly written files are regarded precious and sent to
		the &hsm; backend.
	      </para>
	    </listitem>
	  </varlistentry>

          <varlistentry>
            <term><literal>precious</literal></term>
	    <listitem>
              <para>
		Newly create files are regarded as precious but are
		not scheduled for the &hsm; store
		procedure. Consequently, these file will only
		disappear from the pool when deleted in the <glossterm
		linkend="gl-namespace">namespace</glossterm>.
	      </para>
	    </listitem>
	  </varlistentry>

          <varlistentry>
            <term><literal>volatile</literal> (or <literal>transient</literal>)</term>
	    <listitem>
	      <para>
		Newly create files are regarded cached and are not
		scheduled for the &hsm; store procedure.  Though they
		will never be stored on tape, these file are part of
		the aging procedure and will be removed as soon as new
		space is needed.
	      </para>

	      <note>
		<para>
		  The <literal>volatile</literal> lfs mode is
		  deprecated and should not be used.
		</para>
	      </note>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </glossdef>
    </glossentry>

      <glossentry id="gl-store">
	<glossterm>to store</glossterm>
	<glossdef>
	  <para>
	    Copying a file from a &dcache; pool to the <glossterm
	    linkend="gl-tss">tertiary storage system</glossterm>.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-restore">
	<glossterm>to restore</glossterm>
	<glossdef>
	  <para>
	    Copying a file from the <glossterm
	    linkend="gl-tss">tertiary storage system</glossterm> to
	    one of the &dcache; pools.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-stage">
	<glossterm>to stage</glossterm>
	<glosssee otherterm="gl-restore">to restore</glosssee>
      </glossentry>

      <glossentry id="gl-transfer">
	<glossterm>transfer</glossterm>
	<glossdef>
	  <para>
	    Any kind of transfer performed by a &dcache; pool. There
	    are <glossterm linkend="gl-store">store</glossterm>,
	    <glossterm linkend="gl-restore">restore</glossterm>, pool
	    to pool (client and server), read, and write
	    transfers. The latter two are client transfers.
	  </para>
	  <glossseealso otherterm="gl-mover">mover</glossseealso>
	</glossdef>
      </glossentry>

      <glossentry id="gl-mover">
	<glossterm>mover</glossterm>
	<glossdef>
	  <para>
	    The process/thread within a <glossterm
	    linkend="gl-pool">pool</glossterm> which performs a
	    <glossterm linkend="gl-transfer">transfer</glossterm>.
	    Each pool has a limited number of movers that may be
	    active at any time; if this limit is reached then further
	    requests for data are queued.
	  </para>

	  <para>
	    In many protocols, end clients connect to a mover to
	    transfer file contents.  To support this, movers must
	    speak the protocol the end client is using.
	  </para>
	  <glossseealso otherterm="gl-transfer">transfer</glossseealso>
	</glossdef>
      </glossentry>

    <glossentry id="gl-dcachesetup-file">
      <glossterm>The <filename>dCacheSetup</filename> File</glossterm>
      <glossdef>
        <para>
          This is the primary configuration file of a &dcache; host.
          It is located at
          <filename>$dcache_home/config/dCacheSetup</filename>
          (typically
          <filename>&path-odc-ed;/dCacheSetup</filename>). Each
          <glossterm linkend="gl-domain">domain</glossterm> uses the
          file
          <filename>config/<replaceable>domainName</replaceable>Setup</filename>
          which is in fact a symbolic link to
          <filename>config/dCacheSetup</filename>. The
          <filename>config/dCacheSetup</filename> file might even be
          the same across the hosts of a &dcache; instance.
        </para>
      </glossdef>
    </glossentry>

      <glossentry id="gl-primary-interface">
	<glossterm>Primary Network Interface</glossterm>
	<glossdef>
	  <para>
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-poollist-file">
	<glossterm><literal>poollist</literal> File</glossterm>
	<glossdef>
	  <para>
	    The poollist files are a collection of files in the
	    <filename class="directory">&path-odc-ed;</filename>
	    directory.  Each <literal>poollist</literal> file
	    describes the set of <glossterm
	    linkend="gl-pool">pools</glossterm> that should be
	    available for a given node.  These files have a filename
	    like
	    <filename><replaceable>hostname</replaceable>.poollist</filename>,
	    where
	    <literal><replaceable>hostname</replaceable></literal> is
	    the simple hostname of the node the pools are to run on.
	  </para>

	  <para>
	    The file consists of one or more lines, with each line
	    describing a pool.
	  </para>
	</glossdef>
      </glossentry>

(      <glossentry id="gl-location-manager">
	<glossterm>Location Manager</glossterm>
	<glossdef>
	  <para>
	    The location manager is a <glossterm
	    linkend="gl-cell">cell</glossterm> that instructs a newly
	    started <glossterm linkend="gl-domain">domain</glossterm>s
	    to which domain they should connect.  This allows domains
	    to form arbitrary network topologies; although, by
	    default, a &dcache; instance will form a star topology
	    with the &domain-dcache; domain at the centre.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-cell">
	<glossterm>Cell</glossterm>
	<glossdef>
	  <para>
	    A cell is a collection of Java threads that provide a
	    discrete and simple service within &dcache;.  Each cell is
	    hosted within a <glossterm
	    linkend="gl-domain">domain</glossterm>.
	  </para>

	  <para>
	    Cells have an address derived from concatenating their
	    name, the <literal>@</literal> symbol and their containing
	    domain name.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-domain">
	<glossterm>Domain</glossterm>
	<glossdef>
	  <para>
	    A domain is a collection of one or more <glossterm
	    linkend="gl-cell">cell</glossterm>s that provide a set of
	    related services within a &dcache; instance.  Each domain
	    requires its own Java Virtual Machine.  A typical domain
	    might provide external connectivity (i.e., a <glossterm
	    linkend="gl-door">door</glossterm>) or manage the
	    <glossterm linkend="gl-pool">pools</glossterm> hosted on a
	    machine.
	  </para>

	  <para>
	    Each domain has at least one cell, called the
	    &cell-system; cell and many tunnel cells for communicating
	    with other Domains.  To provide a useful service, a domain
	    will contain other cells that provide specific behaviour.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-door">
	<glossterm>Door</glossterm>
	<glossdef>
	  <para>
	    Door is the generic name for special <glossterm
	    linkend="gl-cell">cell</glossterm>s that provides the
	    first point of access for end clients to communicate with
	    a &dcache; instance.  There are different door
	    implementations (e.g., &gsidcap; door and &gridftp; door),
	    allowing a &dcache; instance to support multiple
	    communication protocols.
	  </para>

	  <para>
	    A door will (typically) bind to a well-known port number
	    depending on the protocol the door supports.  This allows
	    for only a single door instance per machine for each
	    protocol.
	  </para>

	  <para>
	    A door will typically identify which <glossterm
	    linkend="gl-pool">pool</glossterm> will satisfy the end
	    user's operation and redirect the client to the
	    corresponding pool.  In some cases this is not possible;
	    for example, some protocols (such as &gridftp; version 1)
	    do not allow servers to redirect end-clients, in other
	    cases pool servers may be behind a firewall, so preventing
	    direct access.  When direct end-client access is not
	    possible, the door may act as a data proxy, streaming data
	    to the client.
	  </para>

	  <para>
	    By default, each door is hosted in a dedicated <glossterm
	    linkend="gl-domain">domain</glossterm>.  This allows easy
	    control of whether a protocol is supported from a
	    particular machine.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-jvm">
	<glossterm>Java Virtual Machine (JVM)</glossterm>
	<glossdef>
	  <para>
	    Java programs are typically compiled into a binary form
	    called Java byte-code.  Byte-code is comparable to the
	    format that computers understand native; however, no
	    mainstream processor understands Java byte-code.  Instead
	    compiled Java programs typically require a translation
	    layer for them to run.  This translation layer is called a
	    Java Virtual Machine (JVM).  It is a standardised
	    execution environment that Java programs may run within.
	    A JVM is typically represented as a process within the
	    host computer.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-well-known-cell">
	<glossterm>Well Known Cell</glossterm>
	<glossdef>
	  <para>
	    A well-known cell is a <glossterm
	    linkend="gl-cell">cell</glossterm> that registers itself
	    centrally.  Within the admin interface, a well-known cell
	    may be referred to by just its cell name.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-pinboard">
	<glossterm>Pinboard</glossterm>
	<glossdef>
	  <para>
	    The pinboard is a collection of messages describing events
	    within &dcache; and is similar to a log file.  Each
	    <glossterm linkend="gl-cell">cell</glossterm> will
	    (typically) have its own pinboard.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-breakeven">
	<glossterm>Breakeven Parameter</glossterm>
	<glossdef>
	  <para>
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-secondary-interface">
	<glossterm>Secondary Network Interface</glossterm>
	<glossdef>
	  <para>
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-lru">
	<glossterm>least recently used (LRU) File</glossterm>
	<glossdef>
	  <para>
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-default-mover-queue">
	<glossterm>Default Mover Queue</glossterm>
	<glossdef>
	  <para>
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-namespace">
	<glossterm>Namespace</glossterm>

	<glossdef>
	  <para>
	    The namespace is a core component of &dcache;.  It maps
	    each stored file to a unique identification number and
	    allows storing of metadata against either files or
	    directories.
	  </para>

	  <para>
	    &dcache; supports two (independent) namespace
	    implementations: <glossterm
	    linkend="gl-pnfs">&pnfs;</glossterm> and <glossterm
	    linkend="gl-chimera">Chimera</glossterm>.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-pnfs">
	<glossterm>&pnfs; filesystem</glossterm>
	<glossdef>
	  <para>
	    &pnfs; is a filesystem that uses a database to store all
	    information, including the contents of files.  This
	    filesystem is made available via NFS, so authorised hosts
	    can mount &pnfs; and use it like any other file system.
	  </para>

	  <para>
	    &dcache; may use &pnfs; as its <glossterm
	    linkend="gl-namespace">namespace</glossterm>.  Although it
	    is possible to store file contents in &pnfs;, &dcache;
	    does not do this.  Instead &dcache; stores the file data
	    on one (or more) <glossterm
	    linkend="gl-pool">pools</glossterm>.
	  </para>

	  <para>
	    &pnfs; includes some unique additional properties.  These
	    include <glossterm linkend="gl-pnfs-dot-cmd">dot
	    commands</glossterm>, <glossterm
	    linkend="gl-pnfs-id">&pnfs; IDs</glossterm>, <glossterm
	    linkend="gl-pnfs-level">levels</glossterm>, <glossterm
	    linkend="gl-pnfs-tag">directory tags</glossterm> and
	    <glossterm
	    linkend="gl-pnfs-wormhole">wormholes</glossterm>.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-pnfs-dot-cmd">
	<glossterm>&pnfs; dot command</glossterm>
	<glossdef>
	  <para>
	    To configure and access some of the special features of
	    the <glossterm linkend="gl-pnfs">&pnfs;
	    filesystem</glossterm>, special files may be read, written
	    to or created.  These files all start with a dot (or
	    period) and have one or more parameters after, each
	    parameter is contained within a set of parentheses; for
	    example, the file
	    <filename>.(tag)(<replaceable>foo</replaceable>)</filename>
	    is the &pnfs; dot command for reading or writing the
	    <replaceable>foo</replaceable> <glossterm
	    linkend="gl-pnfs-tag">directory tag</glossterm> value.
	  </para>

	  <para>
	    Care must be taken when accessing a dot command from a
	    shell.  Shells will often expand parentheses so the
	    filename must be protected against this; for example, by
	    quoting the filename or by escaping the parentheses.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-pnfs-level">
	<glossterm>&pnfs; level</glossterm>
	<glossdef>
	  <para>
	    In <glossterm linkend="gl-pnfs">&pnfs;</glossterm>, each
	    file can have up to eight independent contents; these
	    file-contents, called levels, may be accessed
	    independently.  &dcache; will store some file metadata in
	    levels 1 and 2, but &dcache; will not store any file data
	    in &pnfs;.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-pnfs-tag">
	<glossterm>&pnfs; directory tag</glossterm>
	<glossdef>
	  <para>
	    <glossterm linkend="gl-pnfs">&pnfs;</glossterm> includes
	    the concept of tags.  A tag is a keyword-value pair
	    associated with a directory.  Subdirectories inherit tags
	    from their parent directory.  New values may be assigned,
	    but tags cannot be removed.  The <glossterm
	    linkend="gl-pnfs-dot-cmd">dot command</glossterm>
	    <filename>.(tag)(<replaceable>foo</replaceable>)</filename>
	    may be used to read or write tag
	    <replaceable>foo</replaceable>'s value.  The dot command
	    <filename>.(tags)()</filename> may be read for a list of
	    all tags in that file's subdirectory.
	  </para>

	  <para>
	    More details on directory tags are given in <xref
	    linkend="cf-pnfs-tags"/>.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-pnfs-id">
	<glossterm>&pnfs; ID</glossterm>
	<glossdef>
	  <para>
	    Each component (file, directory, etc) in a &pnfs; instance
	    has a unique ID: a 24-digit hexadecimal number.  This
	    unique ID is used in &dcache; to refer to files without
	    knowing the component's name or in which directory the
	    component is located.
	  </para>

	  <para>
	    More details on &pnfs; IDs are given in <xref
	    linkend="cf-pnfs-ids"/>.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-p2p">
	<glossterm>Pool to Pool Transfer</glossterm>
	<glossdef>
	  <para>
	    A pool-to-pool transfer is one where a file is transferred
	    from one &dcache; <glossterm
	    linkend="gl-pool">pool</glossterm> to another.  This is
	    typically done to satisfy a read request, either as a
	    load-balancing technique or because the file is not
	    available on pools that the end-user has access.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-storage_class">
	<glossterm>Storage Class</glossterm>
	<glossdef>
	  <para>
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-batch-file">
	<glossterm><filename>batch</filename> File</glossterm>
	<glossdef>
	  <para>
	    A batch file describes which <glossterm
	    linkend="gl-cell">cell</glossterm>s in a <glossterm
	    linkend="gl-domain">domain</glossterm> are to be started
	    and with what options.  They typically have filenames from
	    combining the name of a domain with
	    <filename>.batch</filename>; for example, the
	    &domain-dcache; domain has a corresponding batch file
	    <filename>dCache.batch</filename>
	  </para>

	  <para>
	    Although the cells in a domain may be configured by
	    altering the corresponding batch file, most typical
	    changes can be altered by editing the
	    <filename>dCacheConfig</filename> file and this is the
	    preferred method.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-context">
	<glossterm>Context</glossterm>
	<glossdef>
	  <para>
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-pnfs-wormhole">
	<glossterm>Wormhole</glossterm>
	<glossdef>
	  <para>
	    A wormhole is a feature of the <glossterm
	    linkend="gl-pnfs">&pnfs; filesystem</glossterm>.  A
	    wormhole is a file that is accessible in all directories;
	    however, the file is not returned when scanning a
	    directory(e.g., using the <command>ls</command> command).
	  </para>

	  <para>
	    More details on wormholes are given in <xref
	    linkend="cf-pnfs-wormholes"/>.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-chimera">
	<glossterm>Chimera</glossterm>
	<glossdef>
	  <para>
	    Chimera is a <glossterm
	    linkend="gl-namespace">namespace</glossterm>
	    implementation that is similar to <glossterm
	    linkend="gl-pnfs">&pnfs;</glossterm> but provides better
	    integration with a relational database.  Because of this,
	    it allows additional functionality to be added, so some
	    &dcache; features require a chimera namespace.
	  </para>

	  <para>
	    Many <glossterm linkend="gl-pnfs">&pnfs;</glossterm>
	    features are available in Chimera, including <glossterm
	    linkend="gl-pnfs-level">levels</glossterm>, <glossterm
	    linkend="gl-pnfs-tag">directory tags</glossterm> and many
	    of the <glossterm linkend="gl-pnfs-dot-cmd">dot
	    commands</glossterm>.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-chimera-id">
	<glossterm>Chimera ID</glossterm>
	<glossdef>
	  <para>
	    A <glossterm linkend="gl-chimera">Chimera</glossterm> ID is a
	    36 hexadecimal digit that uniquely defines a file or
	    directory.  It's equivalent to a <glossterm
	    linkend="gl-pnfs-id">&pnfs; ID</glossterm>.
	  </para>
	</glossdef>
      </glossentry>

    <glossentry id="gl-replica">
      <glossterm>Replica</glossterm>
      <glossdef>
	<para>
	  It is possible that &dcache; will choose to make a file
	  accessible from more than one <glossterm
	  linkend="gl-pool">pool</glossterm> using a <glossterm
	  linkend="gl-p2p">pool-to-pool</glossterm> copy.  If this
	  happens, then each copy of the file is a replica.
	</para>

	<para>
	  A file is independent of which pool is storing the data
	  whereas a replica is uniquely specified by the &pnfs; ID
	  <emphasis>and</emphasis> the pool name it is stored on.
	</para>
      </glossdef>
    </glossentry>

      <glossentry id="gl-precious">
	<glossterm>Precious Replica</glossterm>
	<glossdef>
	  <para>
	    A precious replica is a <glossterm
	    linkend="gl-replica">replica</glossterm> that should be
	    stored on tape.
	  </para>
	</glossdef>
      </glossentry>

      <glossentry id="gl-cached">
	<glossterm>Cached Replica</glossterm>
	<glossdef>
	  <para>
	    A cached replica is a <glossterm
	    linkend="gl-replica">replica</glossterm> that should not
	    be stored on tape.
	  </para>

	</glossdef>
      </glossentry>

    <glossentry id="gl-replicamanager">
      <glossterm>Replica Manager</glossterm>
      <glossdef>
        <para>
          The replica manager keeps track of the number of <glossterm
            linkend="gl-replica">replicas</glossterm> of each file within a
          certain subset of pools and makes sure this number is always within
          a specified range. This way, the system makes sure that enough
          versions of each file are present and accessible at all times. This
          is especially useful to ensure resilience of the &dcache; system,
          even if the hardware is not reliable. The replica manager cannot be
          used when the system is connected to a <glossterm
            linkend="gl-tss">tertiary storage system</glossterm>. The
          activation and configuration of the replica manager is described in
          <xref linkend="cf-repman"/>.
        </para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-srm">
      <glossterm>Storage Resource Manager (<abbrev>SRM</abbrev>)</glossterm>
      <glossdef>
        <para>
          An SRM provides a standardised webservice interface for
          managing a storage resource (e.g. a &dcache; instance). It
          is possible to reserve space, initiate file storage or
          retrieve, and replicate files to another SRM. The actual
          transfer of data is not done via the SRM itself but via any
          protocol supported by both parties of the
          transfer. Authentication and authorisation is done with the
          grid security infrastructure. &dcache; comes with an
          implementation of an SRM which can turn any &dcache;
          instance into a grid storage element.
        </para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-pnfscompanion">
      <glossterm>&pnfs; Companion</glossterm>
      <glossdef>
        <para>
          The &pnfs; companion is a (database) table that stores
          &dcache; specific information; specifically, on which pools
          a file may be found.  &dcache; can operate without a
          companion and will store file location information within a
          <glossterm linkend="gl-pnfs-level">level</glossterm>.
	</para>

	<para>
	  Storing replica location information in the companion
	  database greatly improves the performance of &dcache; as the
	  location information is often queried by the <glossterm
	  linkend="gl-poolmanager">pool manager</glossterm>.
        </para>

	<para>
	  Although a companion database may be used with <glossterm
	  linkend="gl-chimera">Chimera</glossterm>, doing so provides
	  no performance improvements and is not recommended.
	</para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-billing">
      <glossterm>Billing/Accounting</glossterm>
      <glossdef>
        <para>
          Accounting information is either stored in a text file or in
          a PostgreSQL database by the &cell-billing; <glossterm
          linkend="gl-cell">cell</glossterm> usually started in the
          &domain-http; <glossterm
          linkend="gl-domain">domain</glossterm>. This is described in
          <xref linkend="cb-accounting"/>.
        </para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-poolmanager">
      <glossterm>Pool Manager</glossterm>
      <glossdef>
        <para>
          The pool manager is the <glossterm
          linkend="gl-cell">cell</glossterm> running in the
          &domain-dcache; <glossterm
          linkend="gl-domain">domain</glossterm>.  It is a central
          component of a &dcache; instance and decides which pool is
          used for an incoming request.
        </para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-pm-comp-cm">
      <glossterm>Cost Module</glossterm>
      <glossdef>
        <para>
	  The cost module is a Java class responsible for combining
	  the different types of cost associated with a particular
	  operation; for example, if a file is to be stored, the cost
	  module will combine the storage costs and CPU costs for each
	  candidate target pool. The pool manager will choose the
	  candidate pool with the least combined cost.
        </para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-pm-comp-psu">
      <glossterm>Pool Selection Unit</glossterm>
      <glossdef>
        <para>
	  The pool selection unit is a Java class responsible for
	  determining the set of candidate pools for a specific
	  transaction.  A detailed account of its configuration and
	  behaviour is given in <xref linkend="cf-pm-psu"/>.
        </para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-pinmanager">
      <glossterm>Pin Manager</glossterm>
      <glossdef>
        <para>
	  The pin manager is a <glossterm
	  linkend="gl-cell">cell</glossterm> by default running in the
	  &domain-utility; <glossterm
	  linkend="gl-domain">domain</glossterm>.  It is a central
	  service that can <quote>pin</quote> files to a pool for a
	  certain time. It is used by the &srm; to satisfy prestage
	  requests.
        </para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-spacemanager">
      <glossterm>Space Manager</glossterm>
      <glossdef>
        <para>
	  The (SRM) Space Manager is a <glossterm
	  linkend="gl-cell">cell</glossterm> by default running in the
	  &domain-srm; <glossterm
	  linkend="gl-domain">domain</glossterm>.  It is a central
	  service that records reserved space on pools.  A space
	  reservation may be either for a specific duration or never
	  expires.  The Space Manager is used by the &srm; to satisfy
	  space reservation requests.
        </para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-pool">
      <glossterm>Pool</glossterm>
      <glossdef>
        <para>
	  A pool is a <glossterm linkend="gl-cell">cell</glossterm>
	  responsible for storing retrieved files and for providing
	  access to that data.  Data access is supported via
	  <glossterm linkend="gl-mover">mover</glossterm>s.  A machine
	  may have multiple pools, perhaps due to that machine's
	  storage being split over multiple partitions.
	</para>

	<para>
	  A pool must have a unique name and all pool cells on a
	  particular machine are hosted in a <glossterm
	  linkend="gl-domain">domain</glossterm> that derives its name
	  from the host machine's name.
	</para>

	<para>
	  The list of directories that are to store pool data are
	  found in the <glossterm
	  linkend="gl-poollist-file"><filename>poollist</filename>
	  File</glossterm>, which is located on the pool node.
	</para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-sweeper">
      <glossterm>sweeper</glossterm>
      <glossdef>
	<para>
	  A sweeper is an activity located on a <glossterm
	  linkend="gl-pool">pool</glossterm>.  It is responsible for
	  deleting files on the pool that have been marked for
	  removal.  Files can be marked for removal because their
	  corresponding <glossterm
	  linkend="gl-namespace">namespace</glossterm> entry has been
	  deleted or because the local file is a <glossterm
	  linkend="gl-cached">cache copy</glossterm> and more disk
	  space is needed.
	</para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-hsm-sweeper">
      <glossterm>&hsm; sweeper</glossterm>
      <glossdef>
	<para>
	  The &hsm; sweeper, if enabled, is a component that is
	  responsible for removing files from the <glossterm
	  linkend="gl-hsm">&hsm;</glossterm> when the corresponding
	  <glossterm linkend="gl-namespace">namespace</glossterm>
	  entry has been removed.
	</para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-cost">
      <glossterm>cost</glossterm>
      <glossdef>
	<para>
	  The pool manager determines the pool used for storing a file
	  by calculating a cost value for each available pool. The
	  pool with the lowest cost is used. The costs are calculated
	  by the cost module as described in <!-- xref
	  linkend="cf-pm-cm"/ -->. The total cost is a linear combination
	  of the <!-- <glossterm
	  linkend="gl-performance_cost">performance</glossterm> and
	  <glossterm linkend="gl-space_cost">space cost</glossterm>.--> I.e.,
	</para>

	<informalequation>
	  <alt>
	    <varname>cost</varname> = <varname>ccf</varname> * <varname>performance_cost</varname> + <varname>scf</varname> * <varname>space_cost</varname>
	  </alt>

	  <mediaobject>
	  </mediaobject>
	</informalequation>

	<para>
	  where <varname>ccf</varname> and <varname>scf</varname> are
	  configurable with the command <xref
	  linkend="cmd-set_pool_decision"/>.
	</para>
      </glossdef>
    </glossentry>

    <glossentry id="gl-performance_cost">
      <glossterm>performance cost</glossterm>
      <glossdef>
	<para>

	</para>

	<glossseealso>gl-cost</glossseealso>

      </glossdef>
    </glossentry>

    <glossentry id="gl-space_cost">
      <glossterm>space cost</glossterm>
      <glossdef>

	<para>

	</para>

	<glossseealso>gl-cost</glossseealso>

      </glossdef>
    </glossentry>

  </glosslist>
</chapter>
