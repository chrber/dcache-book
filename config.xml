<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">     

<part id="cf"> <!--  xmlns:xi="http://www.w3.org/2001/XInclude" -->
  <!-- <?dbhtml dir="config" ?> -->
  <title>Configuration of <productname>dCache</productname></title>
  
  <partintro>
    <para>
      This part contains descriptions of the components of dCache,
      their role, functionality within the framework. In short, all
      information necessary for configuring them.
    </para>
  </partintro>

  <xi:include href="config-pnfs.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <chapter id="cf-cell-startup">
    <title>Cell Package Start-Up Framework</title>

    <para>
      Apart from the PNFS server, all of dCache makes use of the cell
      package. It is a framework for a distributed and scalable server
      system in Java. The dCache system divided into cells which
      communicate with each other via messages. Several cells run
      simultaneously in one domain.
    </para>

    <para>
      Each domain runs in a separate Java virtual machine and each
      cell is run as a separate thread therein. The domains
      communicate with each other via network connection which are
      established at start-up. In the standard setup all domains
      connect with the <quote>dCacheDomain</quote> which routes all
      messages to the appropriate domains. Note, that actual data
      transfers are not done via these established connections.
    </para>

    <para>
      Within this framework, cells send messages to other cells
      addressing them in the form
      <literal><replaceable>cellName</replaceable>@<replaceable>domainName</replaceable></literal>.
      This way, cells can communicate without knowledge about the host
      they run on. Some cells are <glossterm
      linkend="gl-well-known-cell">well known</glossterm>, i.e. they
      can be addressed just by their name without
      <literal>@<replaceable>domainName</replaceable></literal>. Evidently,
      this can only work properly if the name of the cell is unique
      throuout the hole system. 
    </para>

    <para>
      If two well known cells with the same name are present, the
      system will behave in an undefined way.  Therefore it is wise to
      take care when starting, naming, and renaming the well known
      cells. Some cell types, like the <literal>PoolManager</literal>
      will always be well known, while others may be made well known
      by the <literal>-export</literal> option. Some cell types can
      and should never be well known. The same problem can arise if
      two dCache instances which are meant to be separate use the same
      <glossterm linkend="gl-location-manager">location
      manager</glossterm> due to a miss-configuration: Messages meant
      for e.g. the pool manager of one instance get routed to the pool
      manager of the other instance which generally will not be able
      to handle the request properly.
    </para>

    <para>
      A domain is started with a shell script
      <filename>jobs/<replaceable>domainName</replaceable>.sh</filename><footnote>
	<para>
	  Filenames will always be relative to the dCache installation
	  directory, which defaults to
	  <filename>/opt/d-cache/</filename>.
	</para>
      </footnote>
      (which in the standard setup is for all domains a link to
      <filename>jobs/wrapper2.sh</filename>).  This will use the
      configuration variables in
      <filename>config/<replaceable>domainName</replaceable>Setup</filename>
      (which normally is a link to
      <filename>config/dCacheDomain</filename>), start the Java
      virtual machine and execute the cell package commands in
      <filename>config/<replaceable>domainName</replaceable>.batch</filename>.
      The main task of these commands is to start up all the cells
      which should be running in the domain. It follows a typical batch file.
    </para>

    <example>
      <title>Example batch file <filename>config/gridftpdoor.batch</filename></title>
      <programlisting>set printout default 2
set printout CellGlue none
onerror shutdown

check -strong setupFile
copy file:${setupFile} context:setupContext
import context -c setupContext
check -strong serviceLocatorPort serviceLocatorHost
check -strong sshPort ftpPort

create dmg.cells.services.RoutingManager  RoutingMgr
create dmg.cells.services.LocationManager lm \
       "${serviceLocatorHost} ${serviceLocatorPort}"

create dmg.cells.services.login.LoginManager GFTP \
            "2811 \
             -export \
             diskCacheV111.doors.GsiFtpDoorV1 \
             -prot=raw \
             -clientDataPortRange=${clientDataPortRange} \
             -root=${ftpBase} \
             -kpwd-file=${kpwdFile} \
             -tlog=/tmp/dcache-ftp-tlog \
             -maxLogin=100 \
             -brokerUpdateTime=5 \
             -protocolFamily=gsiftp \
             -loginBroker=LoginBroker \
             -poolManagerTimeout=5400 \
             -pnfsTimeout=120 \
             -maxRetries=80 \
             -maxStreamsPerClient=10 \
             -ftp-adapter-internal-interface=10.0.1.1 \
"</programlisting>
    </example>
      
    <para>
      It is not necessary to understand every detail of the syntax of
      the batch files even for the most advanced dCache administration
      tasks. The following explanations should be sufficient: The
      first tree lines set some logging behaviour. 
    </para>

    <para>
      The next 5 lines import the variables from the
      <filename>config/<replaceable>domainName</replaceable>Setup</filename>
      file into the <glossterm
      linkend="gl-context">context</glossterm> of the domain.
      
      The values of the variables defined in the setup file are placed
      whereever
      <literal>${<replaceable>variableName</replaceable>}</literal>
      appears.
    </para>

    <para>
      The <command>create</command> commands at the end start three
      cells. It takes up to three parameters: The Java class to start,
      the name of the cell and the argument string which is passed to
      the class. In the standard setup, most parameters to the cells
      are either set to reasonable values or are filled from variables
      defined in the setup file. This way, the batch files only need
      to be changed for more advanced configuration tasks.
    </para>

    <para>
      The routing manager and location manager cells are started in
      each domain are part of the underlying cell package
      structure. Each domain will contain at least one cell in
      addition to them.
    </para>

    <unfinished>

      <para>
	Correct above: standard batch are good. RPM update might
	overwrite modifications. Therefore, make a copy to a different
	name if modifications are necessary. The domain will have a
	different name then.
      </para>
      
      <para>
	Put backgroundinfo at end
      </para>

      <para>
	<screen>
Please create an rsa dcache  admin keypair :

ssh-keygen -b 1024 -t rsa1 -f  dcache-admin-key -N ""

and add the public part to the :

/opt/d-cache/config/authorized_keys

file. Allow up to a minute before the key is
automatically activated. 

The <quote>comment</quote> at the end of the public key line has to be
changed to <quote>admin</quote>.
	</screen>
      </para>
    </unfinished>


  </chapter>
  
  <xi:include href="config-PoolManager.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

  <xi:include href="config-hsm.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

</part>

